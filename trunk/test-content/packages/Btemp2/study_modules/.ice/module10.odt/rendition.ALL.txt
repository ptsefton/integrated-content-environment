<?xml version="1.0"?>
<html><head><meta content="text/html; charset=UTF-8" http-equiv="Content-Type"/><title>Addressing modes</title><style type="text/css">table {border-spacing: 0;empty-cells: show; }
.body .indent {margin-left: 25px;}
.body .hint {font-size: 1.4em; font-style: normal;font-weight:bolder;color: #00000;}
.spCh {font-family: 'Lucida Grande','Arial Unicode MS', sans-serif; font-size: 1.2em;}
span.underline {text-decoration:underline; }
table.Table6 {width:14.464cm; }
div.Table6 {width: 100%; margin: 0px; padding: 0px; }
th.Table6_A1, td.Table6_A1 {border:none; padding:0cm; }
th.Table6_B1, td.Table6_B1 {border:none; padding-bottom:0cm; padding-left:0.101cm; padding-right:0cm; padding-top:0cm; }
th.Table6_C1, td.Table6_C1 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:0.018cm solid #000000; padding-bottom:0cm; padding-left:0.101cm; padding-right:0cm; padding-top:0cm; }
th.Table6_E1, td.Table6_E1 {border:0.018cm solid #000000; padding-bottom:0cm; padding-left:0.101cm; padding-right:0cm; padding-top:0cm; }
table.Table7 {margin-left:0.6cm; margin-right:5.006cm; width:8.996cm; }
div.Table7 {width: 100%; margin: 0px; padding: 0px; }
th.Table7_A1, td.Table7_A1 {border:none; padding:0cm; }
th.Table7_B1, td.Table7_B1 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table7_C1, td.Table7_C1 {border-bottom:0.018cm solid #000000; border-left:none; border-right:none; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table7_D1, td.Table7_D1 {border-bottom:none; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding-bottom:0cm; padding-left:0.101cm; padding-right:0cm; padding-top:0cm; }
th.Table7_E1, td.Table7_E1 {border:none; padding-bottom:0cm; padding-left:0.101cm; padding-right:0cm; padding-top:0cm; }
th.Table7_B2, td.Table7_B2 {border-bottom:0.018cm solid #000000; border-left:none; border-right:none; border-top:none; padding-bottom:0cm; padding-left:0.101cm; padding-right:0.101cm; padding-top:0cm; }
th.Table7_B3, td.Table7_B3 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding:0.097cm; }
th.Table7_C3, td.Table7_C3 {border-bottom:0.018cm solid #000000; border-left:none; border-right:none; border-top:none; padding:0.097cm; }
table.Table8 {margin-left:0.6cm; margin-right:5.027cm; width:8.975cm; }
div.Table8 {width: 100%; margin: 0px; padding: 0px; }
th.Table8_A1, td.Table8_A1 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table8_B1, td.Table8_B1 {border-bottom:none; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding:0.097cm; }
th.Table8_C1, td.Table8_C1 {border:0.018cm solid #000000; padding:0.097cm; }
th.Table8_A2, td.Table8_A2 {border:none; padding:0.097cm; }
table.Table9 {margin-left:0.6cm; margin-right:6.02cm; width:7.982cm; }
div.Table9 {width: 100%; margin: 0px; padding: 0px; }
th.Table9_A1, td.Table9_A1 {border:none; padding:0.097cm; }
th.Table9_A2, td.Table9_A2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table9_B2, td.Table9_B2 {border:0.018cm solid #000000; padding:0.097cm; }
table.Table10 {margin-left:0.6cm; margin-right:3.507cm; width:10.495cm; }
div.Table10 {width: 100%; margin: 0px; padding: 0px; }
th.Table10_A1, td.Table10_A1 {border:none; padding:0.097cm; }
th.Table10_B1, td.Table10_B1 {border-bottom:0.018cm solid #000000; border-left:none; border-right:none; border-top:none; padding:0.097cm; }
th.Table10_B2, td.Table10_B2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding:0.097cm; }
th.Table10_C2, td.Table10_C2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
table.Table11 {margin-left:0.6cm; margin-right:3.507cm; width:10.495cm; }
div.Table11 {width: 100%; margin: 0px; padding: 0px; }
th.Table11_A1, td.Table11_A1 {border:none; padding:0.097cm; }
th.Table11_B1, td.Table11_B1 {border-bottom:0.018cm solid #000000; border-left:none; border-right:none; border-top:none; padding:0.097cm; }
th.Table11_B2, td.Table11_B2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding:0.097cm; }
th.Table11_C2, td.Table11_C2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
table.Table30 {width:7.475cm; }
div.Table30 {width: 100%; margin: 0px; padding: 0px; }
th.Table30_A1, td.Table30_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table12 {margin-left:0.6cm; margin-right:6.085cm; width:7.916cm; }
div.Table12 {width: 100%; margin: 0px; padding: 0px; }
th.Table12_A1, td.Table12_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table13 {keep-with-next:always; margin-left:0.6cm; width:11.419cm; }
div.Table13 {width: 100%; margin: 0px; padding: 0px; }
th.Table13_A1, td.Table13_A1 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table13_B1, td.Table13_B1 {border-bottom:none; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding:0cm; }
th.Table13_C1, td.Table13_C1 {border:none; padding:0cm; }
th.Table13_A2, td.Table13_A2 {border-bottom:0.018cm solid #000000; border-left:none; border-right:none; border-top:none; padding-bottom:0cm; padding-left:0.101cm; padding-right:0.101cm; padding-top:0cm; }
th.Table13_A3, td.Table13_A3 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding:0.097cm; }
table.Table14 {keep-with-next:always; margin-left:0.6cm; width:11.419cm; }
div.Table14 {width: 100%; margin: 0px; padding: 0px; }
th.Table14_A1, td.Table14_A1 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table14_B1, td.Table14_B1 {border-bottom:none; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding:0cm; }
th.Table14_C1, td.Table14_C1 {border:none; padding:0cm; }
th.Table14_A2, td.Table14_A2 {border-bottom:0.018cm solid #000000; border-left:none; border-right:none; border-top:none; padding-bottom:0cm; padding-left:0.101cm; padding-right:0.101cm; padding-top:0cm; }
th.Table14_A3, td.Table14_A3 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding:0.097cm; }
table.Table15 {margin-left:0.6cm; margin-right:0.353cm; width:13.649cm; }
div.Table15 {width: 100%; margin: 0px; padding: 0px; }
th.Table15_A1, td.Table15_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table16 {keep-with-next:always; margin-left:0.6cm; margin-right:3.131cm; width:10.871cm; }
div.Table16 {width: 100%; margin: 0px; padding: 0px; }
th.Table16_A1, td.Table16_A1 {background-color:transparent; border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table17 {margin-left:0.6cm; margin-right:2.073cm; width:11.929cm; }
div.Table17 {width: 100%; margin: 0px; padding: 0px; }
th.Table17_A1, td.Table17_A1 {border:none; padding:0.097cm; }
table.Table18 {margin-left:0.6cm; margin-right:9.768cm; width:4.233cm; }
div.Table18 {width: 100%; margin: 0px; padding: 0px; }
th.Table18_A1, td.Table18_A1 {border:none; padding:0.097cm; }
table.Table20 {width:14.601cm; }
div.Table20 {width: 100%; margin: 0px; padding: 0px; }
table.Table21 {margin-left:0.6cm; margin-right:7.034cm; width:6.967cm; }
div.Table21 {width: 100%; margin: 0px; padding: 0px; }
th.Table21_A1, td.Table21_A1 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table21_B1, td.Table21_B1 {border-bottom:0.018cm solid #000000; border-left:none; border-right:0.018cm solid #000000; border-top:0.018cm solid #000000; padding:0.097cm; }
table.Table25 {width:12.502cm; }
div.Table25 {width: 100%; margin: 0px; padding: 0px; }
th.Table25_A1, td.Table25_A1 {border:none; padding:0cm; }
th.Table25_B1, td.Table25_B1 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:0.018cm solid #000000; padding:0.049cm; }
th.Table25_D1, td.Table25_D1 {border-bottom:0.018cm solid #000000; border-left:none; border-right:none; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table25_E1, td.Table25_E1 {border-bottom:0.018cm solid #000000; border-left:none; border-right:0.018cm solid #000000; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table25_B2, td.Table25_B2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding:0.049cm; }
th.Table25_D2, td.Table25_D2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding:0.097cm; }
th.Table25_E2, td.Table25_E2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
th.Table25_C3, td.Table25_C3 {border-bottom:0.018cm solid #000000; border-left:none; border-right:none; border-top:none; padding-bottom:0cm; padding-left:0.101cm; padding-right:0.101cm; padding-top:0cm; }
th.Table25_C4, td.Table25_C4 {border-bottom:none; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
th.Table25_D5, td.Table25_D5 {border-bottom:0.018cm solid #000000; border-left:none; border-right:none; border-top:none; padding:0.097cm; }
th.Table25_E5, td.Table25_E5 {border-bottom:0.018cm solid #000000; border-left:none; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
table.Table19 {keep-with-next:always; width:14.601cm; }
div.Table19 {width: 100%; margin: 0px; padding: 0px; }
th.Table19_A1, td.Table19_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table23 {keep-with-next:always; margin-left:0cm; margin-right:-0.018cm; width:14.619cm; }
div.Table23 {width: 100%; margin: 0px; padding: 0px; }
th.Table23_A1, td.Table23_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table24 {keep-with-next:always; width:14.601cm; }
div.Table24 {width: 100%; margin: 0px; padding: 0px; }
th.Table24_A1, td.Table24_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table35 {width:14.601cm; }
div.Table35 {width: 100%; margin: 0px; padding: 0px; }
span.Table35_1 {keep-together:always; }
th.Table35_A1, td.Table35_A1 {border:none; padding:0cm; }
table.Table22 {width:12.599cm; }
div.Table22 {width: 100%; margin: 0px; padding: 0px; }
th.Table22_A1, td.Table22_A1 {border:none; padding:0.097cm; }
th.Table22_B1, td.Table22_B1 {border-bottom:0.018cm solid #000000; border-left:none; border-right:none; border-top:none; padding:0.097cm; }
th.Table22_B2, td.Table22_B2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding:0.097cm; }
th.Table22_D2, td.Table22_D2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
Header_20_right.P1 {margin-bottom:0cm; margin-top:0cm; }
p-center.P2 {margin-bottom:0cm; margin-top:0cm; }
p-center.P3 {font-size:7pt; margin-bottom:0cm; margin-top:0cm; }
Header_20_left.P5 {font-weight:normal; }
p.P6 {keep-together:always; keep-with-next:always; }
li1b.P7 {keep-with-next:always; }
li1b.P8 {keep-together:always; keep-with-next:always; }
li1p.P9 {keep-with-next:always; }
h1.P10 {keep-together:always; keep-with-next:always; }
p.P11 {keep-with-next:always; }
h2n.P12 {keep-together:always; keep-with-next:always; }
li1p.P13 {keep-with-next:always; }
p.P14 {text-align:start; }
p.P18 {break-after:auto; }
h1n.P19 {keep-together:always; keep-with-next:always; }
span.T1 {font-size: smaller; vertical-align: sub; }</style></head><body><h1><a id="id2" name="id2"><!--id2--></a>Overview</h1><p>In programming microprocessors there are several different ways that one can specify a memory address. These different ways are known as addressing modes. </p><p><a href="http://localhost:8000/rep.test-content/packages/ele_1301_s1/media/resources/cmap/stored_prog_design.html">Stored program design (concept map)</a></p><h1><a id="id3" name="id3"><!--id3--></a>Objectives</h1><p class="P6">At the completion of this module you will be able to:</p><ul class="lib"><li><p>list the techniques used in programming microprocessors through the use of addressing modes</p></li><li><p>give examples of the addressing modes available on the MC68HC11 microprocessor</p></li><li><p>show how a typical fetch and execute cycle operates in a CPU.<br/></p></li></ul><h1><a id="id5" name="id5"><!--id5--></a>10.1 Programming techniques</h1><p>A chosen address mode depends upon one or more of the following:</p><ul class="lib"><li><p>The specified address needs to be as short as possible for the job because it takes less memory space to program and less time to operate.</p></li><li><p>Sometimes tables of data need to be accessed by a program. There are ways to speed up this process which depend upon the mode chosen.<br/></p></li></ul><h1><a id="id7" name="id7"><!--id7--></a>10.2 Addressing modes</h1><p>Several addressing modes have been derived for microprocessors and typical ones are:</p><ul class="lib"><li><p><b>direct</b> addressing</p></li><li><p><b>extended</b> addressing</p></li><li><p><b>indirect</b> addressing</p></li><li><p><b>indexed</b> addressing</p></li><li><p><b>relative</b> addressing</p></li><li><p><b>stack</b> addressing</p></li><li><p><b>inherent</b> addressing<br/></p></li></ul><h2><a id="id9" name="id9"><!--id9--></a>10.2.1 Direct addressing</h2><p class="P6">In the simple example of programming given in module 8 we used the mode known as direct addressing. Direct addressing means <b>that the operand address field contains the address of the operand</b>. For the whole instruction LDA 00, it means load the accumulator with the value stored at location 00.</p><p>In a program we have:</p><div class="Table6" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table6" style="border-spacing: 0;empty-cells: show; width:14.464cm; border-collapse: collapse; "><colgroup><col style="width:3.836cm;"/><col style="width:1.03cm;"/><col style="width:2.434cm;"/><col style="width:2.432cm;"/><col style="width:2.434cm;"/><col style="width:2.297cm;"/></colgroup><tbody><tr><td class="Table6_A1" style="vertical-align: middle;  border:none;  padding:1.0px; "><p class="P14">Location address</p></td><td class="Table6_B1" style="vertical-align: middle;  border:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:1.0px;  padding-top:1.0px; "><p class="P14">03</p></td><td class="Table6_C1" style="vertical-align: middle;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:1.0px;  padding-top:1.0px; "><p class="P14">OPCODE<br/>FIELD</p></td><td class="Table6_C1" style="vertical-align: middle;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:1.0px;  padding-top:1.0px; "><p class="P14">REGISTER<br/>FIELD</p></td><td class="Table6_E1" style="vertical-align: middle;  border:1.0px solid #000000;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:1.0px;  padding-top:1.0px; "><p class="P14">ADDRESS<br/>MODE<br/>FIELD</p></td><td class="Table6_B1" style="vertical-align: middle;  border:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:1.0px;  padding-top:1.0px; "><p class="P14">(LDA)</p></td></tr><tr><td class="Table6_A1" style="vertical-align: middle;  border:none;  padding:1.0px; "><p class="P14"/></td><td class="Table6_B1" style="vertical-align: middle;  border:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:1.0px;  padding-top:1.0px; "><p class="P14"/></td><td class="Table6_B1" style="vertical-align: middle;  border:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:1.0px;  padding-top:1.0px; "><p class="P14"/></td><td class="Table6_B1" style="vertical-align: middle;  border:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:1.0px;  padding-top:1.0px; "><p class="P14"/></td><td class="Table6_B1" style="vertical-align: middle;  border:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:1.0px;  padding-top:1.0px; "><p class="P14"/></td><td class="Table6_B1" style="vertical-align: middle;  border:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:1.0px;  padding-top:1.0px; "><p class="P14"/></td></tr><tr><td class="Table6_A1" style="vertical-align: middle;  border:none;  padding:1.0px; "><p class="P14">Location address</p></td><td class="Table6_B1" style="vertical-align: middle;  border:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:1.0px;  padding-top:1.0px; "><p class="P14">04</p></td><td class="Table6_E1" colspan="3" style="vertical-align: middle;  border:1.0px solid #000000;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:1.0px;  padding-top:1.0px; "><p class="center">OPERAND ADDRESS FIELD</p></td><td class="Table6_B1" style="vertical-align: middle;  border:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:1.0px;  padding-top:1.0px; "><p class="P14">(00)</p></td></tr></tbody></table></div><p/><p>which is two 8 bit bytes stored in memory as:</p><div class="Table7" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table7" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:5.006cm; width:8.996cm; border-collapse: collapse; "><colgroup><col style="width:2.434cm;"/><col style="width:2.021cm;"/><col style="width:1.871cm;"/><col style="width:0.817cm;"/><col style="width:1.852cm;"/></colgroup><tbody><tr><td class="Table7_A1" style="vertical-align: middle;  border:none;  padding:1.0px; "><p>LOCN 03</p></td><td class="Table7_B1" style="vertical-align: middle;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p>1  0  0  1     </p></td><td class="Table7_C1" style="vertical-align: middle;  border-bottom:1.0px solid #000000;  border-left:none;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p>0  1  1  0</p></td><td class="Table7_D1" style="vertical-align: middle;  border-bottom:none;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:1.0px;  padding-top:1.0px; "><p/></td><td class="Table7_E1" style="vertical-align: middle;  border:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:1.0px;  padding-top:1.0px; "><p>(96)</p></td></tr><tr><td class="Table7_A1" style="vertical-align: middle;  border:none;  padding:1.0px; "><p/></td><td class="Table7_B2" style="vertical-align: middle;  border-bottom:1.0px solid #000000;  border-left:none;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:1.0px; "><p/></td><td class="Table7_B2" style="vertical-align: middle;  border-bottom:1.0px solid #000000;  border-left:none;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:1.0px; "><p/></td><td class="Table7_E1" style="vertical-align: middle;  border:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:1.0px;  padding-top:1.0px; "><p/></td><td class="Table7_E1" style="vertical-align: middle;  border:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:1.0px;  padding-top:1.0px; "><p/></td></tr><tr><td class="Table7_A1" style="vertical-align: middle;  border:none;  padding:1.0px; "><p>LOCN 04</p></td><td class="Table7_B3" style="vertical-align: middle;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p>0  0  0  0     </p></td><td class="Table7_C3" style="vertical-align: middle;  border-bottom:1.0px solid #000000;  border-left:none;  border-right:none;  border-top:none;  padding:0.097cm; "><p>0  0  0  0</p></td><td class="Table7_D1" style="vertical-align: middle;  border-bottom:none;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:1.0px;  padding-top:1.0px; "><p/></td><td class="Table7_E1" style="vertical-align: middle;  border:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:1.0px;  padding-top:1.0px; "><p>(00)</p></td></tr></tbody></table></div><p/><p>Direct addressing has one important limitation:</p><ul class="lib"><li><p>Direct addressing is not efficient for processing data arrays or tables, because it can only access a single fixed address at one time. In many situations we need to scan a whole table of data for one particular value. In this case it is better to use a loop of the one instruction to step through the table stored in memory at many addresses.<br/></p></li></ul><p>Direct addressing can be improved by a technique known as <span class="spCh spChx2018">&#x2018;</span>page addressing<span class="spCh spChx2019">&#x2019;</span>. This means memory is divided into imaginary 1000 word pages and part of the address can be kept in a page register and the remainder with the instruction. The program will only be shorter if it seldom requires changing pages. This means we could have 2 registers for the effective address, one for the instruction and one for the page address.</p><p>Consider the instruction ADD 2007.</p><div class="Table8" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table8" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:5.027cm; width:8.975cm; border-collapse: collapse; "><colgroup><col style="width:3.528cm;"/><col style="width:1.963cm;"/><col style="width:3.484cm;"/></colgroup><tbody><tr><td class="Table8_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">ADD 7</p></td><td class="Table8_B1" style="vertical-align: top;  border-bottom:none;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center"/></td><td class="Table8_C1" style="vertical-align: top;  border:1.0px solid #000000;  padding:0.097cm; "><p class="right">2&#xA0;&#xA0;&#xA0;&#xA0;</p></td></tr><tr><td class="Table8_A2" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Instruction register</b></p></td><td class="Table8_A2" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b><!--empty--></b></p></td><td class="Table8_A2" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Page register in thousands</b></p></td></tr></tbody></table></div><p/><p>The effective address = 2007 and following execution of this instruction we have:</p><p>(new contents of ACC)   =   (previous contents of ACC)   +   (contents of LOCN 2007)</p><p class="P11">In a further development of this technique, by restricting the number of pages the CPU can access at one time, the page register can be eliminated. For instance if all information is in the first page of memory, this is called page zero addressing. Other techniques are then required to access other pages. Another technique is to restrict the CPU to pages with the same number as the instruction MSB. This is called <b>current page</b> addressing. These methods may be combined by including a single bit with each instruction (called the page bit) to indicate which option is being used.</p><div class="Table9" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table9" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:6.02cm; width:7.982cm; border-collapse: collapse; "><colgroup><col style="width:5.976cm;"/><col style="width:2.006cm;"/></colgroup><tbody><tr><td class="Table9_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Instruction</b></p></td><td class="Table9_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Page bit</b></p></td></tr><tr><td class="Table9_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center"/></td><td class="Table9_B2" style="vertical-align: top;  border:1.0px solid #000000;  padding:0.097cm; "><p class="center"><span style="text-decoration:underline; "><span class="underline">0 or 1</span></span></p></td></tr></tbody></table></div><p/><p>The page bit is zero for page zero addressing and one for current page addressing.</p><p>As an example of page zero and current page addressing, consider the following:</p><div class="Table10" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table10" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:3.507cm; width:10.495cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:2.492cm;"/><col style="width:6.018cm;"/><col style="width:1.984cm;"/></colgroup><tbody><tr><td class="Table10_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Address</b></p></td><td class="Table10_B1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:none;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center"><b>Instruction</b></p></td><td class="Table10_B1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:none;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center"><b>Page bit</b></p></td></tr><tr><td class="Table10_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center">4010</p></td><td class="Table10_B2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">ADD 38</p></td><td class="Table10_C2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="center">0</p></td></tr></tbody></table></div><p/><p>The effective address is 0038 and the result is that the accumulator will have the contents of location 38 added to it. This is page zero addressing. Consider now:</p><div class="Table11" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table11" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:3.507cm; width:10.495cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:2.492cm;"/><col style="width:6.018cm;"/><col style="width:1.984cm;"/></colgroup><tbody><tr><td class="Table11_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Address</b></p></td><td class="Table11_B1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:none;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center"><b>Instruction</b></p></td><td class="Table11_B1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:none;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center"><b>Page bit</b></p></td></tr><tr><td class="Table11_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center">4010</p></td><td class="Table11_B2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">ADD 38</p></td><td class="Table11_C2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="center">1</p></td></tr></tbody></table></div><p/><p>The effective address is 4038 since the instruction is on page 4 and the result is the contents of location 4038 is added to the accumulator. This is called current page addressing.</p><h2><a id="id10" name="id10"><!--id10--></a>10.2.2 Extended addressing</h2><p>Extended addressing is used to access data stored in any address in the 64Kbyte range of memory addresses (0000<sub>16</sub> to FFFF<sub>16</sub>) using a 16 bit address as follows:</p><div class="Table30" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table30" style="border-spacing: 0;empty-cells: show; width:7.475cm; border-collapse: collapse; "><colgroup><col style="width:0.97cm;"/><col style="width:1.014cm;"/><col style="width:0.993cm;"/><col style="width:1.014cm;"/><col style="width:3.484cm;"/></colgroup><tbody><tr><td class="Table30_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>e.g.</p></td><td class="Table30_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>B6</p></td><td class="Table30_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>10</p></td><td class="Table30_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>20</p></td><td class="Table30_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>LDAA $1020</p></td></tr></tbody></table></div><p>where the memory address of the required data is $1020.</p><h2><a id="id11" name="id11"><!--id11--></a>10.2.3 Indirect addressing</h2><p class="P6">This means that the address of another location which holds the data, is part of the instruction.</p><p class="P6"><b>The operand address field gives the address of a memory location which contains the address of the operand.</b></p><p>We will note in passing that the Motorola 6800 series microprocessor does not have indirect addressing. However, several processors do and we will consider it here. An example will explain the use of indirect addressing.</p><div class="Table12" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table12" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:6.085cm; width:7.916cm; border-collapse: collapse; "><colgroup><col style="width:4.983cm;"/><col style="width:2.933cm;"/></colgroup><tbody><tr><td class="Table12_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>Consider the instruction:</p></td><td class="Table12_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="center">ADD @ 100</p></td></tr><tr><td class="Table12_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table12_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="center"><span class="spCh spChx2191">&#x2191;</span></p></td></tr><tr><td class="Table12_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table12_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="center">Indirect symbol</p></td></tr></tbody></table></div><p/><p>This means go to location 100, get its contents and use it as an address, go to that address and add its contents to the accumulator. Suppose we examine another example looking at the actual registers. Initially we have:</p><p><a name="graphics2"><!-- --></a><img alt="graphics2" class="fr1" height="389" src="module10_files/318c6139_546x389.jpg" style="border:0px; vertical-align: top" width="546"/></p><p>The computer is told to start at address 0 by putting 0 into the program counter. The sequence of events is:</p><ul class="lib"><li><p>After execution of the instruction LDA @ 50 at address 0 the computer goes to address 50, gets an address of 20, goes to 20 and gets the data 10 which it loads into the accumulator (ACC).</p><p>The program counter (PC) increments itself ready for the next instruction.</p><p>The registers are now as follows:</p><div class="Table13" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table13" style="border-spacing: 0;empty-cells: show; keep-with-next:always; margin-left:0.6cm; width:11.419cm; border-collapse: collapse; "><colgroup><col style="width:5.364cm;"/><col style="width:3.029cm;"/><col style="width:3.027cm;"/></colgroup><tbody><tr><td class="Table13_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="right">1&#xA0;&#xA0;</p></td><td class="Table13_B1" style="vertical-align: top;  border-bottom:none;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:1.0px; "><p class="P14"/></td><td class="Table13_C1" style="vertical-align: top;  border:none;  padding:1.0px; "><p class="center">Program counter<br/>(PC)</p></td></tr><tr><td class="Table13_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:none;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:1.0px; "><p class="right"/></td><td class="Table13_C1" style="vertical-align: top;  border:none;  padding:1.0px; "><p class="P14"/></td><td class="Table13_C1" style="vertical-align: top;  border:none;  padding:1.0px; "><p class="center"/></td></tr><tr><td class="Table13_A3" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="right">10&#xA0;&#xA0;</p></td><td class="Table13_B1" style="vertical-align: top;  border-bottom:none;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:1.0px; "><p class="P14"/></td><td class="Table13_C1" style="vertical-align: top;  border:none;  padding:1.0px; "><p class="center">Accumulator<br/>(ACC)</p></td></tr></tbody></table></div><p/></li><li><p>After execution of the instruction ADD @ 51, the computer goes to address 51, gets address 100, goes to 100, gets data 30 which it adds to the ACC giving 40. The registers are now:</p><div class="Table14" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table14" style="border-spacing: 0;empty-cells: show; keep-with-next:always; margin-left:0.6cm; width:11.419cm; border-collapse: collapse; "><colgroup><col style="width:5.364cm;"/><col style="width:3.029cm;"/><col style="width:3.027cm;"/></colgroup><tbody><tr><td class="Table14_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="right">2&#xA0;&#xA0;</p></td><td class="Table14_B1" style="vertical-align: top;  border-bottom:none;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:1.0px; "><p class="P14"/></td><td class="Table14_C1" style="vertical-align: top;  border:none;  padding:1.0px; "><p class="center">Program counter<br/>(PC)</p></td></tr><tr><td class="Table14_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:none;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:1.0px; "><p class="right"/></td><td class="Table14_C1" style="vertical-align: top;  border:none;  padding:1.0px; "><p class="P14"/></td><td class="Table14_C1" style="vertical-align: top;  border:none;  padding:1.0px; "><p class="center"/></td></tr><tr><td class="Table14_A3" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="right">40&#xA0;&#xA0;</p></td><td class="Table14_B1" style="vertical-align: top;  border-bottom:none;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:1.0px; "><p class="P14"/></td><td class="Table14_C1" style="vertical-align: top;  border:none;  padding:1.0px; "><p class="center">Accumulator<br/>(ACC)</p></td></tr></tbody></table></div><p/></li><li><p>After STA @ 52, the computer goes to 52, gets 200, goes to 200 and stores the ACC value of 40 there. The PC increments to 3 and the processor halts. The ACC also retains the value of 40 as well.</p><p>This appears more confusing and is slower than direct addressing, however its use in handling tables and arrays is more convenient than direct addressing.<br/></p></li></ul><h2><a id="id13" name="id13"><!--id13--></a>10.2.4 Immediate addressing</h2><p><a name="graphics3"><!-- --></a><img alt="graphics3" class="fr1" height="60" src="module10_files/m7c4370f4_546x60.jpg" style="border:0px; vertical-align: top" width="546"/></p><p>This means add the number 4 immediately to the accumulator<span class="spCh spChx2019">&#x2019;</span>s contents. This is handy for introducing constants into a program. For example: LDA #4 puts the number 4 immediately into the ACC which would be faster than using direct addressing for example: </p><p>M&#xA0;&#xA0;=&#xA0;&#xA0;4<br/>LDA M</p><p>Note that for:</p><p>d<b>irect addressing<br/>extended addressing<br/>indirect addressing<br/>immediate addressing<br/>inherent implied addressing</b></p><p>no additional CPU hardware, i.e. registers or counters are required. For example all of these addressing modes could be implemented on the CPU architecture shown in figure 8.1.</p><p>The addressing modes remaining, namely</p><p><b>indexed addressing<br/>relative addressing<br/>stack addressing</b></p><p>all require the use of <span class="spCh spChx2018">&#x2018;</span>special registers<span class="spCh spChx2019">&#x2019;</span> in addition to the <b><span class="spCh spChx2018">&#x2018;</span>Operand address field<span class="spCh spChx2019">&#x2019;</span></b> to specify a unique memory address.</p><p>Therefore, to study these modes additional registers have to be added to the general CPU architecture of figure 8.1. These registers are</p><p><span class="spCh spChx2018">&#x2018;</span>The <b>index</b> register<span class="spCh spChx2019">&#x2019;</span><br/><span class="spCh spChx2018">&#x2018;</span>The <b>stack pointer</b><span class="spCh spChx2019">&#x2019;</span>.</p><p>Conveniently, however, the architecture of the M6800 series microprocessor provides basically these features. As it is to be used extensively in subsequent sections it will be used here in preference to a modified CPU based on figure 8.1.</p><p>Consider the CPU architecture of the M6800 series microprocessor as shown in figure 10.1.</p><p class="figure-caption-above"><b>Figure </b><b>10</b><b>.</b><b>1</b><b>:</b> Simplified block diagram of the 6800 MPU</p><p><a name="graphics4"><!-- --></a><img alt="graphics4" class="fr1" height="630" src="module10_files/m254fb38b_543x630.jpg" style="border:0px; vertical-align: top" width="543"/></p><blockquote class="bqs"><p>(Source: Motorola Australia Pty Ltd, M6800 Application notes. Reproduced with permission from Motorola Semiconductor Products.)</p></blockquote><p>By comparison with the simplified model in figure 8.1 there are several new additions and modifications. These are:</p><ul class="lib"><li><p>There are <span class="spCh spChx2018">&#x2018;</span>bus drivers<span class="spCh spChx2019">&#x2019;</span> which buffer the address bus and the address register, and the data bus and the internal data highways of CPU. The data bus needs to be bidirectional for <span class="spCh spChx2018">&#x2018;</span>loading from<span class="spCh spChx2019">&#x2019;</span> and <span class="spCh spChx2018">&#x2018;</span>storing in<span class="spCh spChx2019">&#x2019;</span> memory.</p><p><b>Note:</b> The normal configuration is as follows:</p><p><a name="graphics5"><!-- --></a><img alt="graphics5" class="fr2" height="143" src="module10_files/m748156ec_522x143.jpg" style="border:0px; vertical-align: top" width="522"/></p><p>The <span class="spCh spChx2018">&#x2018;</span>Address bus<span class="spCh spChx2019">&#x2019;</span> consists of 16 lines, giving a 16 bit binary address, which can be connected to all memory chips and input/output (I/O) devices. All I/O devices on the M6800 series microprocessor are addressed exactly the same as memory locations.</p><p>The 8-bit data bus is used for the transfer of information between the CPU and the memory or I/O devices. All the devices, which place output data onto the data bus are controlled by tri-state gates and all devices that take data from the bus use clocked latches.</p><p>More detail on the system configuration will be considered in a later module. The point to note is that the <span class="spCh spChx2018">&#x2018;</span>bus drivers<span class="spCh spChx2019">&#x2019;</span> buffer the CPU from the heavy electrical load presented by having a large number of external devices connected to the bus as part of the system.</p></li><li><p>The program counter (PC) and address register are now 16 bits wide, which means the M6800 series microprocessor can address 0 to 65535 locations. This is normally referred to as a 64K memory address capability.</p></li><li><p>The M6800 series microprocessor has 2 working registers known as <span class="spCh spChx2018">&#x2018;</span>Accumulator A<span class="spCh spChx2019">&#x2019;</span> and <span class="spCh spChx2018">&#x2018;</span>Accumulator B<span class="spCh spChx2019">&#x2019;</span>. Both perform the same function as the <span class="spCh spChx2018">&#x2018;</span>accumulator<span class="spCh spChx2019">&#x2019;</span> in the earlier architecture. The <span class="spCh spChx2018">&#x2018;</span>Register Field<span class="spCh spChx2019">&#x2019;</span> content of the instruction will determine which accumulator will be used.</p></li><li><p>Two new registers called the <span class="spCh spChx2018">&#x2018;</span>index register<span class="spCh spChx2019">&#x2019;</span> and the <span class="spCh spChx2018">&#x2018;</span>stack pointer<span class="spCh spChx2019">&#x2019;</span> are included. Both these are used for specific addressing modes and will be discussed in the following.<br/></p></li></ul><h2><a id="id15" name="id15"><!--id15--></a>10.2.5 Indexed addressing</h2><p>This addressing mode requires the use of the special register, the <b>index register</b>, to calculate the address of the operand.</p><div class="Table15" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table15" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:0.353cm; width:13.649cm; border-collapse: collapse; "><colgroup><col style="width:3.992cm;"/><col style="width:0.75cm;"/><col style="width:3.24cm;"/><col style="width:0.75cm;"/><col style="width:4.918cm;"/></colgroup><tbody><tr><td class="Table15_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><b>Address&#xA0;of&#xA0;operand</b></p></td><td class="Table15_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><b>=</b></p></td><td class="Table15_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><b>(index&#xA0;register)</b></p></td><td class="Table15_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><b>+</b></p></td><td class="Table15_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><b>(operand&#xA0;address&#xA0;field)</b></p></td></tr></tbody></table></div><p/><p>i.e. In indexed addressing, the <span class="spCh spChx2018">&#x2018;</span>address of the operand<span class="spCh spChx2019">&#x2019;</span> is found by adding the <span class="spCh spChx2018">&#x2018;</span>contents of the operand address field<span class="spCh spChx2019">&#x2019;</span> to the <span class="spCh spChx2018">&#x2018;</span>index register<span class="spCh spChx2019">&#x2019;</span>.</p><p>Special instructions are provided to operate on the contents of the index register, i.e., to set its value prior to an instruction using indexed addressing.</p><div class="Table16" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table16" style="border-spacing: 0;empty-cells: show; keep-with-next:always; margin-left:0.6cm; margin-right:3.131cm; width:10.871cm; border-collapse: collapse; "><colgroup><col style="width:1.632cm;"/><col style="width:9.239cm;"/></colgroup><tbody><tr><td class="Table16_A1" style="vertical-align: top;  background-color:transparent;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>e.g.</p></td><td class="Table16_A1" style="vertical-align: top;  background-color:transparent;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>LDX load the index register.</p></td></tr><tr><td class="Table16_A1" style="vertical-align: top;  background-color:transparent;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table16_A1" style="vertical-align: top;  background-color:transparent;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>INX increment the index register.</p></td></tr><tr><td class="Table16_A1" style="vertical-align: top;  background-color:transparent;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table16_A1" style="vertical-align: top;  background-color:transparent;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>DEX decrement the index register.</p></td></tr><tr><td class="Table16_A1" style="vertical-align: top;  background-color:transparent;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table16_A1" style="vertical-align: top;  background-color:transparent;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>STX store the contents of index register in memory.</p></td></tr></tbody></table></div><p/><p>Indexed addressing may also be illustrated through examples.</p><p><a name="graphics6"><!-- --></a><img alt="graphics6" class="fr1" height="79" src="module10_files/m23eaf4e_432x79.jpg" style="border:0px; vertical-align: top" width="432"/></p><p>This instruction means <span class="spCh spChx2018">&#x2018;</span>add the contents of the location whose address is (15<sub>16</sub> + index register contents) into accumulator A<span class="spCh spChx2019">&#x2019;</span>.</p><p>Indexed addressing is excellent for accessing a table of values stored in memory. Suppose we wish to obtain the cube of a number. We could store a table of cubes in memory and access it through indexed addressing. Consider the registers:</p><p><a name="graphics7"><!-- --></a><img alt="graphics7" class="fr1" height="268" src="module10_files/17e1729b_545x268.jpg" style="border:0px; vertical-align: top" width="545"/></p><p>The number to be cubed is placed in the index register (e.g. 3). When the program is started at address 0, it loads the contents of the location whose address is 50 + 3 i.e. 53 into the accumulator. Hence 27 is placed in ACC which is the desired answer.</p><h2><a id="id16" name="id16"><!--id16--></a>10.2.6 Relative addressing</h2><div class="Table17" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table17" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:2.073cm; width:11.929cm; border-collapse: collapse; "><colgroup><col style="width:3.969cm;"/><col style="width:0.75cm;"/><col style="width:1.258cm;"/><col style="width:0.771cm;"/><col style="width:5.182cm;"/></colgroup><tbody><tr><td class="Table17_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p><b>Address&#xA0;of&#xA0;operand</b></p></td><td class="Table17_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p><b> =</b></p></td><td class="Table17_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p><b>(PC)</b></p></td><td class="Table17_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p><b> +</b></p></td><td class="Table17_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p><b>(operand&#xA0;address&#xA0;field)</b></p></td></tr></tbody></table></div><p/><p>i.e. for relative addressing the address of the operand is found by adding the contents of the <span class="spCh spChx2018">&#x2018;</span>program counter<span class="spCh spChx2019">&#x2019;</span> to the operand address field.</p><p>Normally the <span class="spCh spChx2018">&#x2018;</span>relative addressing<span class="spCh spChx2019">&#x2019;</span> in most microprocessors is confined to <b>branch</b> instructions.</p><div class="Table18" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table18" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:9.768cm; width:4.233cm; border-collapse: collapse; "><colgroup><col style="width:2.007cm;"/><col style="width:0.75cm;"/><col style="width:0.727cm;"/><col style="width:0.75cm;"/></colgroup><tbody><tr><td class="Table18_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p>e.g. BRA</p></td><td class="Table18_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p> *</p></td><td class="Table18_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p> +</p></td><td class="Table18_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p> 5</p></td></tr></tbody></table></div><p/><p>This would cause the program counter to be incremented by 5 and its contents would then be used as the address in the next instruction fetch. The number 5 is called the OFFSET.</p><p>In relative addressing the <span class="spCh spChx2018">&#x2018;</span>operand address field<span class="spCh spChx2019">&#x2019;</span> contains the branch distance relative to the current value of the PC. Two very important factors must be remembered when using relative addressing.</p><ul class="lib"><li><p>Negative branch distances are held in memory as 2<span class="spCh spChx2019">&#x2019;</span>s complement numbers i.e. to branch backwards.</p></li><li><p>The <b>value in the PC</b> will have been incremented <b>to point to the next instruction before</b> the branch addition takes place. This must be remembered when calculating branch distances.<br/></p></li></ul><p>As examples of relative addressing being used in branching, consider the following:</p><p><b>Program 1</b></p><p class="indent"><a name="graphics20"><!-- --></a><img alt="graphics20" class="fr2" height="175" src="module10_files/m2606d836_461x175.jpg" style="border:0px; vertical-align: top" width="461"/></p><p>This is a <b>forward</b> branch problem and remember the PC will have been incremented as soon as it has read the BRA instruction. Therefore, the PC is shown at address 2. Now we wish to branch to the instruction at address 4, so we need to go forward 2 more locations to get there. So we add +2 to the PC, i.e. the OFFSET is 02 in hexadecimal.</p><p class="P11"><b>Program 2</b></p><p><a name="graphics8"><!-- --></a><img alt="graphics8" class="fr1" height="285" src="module10_files/73d500ae_547x285.jpg" style="border:0px; vertical-align: top" width="547"/></p><h2><a id="id17" name="id17"><!--id17--></a>10.2.7 Stack addressing</h2><p>This is a special form of Register Indirect addressing. It is special in that:</p><ul class="lib"><li><p>The register is automatically incremented before a <span class="spCh spChx2018">&#x2018;</span><b>Load</b> from memory<span class="spCh spChx2019">&#x2019;</span> operation.</p></li><li><p>The register is automatically decremented after a <span class="spCh spChx2018">&#x2018;</span><b>Store</b> into memory<span class="spCh spChx2019">&#x2019;</span> operation.<br/></p></li></ul><p>Usually a special register is set aside for this type of addressing and is called the <span class="spCh spChx2018">&#x2018;</span><b>stack pointer</b><span class="spCh spChx2019">&#x2019;</span>. The instructions for use with this type of <span class="spCh spChx2018">&#x2018;</span>register-indirect auto increment/decrement addressing<span class="spCh spChx2019">&#x2019;</span> are also limited to the</p><ul class="lib"><li><p><b>Load</b> from memory called a <b>pop</b> or <b>pull</b> instruction.</p></li><li><p><b>Store</b> into memory called a <b>push</b> instruction.<br/></p></li></ul><p>Since repeated use of the same instruction, <b>i.e. push</b>, will cause data to be stored in sequential locations in memory then a special area of memory must be set aside for its use. This area is called the <b>stack</b>. The stack pointer, (SP), can be loaded etc. to point to a certain section reserved for the <span class="spCh spChx2018">&#x2018;</span>stack<span class="spCh spChx2019">&#x2019;</span> by special instructions such as:</p><p class="indent">LDS load the stack pointer</p><p class="indent">STS store the stack pointer</p><p class="P11">Use of the stack is illustrated as follows.</p><p><a name="graphics9"><!-- --></a><img alt="graphics9" class="fr1" height="203" src="module10_files/369becb9_418x203.jpg" style="border:0px; vertical-align: top" width="418"/></p><p>Initial conditions, are as shown in this diagram.</p><p>Following a <span class="spCh spChx2018">&#x2018;</span><b>Push A</b><span class="spCh spChx2019">&#x2019;</span> instruction, location 100 will = 56, as the contents of accumulator A will be stored in 100. The stack pointer will automatically be decremented to the <b>next empty location</b>, 99.</p><p><b>Following</b> a <span class="spCh spChx2018">&#x2018;</span><b>Push</b> <b>B<span class="spCh spChx2019">&#x2019;</span></b> instruction the contents of the memory, SP, etc. are as shown in the following diagram.</p><p class="indent"><a name="graphics10"><!-- --></a><img alt="graphics10" class="fr1" height="257" src="module10_files/m48ad9694_415x257.jpg" style="border:0px; vertical-align: top" width="415"/></p><div class="Table20" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table20" style="border-spacing: 0;empty-cells: show; width:14.601cm; border-collapse: collapse; "><colgroup><col style="width:1.499cm;"/><col style="width:13.102cm;"/></colgroup><tbody><tr><td style="vertical-align: top; "><p><b>Note:<br/>&#xA0;<br/>&#xA0;<br/>&#xA0;<br/>&#xA0;<br/>&#xA0;</b></p></td><td style="vertical-align: top; "><p>For the <b>push</b> operation, e.g. <b>Push</b> <b>A</b> or <b>Push</b> <b>B</b>, the (SP) initially provides the address, after which it is decremented to the next free location automatically.</p><p>For a <b>pull</b> (sometimes called <b>pop</b>) operation, e.g. <b>Pull</b> <b>A</b>, the (SP) will first be incremented to point to the last location and its contents used to fetch the data into the accumulator.</p></td></tr></tbody></table></div><p class="indent"><a name="graphics12"><!-- --></a><img alt="graphics12" class="fr1" height="220" src="module10_files/7c013330_396x220.jpg" style="border:0px; vertical-align: top" width="396"/></p><p><b>Note</b> that the stack pointer, SP, remains pointing at 99 since the contents of this location have been <span class="spCh spChx2018">&#x2018;</span>pulled off the stack<span class="spCh spChx2019">&#x2019;</span> leaving it as the <span class="spCh spChx2018">&#x2018;</span>next empty location<span class="spCh spChx2019">&#x2019;</span>.</p><p>The <b>stack</b> and <b>stack pointer</b> are used widely for handling subroutines, interrupts and temporary data storage. When using the stack take care to ensure the contents of the SP are not inadvertently modified and remember it is a last on/first off operation.</p><p>This completes the list of general addressing modes found in computers. Not all processors will have all the addressing modes, the architecture will vary with different makes of CPU. The choice of which CPU provides the best advantages depends on the proposed use of the computer.</p><h2><a id="id18" name="id18"><!--id18--></a>10.2.8 Inherent (implied) addressing</h2><p>Inherent instructions are those that operate on data in the microprocessor registers only. Instructions using this mode of addressing consist of an opcode only. That is, the opcode alone specifies the operation to be performed on a particular register, or registers, e.g. CLRB (clears the contents of accumulator B); ABA (adds the contents of accumulator B to accumulator A).</p><h1><a id="id19" name="id19"><!--id19--></a>10.3 Fetch and execute cycle</h1><p>Typically, the fetch and execute cycle has 4 steps in a computer system. This is illustrated by the diagram shown below. One <span class="spCh spChx2018">&#x2018;</span>full cycle<span class="spCh spChx2019">&#x2019;</span> is made up of these four steps, which include the <span class="spCh spChx2018">&#x2018;</span>instruction cycle<span class="spCh spChx2019">&#x2019;</span> (I <span class="spCh spChx2013">&#x2013;</span> cycle) and the <span class="spCh spChx2018">&#x2018;</span>execution cycle<span class="spCh spChx2019">&#x2019;</span> (E <span class="spCh spChx2013">&#x2013;</span> cycle). The instruction cycle refers to the fetching of the program code from memory and decoding it into its meaning. The execution cycle refers to carrying out the decoded instruction and storing the results in memory.</p><p class="indent"><a name="graphics11"><!-- --></a><img alt="graphics11" class="fr1" height="243" src="module10_files/99c78f_393x243.jpg" style="border:0px; vertical-align: top" width="393"/></p><p class="indent"><b>The Full Cycle</b></p><p>In module 8, you studied the simplified CPU architecture and the instruction format. Although the model of the M6800 microprocessor given in figure 10.1 is still simplified you should now be able to extend your knowledge to understand the data flow sequence for the <b><span class="spCh spChx2018">&#x2018;</span>fetch<span class="spCh spChx2019">&#x2019;</span></b> and <b><span class="spCh spChx2018">&#x2018;</span>execute<span class="spCh spChx2019">&#x2019;</span></b> cycle for an instruction such as:</p><div class="Table21" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table21" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:7.034cm; width:6.967cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:3.507cm;"/><col style="width:3.461cm;"/></colgroup><tbody><tr><td class="Table21_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">ADD A</p></td><td class="Table21_B1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:none;  border-right:1.0px solid #000000;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">$15, X</p></td></tr></tbody></table></div><p/><p>which is the mnemonic expression for the instruction which will <span class="spCh spChx2018">&#x2018;</span>add the contents of the location whose address is [15<sub>16</sub> + (<b>Index</b> <b>Reg</b>)] into the accumulator A<span class="spCh spChx2019">&#x2019;</span>.</p><p>The content of the instruction as it is held in memory will be as follows:</p><div class="Table25" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table25" style="border-spacing: 0;empty-cells: show; width:12.502cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:2.492cm;"/><col style="width:0.506cm;"/><col style="width:2.734cm;"/><col style="width:3.263cm;"/><col style="width:3.507cm;"/></colgroup><tbody><tr><td class="Table25_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p>Address&#xA0;n</p></td><td class="Table25_B1" colspan="2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.049cm; "><p class="center">OPCODE</p></td><td class="Table25_D1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:none;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Register&#xA0;field</p></td><td class="Table25_E1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:none;  border-right:1.0px solid #000000;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Address&#xA0;mode</p></td></tr><tr><td class="Table25_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p/></td><td class="Table25_B2" colspan="2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.049cm; "><p class="center">ADD</p></td><td class="Table25_D2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">Accumulator&#xA0;A</p></td><td class="Table25_E2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="center">Indexed</p></td></tr><tr><td class="Table25_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p/></td><td class="Table25_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p/></td><td class="Table25_C3" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:none;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:1.0px; "><p/></td><td class="Table25_C3" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:none;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:1.0px; "><p/></td><td class="Table25_C3" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:none;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:1.0px; "><p/></td></tr><tr><td class="Table25_A1" colspan="2" style="vertical-align: top;  border:none;  padding:1.0px; "><p>Address&#xA0;n&#xA0;+&#xA0;1&#xA0;&#xA0;</p></td><td class="Table25_C4" colspan="3" style="vertical-align: top;  border-bottom:none;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="center" style="margin-bottom:0cm; margin-top:0cm; ">Operand&#xA0;address&#xA0;field&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</p><p class="center" style="font-size:7pt; margin-bottom:0cm; margin-top:0cm; ">_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_&#xA0;_</p></td></tr><tr><td class="Table25_A1" colspan="2" style="vertical-align: top;  border:none;  padding:1.0px; "><p/></td><td class="Table25_D2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p/></td><td class="Table25_D5" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:none;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">01010101</p></td><td class="Table25_E5" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:none;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="center">(I.e.&#xA0;15<sub>16</sub>)</p></td></tr></tbody></table></div><p/><p>Let this instruction be held in the memory locations with addresses 0127<sub>16</sub> and 0128<sub>16</sub> and the initial conditions of all CPU registers are shown in figure 10.2.</p><p><a name="graphics13"><!-- --></a><img alt="graphics13" class="fr1" height="704" src="module10_files/c4c46b8_547x704.jpg" style="border:0px; vertical-align: top" width="547"/></p><p class="figure-caption-below"><b>Figure </b><b>10</b><b>.</b><b>2</b><b>:</b> Initial conditions</p><p class="P11">The <span class="spCh spChx2018">&#x2018;</span>fetch and execute<span class="spCh spChx2019">&#x2019;</span> operation for this instruction is then:</p><div class="Table19" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table19" style="border-spacing: 0;empty-cells: show; keep-with-next:always; width:14.601cm; border-collapse: collapse; "><colgroup><col style="width:5.821cm;"/><col style="width:8.781cm;"/></colgroup><tbody><tr><td class="Table19_A1" colspan="2" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><ul class="lib"><li><p>The first byte of the instruction is fetched.</p></li></ul></td></tr><tr><td class="Table19_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><ul class="lip" style="list-style-type: None"><li><p>(PC) <span class="T3"> <span class="spCh spChx2192">&#x2192;</span>  </span>address register.</p></li></ul></td><td class="Table19_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>(address reg)  =  0127</p></td></tr><tr><td class="Table19_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><ul class="lip" style="list-style-type: None"><li><p>(PC)  +  1 <span class="T3"><span class="spCh spChx2192">&#x2192;</span></span> PC</p></li></ul></td><td class="Table19_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>(new PC  =  0128)</p></td></tr><tr><td class="Table19_A1" colspan="2" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><ul class="lip" style="list-style-type: None"><li><p>(address register) <span class="T3"><span class="spCh spChx2192">&#x2192;</span></span> address bus</p></li></ul></td></tr><tr><td class="Table19_A1" colspan="2" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><ul class="lip" style="list-style-type: None"><li><p><b>N.B.</b> The contents of <span class="spCh spChx2018">&#x2018;</span>0127<span class="spCh spChx2019">&#x2019;</span> are the machine code for <span class="spCh spChx2018">&#x2018;</span>ADD A, indexed<span class="spCh spChx2019">&#x2019;</span>.</p></li></ul></td></tr><tr><td class="Table19_A1" colspan="2" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><ul class="lip" style="list-style-type: None"><li><p>(data bus) <span class="T3"><span class="spCh spChx2192">&#x2192;</span></span> data register</p></li></ul></td></tr><tr><td class="Table19_A1" colspan="2" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><ul class="lip" style="list-style-type: None"><li><p>(data register) <span class="T3"><span class="spCh spChx2192">&#x2192;</span></span> instruction register</p></li></ul></td></tr><tr><td class="Table19_A1" colspan="2" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><ul class="lip" style="list-style-type: None"><li><p>decode instruction</p></li></ul></td></tr></tbody></table></div><ul class="lip" style="list-style-type: None"><li><p/></li></ul><p>This is summarised in figure 10.3.</p><p><a name="graphics14"><!-- --></a><img alt="graphics14" class="fr1" height="687" src="module10_files/m4e85928c_547x687.jpg" style="border:0px; vertical-align: top" width="547"/></p><p class="figure-caption-below"><b>Figure </b><b>10</b><b>.</b><b>3</b><b>:</b> Fetch the first byte of the instruction.</p><div class="Table23" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table23" style="border-spacing: 0;empty-cells: show; keep-with-next:always; margin-left:0cm; margin-right:-0.018cm; width:14.619cm; border-collapse: collapse; "><colgroup><col style="width:0.617cm;"/><col style="width:3.395cm;"/><col style="width:9.989cm;"/></colgroup><tbody><tr><td class="Table23_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><ul class="lib"><li><p/></li></ul></td><td class="Table23_A1" colspan="3" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>Fetch the second byte of the instruction, the <span class="spCh spChx2018">&#x2018;</span>Operand address field<span class="spCh spChx2019">&#x2019;</span>, and calculate the address of the operand.</p></td></tr><tr><td class="Table23_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table23_A1" colspan="3" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>Refer to figure 10.4.</p></td></tr><tr><td class="Table23_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table23_A1" colspan="3" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>(PC) <span class="T3"><span class="spCh spChx2192">&#x2192;</span></span> address register</p></td></tr><tr><td class="Table23_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table23_A1" colspan="2" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>(PC)  +  1 <span class="T3"><span class="spCh spChx2192">&#x2192;</span></span> PC</p></td><td class="Table23_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>(PC)  =  0129</p></td></tr><tr><td class="Table23_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table23_A1" colspan="3" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>(address register) <span class="T3"><span class="spCh spChx2192">&#x2192;</span></span> address bus</p></td></tr><tr><td class="Table23_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table23_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table23_A1" colspan="2" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><b>Memory Read</b></p></td></tr><tr><td class="Table23_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table23_A1" colspan="3" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>(data bus) <span class="T3"><span class="spCh spChx2192">&#x2192;</span></span> data register</p></td></tr><tr><td class="Table23_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table23_A1" colspan="3" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>(data register) <span class="T3"><span class="spCh spChx2192">&#x2192;</span></span> one ALU Input</p></td></tr><tr><td class="Table23_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table23_A1" colspan="3" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>(index register) <span class="T3"><span class="spCh spChx2192">&#x2192;</span></span> the other ALU Input</p></td></tr><tr><td class="Table23_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table23_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table23_A1" colspan="2" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><b>ALU ADD</b></p></td></tr><tr><td class="Table23_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table23_A1" colspan="3" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>(output of ALU) <span class="T3"><span class="spCh spChx2192">&#x2192;</span></span> address register.</p></td></tr><tr><td class="Table23_A1" colspan="2" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><b>i.e.</b></p></td><td class="Table23_A1" colspan="2" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>The&#xA0;address&#xA0;of&#xA0;the&#xA0;operand = (<b>index&#xA0;reg&#xA0;</b>+&#xA0;15).</p></td></tr></tbody></table></div><p/><p><a name="graphics15"><!-- --></a><img alt="graphics15" class="fr1" height="687" src="module10_files/mf3c93a4_547x687.jpg" style="border:0px; vertical-align: top" width="547"/></p><p class="figure-caption-below"><b>Figure </b><b>10</b><b>.</b><b>4</b><b>:</b> Fetch the <span class="spCh spChx2018">&#x2018;</span>Operand address field<span class="spCh spChx2019">&#x2019;</span> and add it to the index register to determine the Address of the operand</p><div class="Table24" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table24" style="border-spacing: 0;empty-cells: show; keep-with-next:always; width:14.601cm; border-collapse: collapse; "><colgroup><col style="width:0.617cm;"/><col style="width:0.706cm;"/><col style="width:13.279cm;"/></colgroup><tbody><tr><td class="Table24_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><ul class="lib"><li><p/></li></ul></td><td class="Table24_A1" colspan="2" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>The operand is fetched and the <span class="spCh spChx2018">&#x2018;</span>Add<span class="spCh spChx2019">&#x2019;</span> operation performed.</p></td></tr><tr><td class="Table24_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><b><!--empty--></b></p></td><td class="Table24_A1" colspan="2" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><b>Refer to figure 10.5.</b></p></td></tr><tr><td class="Table24_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table24_A1" colspan="2" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>(address register)  <span class="T3"><span class="spCh spChx2192">&#x2192;</span></span>  address bus</p></td></tr><tr><td class="Table24_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><b><!--empty--></b></p></td><td class="Table24_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><b><!--empty--></b></p></td><td class="Table24_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><b>memory read</b></p></td></tr><tr><td class="Table24_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table24_A1" colspan="2" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>(data bus) <span class="T3"><span class="spCh spChx2192">&#x2192;</span></span> data register</p></td></tr><tr><td class="Table24_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table24_A1" colspan="2" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>(data register) <span class="T3"><span class="spCh spChx2192">&#x2192;</span></span> one ALU Input</p></td></tr><tr><td class="Table24_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table24_A1" colspan="2" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>(Accumulator A) <span class="T3"><span class="spCh spChx2192">&#x2192;</span></span> The other ALU Input</p></td></tr><tr><td class="Table24_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><b><!--empty--></b></p></td><td class="Table24_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><b><!--empty--></b></p></td><td class="Table24_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><b>ALU ADD</b></p></td></tr><tr><td class="Table24_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table24_A1" colspan="2" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>(Output of the ALU) <span class="T3"><span class="spCh spChx2192">&#x2192;</span></span> Accumulator A</p></td></tr><tr><td class="Table24_A1" colspan="2" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>i.e.</p></td><td class="Table24_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>At the end of instruction Accumulator A  =  <span class="spCh spChx2018">&#x2018;</span>BE<sub>16</sub><span class="spCh spChx2019">&#x2019;</span></p></td></tr></tbody></table></div><p/><p><a name="graphics16"><!-- --></a><img alt="graphics16" class="fr1" height="687" src="module10_files/m1ed67c41_547x687.jpg" style="border:0px; vertical-align: top" width="547"/></p><p class="figure-caption-below"><b>Figure </b><b>10</b><b>.</b><b>5</b><b>:</b> Fetch the operand and add it to the Accumulator A</p><p class="P11">The time taken to <span class="spCh spChx2018">&#x2018;</span>fetch and execute<span class="spCh spChx2019">&#x2019;</span> this instruction is five MPU cycles for the MC6800 (4&#xA0;for the MC68HC11). This is illustrated as follows.</p><p><a name="graphics17"><!-- --></a><img alt="graphics17" class="fr1" height="197" src="module10_files/7056cdfa_545x197.jpg" style="border:0px; vertical-align: top" width="545"/></p><p/><h1><a id="id20" name="id20"><!--id20--></a>10.4 Programming Model of the CPU Architecture</h1><p class="P6">Having grasped the concept of the <span class="spCh spChx2018">&#x2018;</span>fetch and execute<span class="spCh spChx2019">&#x2019;</span> operation and also having a basic knowledge of the meaning of the various addressing modes it is often convenient and sufficient to represent the architecture of a CPU as a programming model only.</p><p class="P6">e.g.</p><p><a name="graphics19"><!-- --></a><img alt="graphics19" class="fr1" height="403" src="module10_files/42873416_416x403.jpg" style="border:0px; vertical-align: top" width="416"/></p><p>This does not show the interconnection of the registers inside the CPU but it clearly indicates which registers are available for the programmer to use and the size of each.</p><p>This model requires the programmer to <span class="spCh spChx2018">&#x2018;</span>know the function of the various registers and the operation of the addressing mode<span class="spCh spChx2019">&#x2019;</span>. It merely serves as a quick remainder of which registers are available and their size. When programming, this is all that is necessary since all the programmer needs is an understanding of the instruction set and the results obtained from the execution of each instruction.</p><p class="P18"/><div class="Table35" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table35 selfassessment" style="border-spacing: 0;empty-cells: show; width:14.601cm; border-collapse: collapse; "><colgroup><col style="width:2.002cm;"/><col style="width:12.599cm;"/></colgroup><tbody><tr><td class="Table35_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p><a name="graphics30"><!-- --></a><img alt="graphics30" class="fr1" height="57" src="module10_files/74f1452e_57x57.jpg" style="border:0px; vertical-align: top" width="57"/></p></td><td class="Table35_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><h6><a id="id21" name="id21"><!--id21--></a>Self assessment </h6><ol class="lin" style="list-style: decimal;"><li><p>Explain, using examples, why a microprocessor has a range of addressing modes.</p></li><li><p>List five (5) address modes used by Motorola in the MC68HC11 microprocessors.  Select two modes from the list and, giving examples, describe their use in detail.</p></li><li><p>For the instruction CLRA ($4F), list the fetch and execute steps carried out by a typical microprocessor.<br/></p><div class="Table22" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table22" style="border-spacing: 0;empty-cells: show; width:12.599cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:3.15cm;"/><col style="width:3.15cm;"/></colgroup><tbody><tr><td class="Table22_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p/></td><td class="Table22_B1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:none;  border-right:none;  border-top:none;  padding:0.097cm; "><p>OP Code</p></td><td class="Table22_B1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:none;  border-right:none;  border-top:none;  padding:0.097cm; "><p>Register field</p></td><td class="Table22_B1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:none;  border-right:none;  border-top:none;  padding:0.097cm; "><p>Address mode</p></td></tr><tr><td class="Table22_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p>Address $1020</p></td><td class="Table22_B2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">CLR</p></td><td class="Table22_B2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">A</p></td><td class="Table22_D2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="center">Inherent</p></td></tr></tbody></table></div></li></ol><p/></td></tr></tbody></table></div><p/></body></html>
