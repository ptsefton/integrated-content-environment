<?xml version="1.0"?>
<html><head><meta content="text/html; charset=UTF-8" http-equiv="Content-Type"/><title>Assembly and machine language programming</title><style type="text/css">table {border-spacing: 0;empty-cells: show; }
.body .indent {margin-left: 25px;}
.body .hint {font-size: 1.4em; font-style: normal;font-weight:bolder;color: #00000;}
.spCh {font-family: 'Lucida Grande','Arial Unicode MS', sans-serif; font-size: 1.2em;}
span.underline {text-decoration:underline; }
table.Table6 {margin-left:0.6cm; margin-right:0.75cm; width:13.252cm; }
div.Table6 {width: 100%; margin: 0px; padding: 0px; }
th.Table6_A1, td.Table6_A1 {border:none; padding:0.097cm; }
th.Table6_B1, td.Table6_B1 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table6_D1, td.Table6_D1 {border:0.018cm solid #000000; padding:0.097cm; }
th.Table6_B2, td.Table6_B2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
table.Table7 {margin-left:0.6cm; margin-right:6.02cm; width:7.982cm; }
div.Table7 {width: 100%; margin: 0px; padding: 0px; }
th.Table7_A1, td.Table7_A1 {border:none; padding:0.097cm; }
th.Table7_B1, td.Table7_B1 {border:0.018cm solid #000000; padding:0.097cm; }
th.Table7_B2, td.Table7_B2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
table.Table69 {width:14.601cm; }
div.Table69 {width: 100%; margin: 0px; padding: 0px; }
span.Table69_1 {keep-together:always; }
th.Table69_A1, td.Table69_A1 {border:none; padding:0cm; }
table.Table9 {margin-left:0.6cm; margin-right:6.02cm; width:7.982cm; }
div.Table9 {width: 100%; margin: 0px; padding: 0px; }
th.Table9_A1, td.Table9_A1 {border:none; padding:0.097cm; }
th.Table9_B1, td.Table9_B1 {border:0.018cm solid #000000; padding:0.097cm; }
th.Table9_B2, td.Table9_B2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
table.Table10 {margin-left:0.6cm; margin-right:0.75cm; width:13.252cm; }
div.Table10 {width: 100%; margin: 0px; padding: 0px; }
th.Table10_A1, td.Table10_A1 {border:none; padding:0.097cm; }
th.Table10_B1, td.Table10_B1 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table10_D1, td.Table10_D1 {border:0.018cm solid #000000; padding:0.097cm; }
th.Table10_B2, td.Table10_B2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
table.Table11 {margin-left:0.6cm; margin-right:0.75cm; width:13.252cm; }
div.Table11 {width: 100%; margin: 0px; padding: 0px; }
th.Table11_A1, td.Table11_A1 {border:none; padding:0.097cm; }
th.Table11_B1, td.Table11_B1 {border:0.018cm solid #000000; padding:0.097cm; }
th.Table11_B2, td.Table11_B2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding:0.097cm; }
th.Table11_D2, td.Table11_D2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
table.Table12 {margin-left:0.6cm; margin-right:6.02cm; width:7.982cm; }
div.Table12 {width: 100%; margin: 0px; padding: 0px; }
th.Table12_A1, td.Table12_A1 {border:none; padding:0.097cm; }
th.Table12_B1, td.Table12_B1 {border:0.018cm solid #000000; padding:0.097cm; }
th.Table12_B2, td.Table12_B2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
table.Table13 {margin-left:0.6cm; margin-right:6.02cm; width:7.982cm; }
div.Table13 {width: 100%; margin: 0px; padding: 0px; }
th.Table13_A1, td.Table13_A1 {border:none; padding:0.097cm; }
th.Table13_B1, td.Table13_B1 {border:0.018cm solid #000000; padding:0.097cm; }
th.Table13_B2, td.Table13_B2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
table.Table14 {margin-left:0.6cm; margin-right:0.75cm; width:13.252cm; }
div.Table14 {width: 100%; margin: 0px; padding: 0px; }
th.Table14_A1, td.Table14_A1 {border:none; padding:0.097cm; }
th.Table14_B1, td.Table14_B1 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table14_D1, td.Table14_D1 {border:0.018cm solid #000000; padding:0.097cm; }
th.Table14_B2, td.Table14_B2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
table.Table15 {margin-left:0.6cm; margin-right:6.02cm; width:7.982cm; }
div.Table15 {width: 100%; margin: 0px; padding: 0px; }
th.Table15_A1, td.Table15_A1 {border:none; padding:0.097cm; }
th.Table15_B1, td.Table15_B1 {border:0.018cm solid #000000; padding:0.097cm; }
th.Table15_B2, td.Table15_B2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
table.Table16 {margin-left:0.6cm; margin-right:6.02cm; width:7.982cm; }
div.Table16 {width: 100%; margin: 0px; padding: 0px; }
th.Table16_A1, td.Table16_A1 {border:none; padding:0.097cm; }
th.Table16_B1, td.Table16_B1 {border:0.018cm solid #000000; padding:0.097cm; }
th.Table16_B2, td.Table16_B2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
table.Table17 {width:14.601cm; }
div.Table17 {width: 100%; margin: 0px; padding: 0px; }
table.Table18 {margin-left:0.6cm; margin-right:4.013cm; width:9.989cm; }
div.Table18 {width: 100%; margin: 0px; padding: 0px; }
th.Table18_A1, td.Table18_A1 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table18_C1, td.Table18_C1 {border:0.018cm solid #000000; padding:0.097cm; }
table.Table19 {margin-left:0.6cm; margin-right:4.013cm; width:9.989cm; }
div.Table19 {width: 100%; margin: 0px; padding: 0px; }
th.Table19_A1, td.Table19_A1 {border-bottom:0.039cm double #000000; border-left:0.018cm solid #000000; border-right:none; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table19_C1, td.Table19_C1 {border-bottom:0.039cm double #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table19_A2, td.Table19_A2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding:0.097cm; }
th.Table19_C2, td.Table19_C2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
table.Table20 {margin-left:0.6cm; margin-right:0.132cm; width:13.869cm; }
div.Table20 {width: 100%; margin: 0px; padding: 0px; }
th.Table20_A1, td.Table20_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table8 {width:14.601cm; }
div.Table8 {width: 100%; margin: 0px; padding: 0px; }
span.Table8_1 {keep-together:always; }
th.Table8_A1, td.Table8_A1 {border:none; padding:0cm; }
table.Table22 {width:14.601cm; }
div.Table22 {width: 100%; margin: 0px; padding: 0px; }
table.Table23 {width:14.601cm; }
div.Table23 {width: 100%; margin: 0px; padding: 0px; }
table.Table24 {margin-left:0cm; margin-right:0.093cm; width:14.508cm; }
div.Table24 {width: 100%; margin: 0px; padding: 0px; }
th.Table24_A1, td.Table24_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table25 {margin-left:0.6cm; width:4.72cm; }
div.Table25 {width: 100%; margin: 0px; padding: 0px; }
th.Table25_A1, td.Table25_A1 {border:none; padding:0cm; }
table.Table26 {margin-left:0.6cm; width:9.44cm; }
div.Table26 {width: 100%; margin: 0px; padding: 0px; }
th.Table26_A1, td.Table26_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table27 {margin-left:0.6cm; width:7.721cm; }
div.Table27 {width: 100%; margin: 0px; padding: 0px; }
th.Table27_A1, td.Table27_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table28 {margin-left:0.6cm; margin-right:0.088cm; width:13.914cm; }
div.Table28 {width: 100%; margin: 0px; padding: 0px; }
th.Table28_A1, td.Table28_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table29 {margin-left:0.6cm; margin-right:7.652cm; width:6.35cm; }
div.Table29 {width: 100%; margin: 0px; padding: 0px; }
th.Table29_A1, td.Table29_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table30 {margin-left:0.6cm; margin-right:0.088cm; width:13.914cm; }
div.Table30 {width: 100%; margin: 0px; padding: 0px; }
th.Table30_A1, td.Table30_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table21 {width:14.601cm; }
div.Table21 {width: 100%; margin: 0px; padding: 0px; }
span.Table21_1 {keep-together:always; }
th.Table21_A1, td.Table21_A1 {border:none; padding:0cm; }
table.Table32 {margin-left:0.6cm; width:9.92cm; }
div.Table32 {width: 100%; margin: 0px; padding: 0px; }
th.Table32_A1, td.Table32_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table33 {margin-left:0.6cm; margin-right:0.111cm; width:13.891cm; }
div.Table33 {width: 100%; margin: 0px; padding: 0px; }
th.Table33_A1, td.Table33_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table34 {width:14.601cm; }
div.Table34 {width: 100%; margin: 0px; padding: 0px; }
span.Table34_1 {keep-together:always; }
th.Table34_A1, td.Table34_A1 {border:none; padding:0cm; }
table.Table35 {margin-left:0cm; margin-right:0.009cm; width:12.591cm; }
div.Table35 {width: 100%; margin: 0px; padding: 0px; }
th.Table35_A1, td.Table35_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table36 {width:12.591cm; }
div.Table36 {width: 100%; margin: 0px; padding: 0px; }
th.Table36_A1, td.Table36_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table37 {margin-left:0.6cm; margin-right:7.034cm; width:6.967cm; }
div.Table37 {width: 100%; margin: 0px; padding: 0px; }
th.Table37_A1, td.Table37_A1 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table37_B1, td.Table37_B1 {border:0.018cm solid #000000; padding:0.097cm; }
th.Table37_A2, td.Table37_A2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding:0.097cm; }
th.Table37_B2, td.Table37_B2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
table.Table38 {keep-with-next:always; width:14.601cm; }
div.Table38 {width: 100%; margin: 0px; padding: 0px; }
th.Table38_A1, td.Table38_A1 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table38_C1, td.Table38_C1 {border:0.018cm solid #000000; padding:0.097cm; }
th.Table38_A2, td.Table38_A2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding:0.097cm; }
th.Table38_F2, td.Table38_F2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
table.Table39 {width:14.601cm; }
div.Table39 {width: 100%; margin: 0px; padding: 0px; }
th.Table39_A1, td.Table39_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table40 {keep-with-next:always; width:14.601cm; }
div.Table40 {width: 100%; margin: 0px; padding: 0px; }
th.Table40_A1, td.Table40_A1 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table40_D1, td.Table40_D1 {border:0.018cm solid #000000; padding:0.097cm; }
th.Table40_A2, td.Table40_A2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding:0.097cm; }
th.Table40_D2, td.Table40_D2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
table.Table41 {margin-left:0.6cm; width:5.29cm; }
div.Table41 {width: 100%; margin: 0px; padding: 0px; }
th.Table41_A1, td.Table41_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table48 {width:14.601cm; }
div.Table48 {width: 100%; margin: 0px; padding: 0px; }
th.Table48_A1, td.Table48_A1 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table48_F1, td.Table48_F1 {border:0.018cm solid #000000; padding:0.097cm; }
th.Table48_A2, td.Table48_A2 {border-bottom:none; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding-bottom:0cm; padding-left:0.101cm; padding-right:0.101cm; padding-top:0.101cm; }
th.Table48_F2, td.Table48_F2 {border-bottom:none; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding-bottom:0cm; padding-left:0.101cm; padding-right:0.101cm; padding-top:0.101cm; }
th.Table48_A3, td.Table48_A3 {border-bottom:none; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding-bottom:0cm; padding-left:0.101cm; padding-right:0.101cm; padding-top:0cm; }
th.Table48_F3, td.Table48_F3 {border-bottom:none; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding-bottom:0cm; padding-left:0.101cm; padding-right:0.101cm; padding-top:0cm; }
th.Table48_A4, td.Table48_A4 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding-bottom:0cm; padding-left:0.101cm; padding-right:0.101cm; padding-top:0cm; }
th.Table48_F4, td.Table48_F4 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding-bottom:0cm; padding-left:0.101cm; padding-right:0.101cm; padding-top:0cm; }
table.Table49 {margin-left:0cm; margin-right:7.655cm; width:6.946cm; }
div.Table49 {width: 100%; margin: 0px; padding: 0px; }
th.Table49_A1, td.Table49_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table50 {margin-left:0.6cm; margin-right:10.407cm; width:3.595cm; }
div.Table50 {width: 100%; margin: 0px; padding: 0px; }
th.Table50_A1, td.Table50_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table51 {margin-left:0.6cm; margin-right:9.525cm; width:4.477cm; }
div.Table51 {width: 100%; margin: 0px; padding: 0px; }
th.Table51_A1, td.Table51_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table52 {margin-left:0cm; margin-right:9.551cm; width:5.05cm; }
div.Table52 {width: 100%; margin: 0px; padding: 0px; }
table.Table53 {margin-left:0cm; width:7.89cm; }
div.Table53 {width: 100%; margin: 0px; padding: 0px; }
th.Table53_A1, td.Table53_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table54 {width:14.601cm; }
div.Table54 {width: 100%; margin: 0px; padding: 0px; }
span.Table54_1 {keep-together:always; }
th.Table54_A1, td.Table54_A1 {border:none; padding:0cm; }
table.Table55 {width:12.591cm; }
div.Table55 {width: 100%; margin: 0px; padding: 0px; }
th.Table55_A1, td.Table55_A1 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table55_D1, td.Table55_D1 {border:0.018cm solid #000000; padding:0.097cm; }
th.Table55_A2, td.Table55_A2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding:0.097cm; }
th.Table55_D2, td.Table55_D2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
table.Table56 {width:10.716cm; }
div.Table56 {width: 100%; margin: 0px; padding: 0px; }
th.Table56_A1, td.Table56_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table57 {width:12.591cm; }
div.Table57 {width: 100%; margin: 0px; padding: 0px; }
th.Table57_A1, td.Table57_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
table.Table58 {width:12.591cm; }
div.Table58 {width: 100%; margin: 0px; padding: 0px; }
th.Table58_A1, td.Table58_A1 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table58_D1, td.Table58_D1 {border:0.018cm solid #000000; padding:0.097cm; }
th.Table58_A2, td.Table58_A2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding:0.097cm; }
th.Table58_D2, td.Table58_D2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
table.Table59 {width:12.591cm; }
div.Table59 {width: 100%; margin: 0px; padding: 0px; }
th.Table59_A1, td.Table59_A1 {border:none; padding:0.097cm; }
table.Table60 {break-after:auto; width:14.601cm; }
div.Table60 {width: 100%; margin: 0px; padding: 0px; }
span.Table60_1 {keep-together:always; }
th.Table60_A1, td.Table60_A1 {border:none; padding:0cm; }
table.Table61 {width:12.591cm; }
div.Table61 {width: 100%; margin: 0px; padding: 0px; }
th.Table61_A1, td.Table61_A1 {border:none; padding:0.097cm; }
table.Table62 {width:11.624cm; }
div.Table62 {width: 100%; margin: 0px; padding: 0px; }
table.Table63 {margin-left:0.587cm; margin-right:6.054cm; width:4.983cm; }
div.Table63 {width: 100%; margin: 0px; padding: 0px; }
th.Table63_A1, td.Table63_A1 {border:none; padding-bottom:0.101cm; padding-left:0cm; padding-right:0cm; padding-top:0.101cm; }
th.Table63_A3, td.Table63_A3 {border:none; padding:0cm; }
table.Table64 {width:14.601cm; }
div.Table64 {width: 100%; margin: 0px; padding: 0px; }
span.Table64_1 {keep-together:always; }
th.Table64_A1, td.Table64_A1 {border:none; padding:0cm; }
table.Table65 {width:14.601cm; }
div.Table65 {width: 100%; margin: 0px; padding: 0px; }
th.Table65_A1, td.Table65_A1 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table65_F1, td.Table65_F1 {border:0.018cm solid #000000; padding:0.097cm; }
th.Table65_A2, td.Table65_A2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding:0.097cm; }
th.Table65_F2, td.Table65_F2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
th.Table65_A3, td.Table65_A3 {border:none; padding:0.097cm; }
table.Table68 {width:12.591cm; }
div.Table68 {width: 100%; margin: 0px; padding: 0px; }
th.Table68_A1, td.Table68_A1 {border:none; padding:0.097cm; }
table.Table67 {width:14.601cm; }
div.Table67 {width: 100%; margin: 0px; padding: 0px; }
th.Table67_A1, td.Table67_A1 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:0.018cm solid #000000; padding:0.097cm; }
th.Table67_F1, td.Table67_F1 {border:0.018cm solid #000000; padding:0.097cm; }
th.Table67_A2, td.Table67_A2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:none; border-top:none; padding:0.097cm; }
th.Table67_F2, td.Table67_F2 {border-bottom:0.018cm solid #000000; border-left:0.018cm solid #000000; border-right:0.018cm solid #000000; border-top:none; padding:0.097cm; }
table.Table66 {width:12.591cm; }
div.Table66 {width: 100%; margin: 0px; padding: 0px; }
Header_20_right.P1 {margin-bottom:0cm; margin-top:0cm; }
Header_20_left.P3 {font-weight:normal; }
p.P5 {keep-with-next:always; }
h1.P6 {keep-together:always; keep-with-next:always; }
h2.P7 {keep-together:always; keep-with-next:always; }
p.P8 {break-after:auto; }
p.P9 {keep-with-next:always; }
p.P10 {keep-together:always; keep-with-next:always; }
p.P11 {font-size:10.5pt; text-align:start; }
p.P12 {text-align:start; }
p-center.P13 {font-size:10.5pt; }
p.P15 {font-size:10.5pt; }
p.P17 {text-align:start; }
p-indent.P19 {margin-left:0cm; margin-right:0cm; text-indent:0cm; }
p-figure-caption-below.P20 {text-align:start; }
span.T2 {font-size: smaller; vertical-align: sub; }
span.T5 {font-size:6pt; }
span.T6 {font-weight:normal; }</style></head><body><h1><a id="id2" name="id2"><!--id2--></a>Overview</h1><p>The processor on which this course is based is the Motorola MC68HC11 micro-controller, however, earlier Motorola microprocessors and peripherals may be used to illustrate some concepts. A micro-controller, such as the MC68HC11, is programmed using a dedicated set of instructions. These instructions specify the operation to be performed and the addressing mode to utilise when performing the operation.</p><p><a href="http://localhost:8000/rep.test-content/packages/ele_1301_s1/media/resources/cmap/stored_prog_design.html">Stored program design (concept map)</a></p><h1><a id="id3" name="id3"><!--id3--></a>Objectives</h1><p class="P10">At the completion of this module you will be able to:</p><ul class="lib"><li><p>describe the MC68HC11 Instruction Set and the interpretation of its major operations through considerations of several typical examples</p></li><li><p>identify the essential components of problem solving techniques and demonstrate their use in assembly and machine program development.<br/></p></li></ul><h1><a id="id5" name="id5"><!--id5--></a>11.1 The MC68HC11 Instruction Set</h1><p>The following tables list the MC68HC11 instruction set. These tables may appear complex, but once you become familiar with their contents they are fairly straightforward. You are not expected to remember every detail of each instruction, but you must be able to read and understand the tables in order to extract the required information.</p><p class="table-caption-above"><b>Table </b><b>11</b><b>.</b><b>1</b><b>:</b> Accumulator and memory instructions</p><p><a name="graphics27"><!-- --></a><img alt="graphics27" class="fr1" height="805" src="module11_files/mae599ba_592x805.jpg" style="border:0px; vertical-align: top" width="592"/></p><p><a name="graphics3"><!-- --></a><img alt="graphics3" class="fr1" height="783" src="module11_files/m4ddb29a3_602x783.jpg" style="border:0px; vertical-align: top" width="602"/></p><p><a name="graphics4"><!-- --></a><img alt="graphics4" class="fr1" height="805" src="module11_files/m1c28760d_584x805.jpg" style="border:0px; vertical-align: top" width="584"/></p><p><a name="graphics5"><!-- --></a><img alt="graphics5" class="fr1" height="653" src="module11_files/15770c0d_584x653.jpg" style="border:0px; vertical-align: top" width="584"/></p><blockquote class="bqs"><p>(Source: Motorola 1993, <i>M68HC11 E Series, Programming reference guide</i>, pp. 19<span class="spCh spChx2013">&#x2013;</span>35.)</p></blockquote><p class="table-caption-above"><b>Table </b><b>11</b><b>.</b><b>2</b><b>:</b> Index registers and stack manipulation instructions</p><p><a name="graphics6"><!-- --></a><img alt="graphics6" class="fr1" height="805" src="module11_files/7dcfaf7e_595x805.jpg" style="border:0px; vertical-align: top" width="595"/></p><p><a name="graphics7"><!-- --></a><img alt="graphics7" class="fr1" height="85" src="module11_files/m62560a11_592x85.jpg" style="border:0px; vertical-align: top" width="592"/></p><p class="table-caption-above"><b>Table </b><b>11</b><b>.</b><b>3</b><b>:</b> Jump and branch instructions</p><p><a name="graphics8"><!-- --></a><img alt="graphics8" class="fr1" height="562" src="module11_files/m1265cd55_592x562.jpg" style="border:0px; vertical-align: top" width="592"/></p><blockquote class="bqs"><p>(Source: Motorola 1993, <i>M68HC11 E Series, Programming reference guide</i>, pp. 19<span class="spCh spChx2013">&#x2013;</span>35.)</p></blockquote><h3><a id="id7" name="id7"><!--id7--></a>Special operations</h3><p><a name="graphics9"><!-- --></a><img alt="graphics9" class="fr2" height="805" src="module11_files/m1b11bd8a_455x805.jpg" style="border:0px; vertical-align: top" width="455"/></p><h3><a id="id8" name="id8"><!--id8--></a>Special operations, cont.</h3><p><a name="graphics10"><!-- --></a><img alt="graphics10" class="fr2" height="537" src="module11_files/30007341_538x537.jpg" style="border:0px; vertical-align: top" width="538"/></p><blockquote class="bqs"><p>(Source: Motorola 1993, <i>M68HC11 E Series, Programming reference guide</i>, pp. 36<span class="spCh spChx2013">&#x2013;</span>7.)</p></blockquote><p class="table-caption-above"><b>Table </b><b>11</b><b>.</b><b>4</b><b>:</b> Condition code register manipulation instructions</p><p><a name="graphics11"><!-- --></a><img alt="graphics11" class="fr1" height="172" src="module11_files/m547e97e5_584x172.jpg" style="border:0px; vertical-align: top" width="584"/></p><blockquote class="bqs"><p>(Source: Motorola 1993, <i>M68HC11 E Series, Programming reference guide</i>, pp. 19<span class="spCh spChx2013">&#x2013;</span>35.)</p></blockquote><p class="P5">General points to note are that within each table the instructions are listed alphabetically and that each table covers a specific area.</p><p>Table 11.1 gives a list of instructions that:</p><ul class="lib"><li><p>include all instructions which involve either Accumulators A, B or D in their execution. e.g. <span class="spCh spChx2018">&#x2018;</span>ADDA<span class="spCh spChx2019">&#x2019;</span> <span class="spCh spChx2013">&#x2013;</span> add the operand addressed by the instruction into Accumulator A</p></li><li><p>includes all instructions which operate directly on the contents of a memory location. e.g. CLR <span class="spCh spChx2018">&#x2018;</span>M<span class="spCh spChx2019">&#x2019;</span> <span class="spCh spChx2013">&#x2013;</span> clear the memory location with address <span class="spCh spChx2018">&#x2018;</span>M<span class="spCh spChx2019">&#x2019;</span>.<br/></p></li></ul><p>Table 11.2 includes all instruction that operates on the contents of either the <span class="spCh spChx2018">&#x2018;</span><b>index registers</b><span class="spCh spChx2019">&#x2019;</span> or the <span class="spCh spChx2018">&#x2018;</span><b>stack pointer</b><span class="spCh spChx2019">&#x2019;</span>.</p><p>Table 11.3 includes the complete list of <span class="spCh spChx2018">&#x2018;</span><b>Branch</b><span class="spCh spChx2019">&#x2019;</span> and <span class="spCh spChx2018">&#x2018;</span><b>Jump</b><span class="spCh spChx2019">&#x2019;</span> instructions.</p><p>Table 11.4 includes the instructions that can be used to manipulate the contents of the condition code register.</p><p>To appreciate the full details provided for each instruction consider the first few instructions from table 11.1 and the legend of symbols used.</p><p class="table-caption-above"><b>Table </b><b>11</b><b>.</b><b>5</b><b>:</b> Portion of the accumulator and memory instruction</p><p><a name="graphics12"><!-- --></a><img alt="graphics12" class="fr1" height="298" src="module11_files/m619e07f7_552x298.jpg" style="border:0px; vertical-align: top" width="552"/></p><p><b><span style="font-weight:normal; "><span class="T6">Starting from the left most column of table 11.5 we have the following:</span></span></b></p><ul class="lib"><li><p><b>Mnemonic <span class="spCh spChx2013">&#x2013;</span> </b><b><span style="font-weight:normal; "><span class="T6">The mnemonics used for the Add instruction for the 68HC11 are</span></span></b></p><ul class="lib"><li><p><b><span style="font-weight:normal; "><span class="T6">ADDA <span class="spCh spChx2013">&#x2013;</span> for addition into accumulator A</span></span></b></p></li><li><p><b><span style="font-weight:normal; "><span class="T6">ADDB <span class="spCh spChx2013">&#x2013;</span> for addition into accumulator B</span></span></b></p></li></ul></li><li><p><b>Operation</b> <span class="spCh spChx2013">&#x2013;</span> A brief explanation of the instruction.</p></li><li><p><b>Boolean expression</b> <span class="spCh spChx2013">&#x2013;</span> For all tables, this column provides a quick reference as to the operation performed by the instruction.</p></li><li><p><b>Addressing mode for operand</b> <span class="spCh spChx2013">&#x2013;</span> There are 6 addressing modes possible. i.e. Inherent (INH), Immediate (IMM), Direct (DIR), Extended (EXT), Indexed (IND,X or IND,Y), and Relative (REL).</p></li></ul><p>Consider the instruction, written in assembly code</p><p>ADDA # $45</p><p>We understand this to mean <span class="spCh spChx2018">&#x2018;</span>add the hexadecimal number 45 into Accumulator A<span class="spCh spChx2019">&#x2019;</span></p><p>(i.e. immediate addressing). N.B. <span class="spCh spChx2018">&#x2018;</span>$<span class="spCh spChx2019">&#x2019;</span> indicates <span class="spCh spChx2018">&#x2018;</span>hexadecimal<span class="spCh spChx2019">&#x2019;</span>, <span class="spCh spChx2018">&#x2018;</span>#<span class="spCh spChx2019">&#x2019;</span> indicates immediate addressing.</p><p>or (Acc A) + 45<sub>16</sub> <span class="T1"><span class="spCh spChx2192">&#x2192;</span></span> Acc A</p><p>From our discussions to date this would be stored in memory as</p><div class="Table6" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table6" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:0.75cm; width:13.252cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:2.997cm;"/><col style="width:3.219cm;"/><col style="width:3.263cm;"/><col style="width:3.773cm;"/></colgroup><tbody><tr><td class="Table6_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 1</b><br/>(Opcode)</p></td><td class="Table6_B1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Opcode<br/>(ADD)</p></td><td class="Table6_B1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Register field<br/>(A)</p></td><td class="Table6_D1" style="vertical-align: top;  border:1.0px solid #000000;  padding:0.097cm; "><p class="center">Addressing mode<br/># (Immediate)</p></td></tr><tr><td class="Table6_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 2</b><br/>(ii)</p></td><td class="Table6_B2" colspan="3" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="center">8 bit Operand<br/>(45<sub>16</sub>)</p></td></tr></tbody></table></div><p/><p>In fact the instruction is stored as two 8-bit bytes. The information contained in the <span class="spCh spChx2018">&#x2018;</span><b>Machine Coding Column (Opcode)</b><span class="spCh spChx2019">&#x2019;</span> allows us to select the appropriate binary code for the first byte.</p><p>The information supplied under <span class="spCh spChx2018">&#x2018;</span>Opcode<span class="spCh spChx2019">&#x2019;</span> is the Operation Code or machine code, specified as a hexadecimal number i.e. OPCODE = 8B<sub>16</sub>.</p><p>The actual binary digits stored for this instruction are:</p><div class="Table7" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table7" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:6.02cm; width:7.982cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:2.976cm;"/><col style="width:5.006cm;"/></colgroup><tbody><tr><td class="Table7_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 1</b><br/>8B<sub>16</sub></p></td><td class="Table7_B1" style="vertical-align: top;  border:1.0px solid #000000;  padding:0.097cm; "><p class="center">1 0 0 0&#xA0;&#xA0;&#xA0;1 0 1 1</p></td></tr><tr><td class="Table7_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 2</b><br/>45<sub>16</sub></p></td><td class="Table7_B2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="center">0 1 0 0&#xA0;&#xA0;&#xA0;0 1 0 1</p></td></tr></tbody></table></div><p/><div class="Table69" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table69 note" style="border-spacing: 0;empty-cells: show; width:14.601cm; border-collapse: collapse; "><colgroup><col style="width:2.002cm;"/><col style="width:12.599cm;"/></colgroup><tbody><tr><td class="Table69_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p><a name="graphics1"><!-- --></a><img alt="graphics1" class="fr2" height="57" src="module11_files/1e014184_57x57.jpg" style="border:0px; vertical-align: top" width="57"/></p></td><td class="Table69_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><h6><a id="id9" name="id9"><!--id9--></a>Note </h6><p><b><span style="font-weight:normal; "><span class="T6">The hexadecimal number given in the <span class="spCh spChx2018">&#x2018;</span>Opcode column<span class="spCh spChx2019">&#x2019;</span> is the machine code that goes in the first byte of the instruction.</span></span></b></p></td></tr></tbody></table></div><p/><p>Additional information given about <span class="spCh spChx2018">&#x2018;</span>ADDA using immediate addressing<span class="spCh spChx2019">&#x2019;</span> appears as follows:</p><ul class="lib"><li><p>In the <span class="spCh spChx2018">&#x2018;</span><b>Cycles column</b><span class="spCh spChx2019">&#x2019;</span> there is the entry <span class="spCh spChx2018">&#x2018;</span>2<span class="spCh spChx2019">&#x2019;</span>.</p><p>A check against the legend indicates this is the <span class="spCh spChx2018">&#x2018;</span>number of MPU cycles<span class="spCh spChx2019">&#x2019;</span> it takes to fetch and execute this instruction.</p><p>This information is provided so that at the end of a program the programmer can calculate how long the program will take to execute. This may be important because:</p><ol class="li-lower-roman" style="list-style: lower-roman;"><li><p>the program may be controlling some external process and strict time limits may have to be met for safety reasons. To ensure that the program can be executed within the limits the time for execution must be calculated.</p></li><li><p>the programmer may have to program a <span class="spCh spChx2018">&#x2018;</span>delay<span class="spCh spChx2019">&#x2019;</span> e.g. between successive outputs to a terminal. This can be done by writing a program to count down an accumulator to zero. The time taken gives the delay and is determined by the execution times of the instructions involved.</p></li></ol></li><li><p>In the <span class="spCh spChx2018">&#x2018;</span>Bytes column<span class="spCh spChx2019">&#x2019;</span> there is an entry 2.</p><p>Consulting the legend this column indicates the number of program bytes required to store this instruction in memory.</p><p>i.e. <span class="spCh spChx2018">&#x2018;</span>ADDA #$45<span class="spCh spChx2019">&#x2019;</span> is a 2 byte instruction.</p><div class="Table9" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table9" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:6.02cm; width:7.982cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:2.997cm;"/><col style="width:4.985cm;"/></colgroup><tbody><tr><td class="Table9_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 1</b><br/>8B<sub>16</sub></p></td><td class="Table9_B1" style="vertical-align: top;  border:1.0px solid #000000;  padding:0.097cm; "><p class="center">1 0 0 0&#xA0;&#xA0;&#xA0;1 0 1 1</p></td></tr><tr><td class="Table9_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 2</b><br/>45<sub>16</sub></p></td><td class="Table9_B2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="center">0 1 0 0&#xA0;&#xA0;&#xA0;0 1 0 1</p></td></tr></tbody></table></div></li></ul><p/><p>A similar analysis also applies for the other addressing modes.</p><p><b>Example 1</b></p><p>What is the machine code for the ADDB $45, X and ADDB $45, Y instructions.</p><p><b>Solution</b></p><p>The entries for the <span class="spCh spChx2018">&#x2018;</span>ADDB<span class="spCh spChx2019">&#x2019;</span> row of table 11.1 are:</p><p><a name="graphics13"><!-- --></a><img alt="graphics13" class="fr1" height="111" src="module11_files/m43574656_552x111.jpg" style="border:0px; vertical-align: top" width="552"/></p><p>From our studies of indexed addressing we know the instruction requires at least two bytes and this is confirmed by the entry in the <span class="spCh spChx2018">&#x2018;</span><b>Bytes</b> column<span class="spCh spChx2019">&#x2019;</span> for addressing modes <span class="spCh spChx2018">&#x2018;</span><b>IND,X</b> and <b>IND,Y</b><span class="spCh spChx2019">&#x2019;</span>.</p><p>For IND,X the two bytes will contain the following:</p><div class="Table10" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table10" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:0.75cm; width:13.252cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:2.997cm;"/><col style="width:3.219cm;"/><col style="width:3.263cm;"/><col style="width:3.773cm;"/></colgroup><tbody><tr><td class="Table10_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 1</b><br/>(EB<sub>16</sub>)</p></td><td class="Table10_B1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Opcode<br/>(ADD)</p></td><td class="Table10_B1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Register field<br/>(B)</p></td><td class="Table10_D1" style="vertical-align: top;  border:1.0px solid #000000;  padding:0.097cm; "><p class="center">Addressing mode<br/>(Indexed)</p></td></tr><tr><td class="Table10_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 2</b><br/>(ff)</p></td><td class="Table10_B2" colspan="3" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="center">A positive 8 bit offset<br/>(45<sub>16</sub>)</p></td></tr></tbody></table></div><p/><p>For IND,Y the three bytes will contain the following:</p><div class="Table11" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table11" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:0.75cm; width:13.252cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:2.997cm;"/><col style="width:3.219cm;"/><col style="width:3.263cm;"/><col style="width:3.773cm;"/></colgroup><tbody><tr><td class="Table11_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 1</b><br/>(18<sub>16</sub>)</p></td><td class="Table11_B1" colspan="3" style="vertical-align: top;  border:1.0px solid #000000;  padding:0.097cm; "><p class="center">Pre-byte</p></td></tr><tr><td class="Table11_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 2</b><br/>(EB<sub>16</sub>)</p></td><td class="Table11_B2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">Opcode<br/>(ADD)</p></td><td class="Table11_B2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">Register field<br/>(B)</p></td><td class="Table11_D2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="center">Addressing mode<br/>(Indexed)</p></td></tr><tr><td class="Table11_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 3</b><br/>(ff)</p></td><td class="Table11_D2" colspan="3" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="center">A positive 8 bit offset<br/>(45<sub>16</sub>)</p></td></tr></tbody></table></div><p/><p>The machine code for these instruction is therefore:</p><p>ADDB $45, X</p><div class="Table12" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table12" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:6.02cm; width:7.982cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:2.997cm;"/><col style="width:4.985cm;"/></colgroup><tbody><tr><td class="Table12_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 2</b><br/>EB<sub>16</sub></p></td><td class="Table12_B1" style="vertical-align: top;  border:1.0px solid #000000;  padding:0.097cm; "><p class="center">1 1 1 0&#xA0;&#xA0;&#xA0;1 0 1 1</p></td></tr><tr><td class="Table12_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 3</b><br/>45<sub>16</sub></p></td><td class="Table12_B2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="center">0 1 0 0&#xA0;&#xA0;&#xA0;0 1 0 1</p></td></tr></tbody></table></div><p/><p>ADDB $45, Y</p><div class="Table13" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table13" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:6.02cm; width:7.982cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:2.997cm;"/><col style="width:4.985cm;"/></colgroup><tbody><tr><td class="Table13_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 1</b><br/>18<sub>16</sub></p></td><td class="Table13_B1" style="vertical-align: top;  border:1.0px solid #000000;  padding:0.097cm; "><p class="center">0 0 0 1&#xA0;&#xA0;&#xA0;1 0 0 0</p></td></tr><tr><td class="Table13_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 2</b><br/>EB<sub>16</sub></p></td><td class="Table13_B2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="center">1 1 1 0&#xA0;&#xA0;&#xA0;1 0 1 1</p></td></tr><tr><td class="Table13_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 3</b><br/>45<sub>16</sub></p></td><td class="Table13_B2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="center">0 1 0 0&#xA0;&#xA0;&#xA0;0 1 0 1</p></td></tr></tbody></table></div><p/><p>The offset of 45<sub>16</sub> is the value specified by the programmer in the instruction.</p><p><b>Example 2</b></p><p>What is the machine code for the instruction?</p><p class="indent">ADDA VALUE</p><p>where <span class="spCh spChx2018">&#x2018;</span>VALUE<span class="spCh spChx2019">&#x2019;</span> is the name given to a memory location (00B6<sub>16</sub>) that contains the number to be added to the accumulator.</p><p><b>Solution</b></p><p>This instruction may be written in an alternative form as:</p><p class="indent">ADDA $00B6</p><p>The concept of using a <span class="spCh spChx2018">&#x2018;</span>name<span class="spCh spChx2019">&#x2019;</span> for a memory location rather than specifying the <span class="spCh spChx2018">&#x2018;</span>actual address<span class="spCh spChx2019">&#x2019;</span> is one that you are encouraged to adopt. This method is used extensively when writing assembly language programs because it makes the program easier to follow and debug, particularly if someone else has written it.</p><p>When using <span class="spCh spChx2018">&#x2018;</span>names for locations<span class="spCh spChx2019">&#x2019;</span> it is essential you adopt the procedure used for writing assembly language programs, where at the beginning of each program all names are declared. These <span class="spCh spChx2018">&#x2018;</span>names for locations<span class="spCh spChx2019">&#x2019;</span> are referred to as <b>labels.</b></p><p>e.g.   VALUE    EQU    $00B6</p><p>The <span class="spCh spChx2018">&#x2018;</span>EQU<span class="spCh spChx2019">&#x2019;</span> directive is a signal to the assembler that wherever <span class="spCh spChx2018">&#x2018;</span>VALUE<span class="spCh spChx2019">&#x2019;</span> appears in the program the address <span class="spCh spChx2018">&#x2018;</span>00B6<sub>16</sub><span class="spCh spChx2019">&#x2019;</span> is intended. <span class="spCh spChx2018">&#x2018;</span>VALUE<span class="spCh spChx2019">&#x2019;</span> is a label.</p><p>The solution to this problem then is to find the machine code for</p><p class="indent">ADDA $00B6</p><p>As there is no <span class="spCh spChx2018">&#x2018;</span>addressing symbol<span class="spCh spChx2019">&#x2019;</span> used (such as <span class="spCh spChx2018">&#x2018;</span>#<span class="spCh spChx2019">&#x2019;</span> or <span class="spCh spChx2018">&#x2018;</span>, X<span class="spCh spChx2019">&#x2019;</span>) and the instruction is not a <span class="spCh spChx2018">&#x2018;</span><b>branch instruction</b><span class="spCh spChx2019">&#x2019;</span> then the addressing mode intended is either</p><p class="indent"><span class="spCh spChx2018">&#x2018;</span><b>direct addressing</b><span class="spCh spChx2019">&#x2019;</span> or <span class="spCh spChx2018">&#x2018;</span><b>extended addressing</b><span class="spCh spChx2019">&#x2019;</span></p><p>Because the address of the memory location is</p><p class="indent">00B6<sub>16</sub></p><p><b>direct addressing</b> can be used since the <span class="spCh spChx2018">&#x2018;</span>high-byte<span class="spCh spChx2019">&#x2019;</span> of the address is <span class="spCh spChx2018">&#x2018;</span>00<span class="spCh spChx2019">&#x2019;</span>. The instruction is then</p><p class="indent">ADDA $B6</p><p>Previous work shows the information supplied in this 2-byte instruction is:</p><div class="Table14" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table14" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:0.75cm; width:13.252cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:2.997cm;"/><col style="width:3.219cm;"/><col style="width:3.263cm;"/><col style="width:3.773cm;"/></colgroup><tbody><tr><td class="Table14_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 1</b><br/>(9B<sub>16</sub>)</p></td><td class="Table14_B1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Opcode<br/>(ADD)</p></td><td class="Table14_B1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Register field<br/>(A)</p></td><td class="Table14_D1" style="vertical-align: top;  border:1.0px solid #000000;  padding:0.097cm; "><p class="center">Addressing mode<br/>(Direct)</p></td></tr><tr><td class="Table14_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 2</b><br/>(dd)</p></td><td class="Table14_B2" colspan="3" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="center">Low byte of the operand address<br/>(B6<sub>16</sub>)</p></td></tr></tbody></table></div><p/><p>The execution of this instruction will result in the contents of memory location 00B6<sub>16</sub> being added to Accumulator A.</p><p>Consulting the <span class="spCh spChx2018">&#x2018;</span>Machine Coding<span class="spCh spChx2019">&#x2019;</span> column of table 11.1 gives the actual machine code as:</p><div class="Table15" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table15" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:6.02cm; width:7.982cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:2.997cm;"/><col style="width:4.985cm;"/></colgroup><tbody><tr><td class="Table15_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 1</b><br/>9B<sub>16</sub></p></td><td class="Table15_B1" style="vertical-align: top;  border:1.0px solid #000000;  padding:0.097cm; "><p class="center">1 0 0 1&#xA0;&#xA0;&#xA0;1 0 1 1</p></td></tr><tr><td class="Table15_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 2</b><br/>B6<sub>16</sub></p></td><td class="Table15_B2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="center">1 0 1 1&#xA0;&#xA0;&#xA0;0 1 1 0</p></td></tr></tbody></table></div><p/><p>Checking the <span class="spCh spChx2018">&#x2018;</span>Bytes<span class="spCh spChx2019">&#x2019;</span> column confirms it is a 2 byte instruction and the <span class="spCh spChx2018">&#x2018;</span>Cycles<span class="spCh spChx2019">&#x2019;</span> column indicates that it takes 3 machine cycles to execute.</p><p class="P5">This same instruction could be coded into machine code using <span class="spCh spChx2018">&#x2018;</span>Extended addressing<span class="spCh spChx2019">&#x2019;</span> in which case</p><p class="indent">ADDA $00B6</p><p>would be coded as a 3 byte instruction as follows:</p><div class="Table16" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table16" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:6.02cm; width:7.982cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:2.997cm;"/><col style="width:4.985cm;"/></colgroup><tbody><tr><td class="Table16_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 1</b><br/>BB<sub>16</sub></p></td><td class="Table16_B1" style="vertical-align: top;  border:1.0px solid #000000;  padding:0.097cm; "><p class="center">1 0 1 1&#xA0;&#xA0;&#xA0;1 0 1 1</p></td></tr><tr><td class="Table16_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 2</b><br/>00<sub>16</sub></p></td><td class="Table16_B2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="center">0 0 0 0&#xA0;&#xA0;&#xA0;0 0 0 0</p></td></tr><tr><td class="Table16_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"><b>Byte 3</b><br/>B6<sub>16</sub></p></td><td class="Table16_B2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="center">1 0 1 1&#xA0;&#xA0;&#xA0;0 1 1 0</p></td></tr></tbody></table></div><p/><p>Note the execution time is now 4 machine cycles since an extra byte has to be fetched from memory.</p><p>Although the program would still run and would provide the correct operation it would use an additional memory location and would take longer to execute, i.e. it is less efficient.</p><p><b>Example 3</b></p><p>Why is there no INH (inherent) entry in the <span class="spCh spChx2018">&#x2018;</span>Addressing mode<span class="spCh spChx2019">&#x2019;</span> column for the <span class="spCh spChx2018">&#x2018;</span>ADDA<span class="spCh spChx2019">&#x2019;</span> and <span class="spCh spChx2018">&#x2018;</span>ADDB<span class="spCh spChx2019">&#x2019;</span> instructions?</p><p><b>Solution</b></p><p>Inherent addressing covers both <span class="spCh spChx2018">&#x2018;</span>implied addressing<span class="spCh spChx2019">&#x2019;</span> and <span class="spCh spChx2018">&#x2018;</span>accumulator addressing<span class="spCh spChx2019">&#x2019;</span>. In each case the <span class="spCh spChx2018">&#x2018;</span>addressing mode<span class="spCh spChx2019">&#x2019;</span> is inherent in the OPCODE.</p><div class="Table17" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table17" style="border-spacing: 0;empty-cells: show; width:14.601cm; border-collapse: collapse; "><colgroup><col style="width:1.252cm;"/><col style="width:13.349cm;"/></colgroup><tbody><tr><td style="vertical-align: top; "><p>e.g.<br/>&#xA0;</p></td><td style="vertical-align: top; "><p>CLRA <span class="spCh spChx2013">&#x2013;</span> clear Accumulator A (accumulator addressing)<br/>INX <span class="spCh spChx2013">&#x2013;</span> increment the index register (implied addressing)</p></td></tr></tbody></table></div><p/><p>In each case no operand need be specified as the operation involves only the <span class="spCh spChx2018">&#x2018;</span>Accumulator A<span class="spCh spChx2019">&#x2019;</span> in <span class="spCh spChx2018">&#x2018;</span>CLRA<span class="spCh spChx2019">&#x2019;</span> and the <span class="spCh spChx2018">&#x2018;</span>index register<span class="spCh spChx2019">&#x2019;</span> in <span class="spCh spChx2018">&#x2018;</span>INX<span class="spCh spChx2019">&#x2019;</span>.</p><p>For the <span class="spCh spChx2018">&#x2018;</span>ADDA<span class="spCh spChx2019">&#x2019;</span> and <span class="spCh spChx2018">&#x2018;</span>ADDB<span class="spCh spChx2019">&#x2019;</span> instructions obviously some <span class="spCh spChx2018">&#x2018;</span>operand<span class="spCh spChx2019">&#x2019;</span> has to be specified, i.e. some memory contents or data have to be specified to be added to the appropriate accumulator. Therefore <span class="spCh spChx2018">&#x2018;</span>implied addressing<span class="spCh spChx2019">&#x2019;</span> and <span class="spCh spChx2018">&#x2018;</span>accumulator addressing<span class="spCh spChx2019">&#x2019;</span> have no significance for these instructions.</p><p><b>Example 4</b></p><p>It has been stated several times throughout this section, that the hexadecimal digits provided in the <span class="spCh spChx2018">&#x2018;</span>Machine Code<span class="spCh spChx2019">&#x2019;</span> column of the instruction set, is the machine code for the <span class="spCh spChx2018">&#x2018;</span>first byte<span class="spCh spChx2019">&#x2019;</span> of the instruction and represents</p><div class="Table18" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table18" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:4.013cm; width:9.989cm; border-collapse: collapse; "><colgroup><col style="width:2.999cm;"/><col style="width:2.977cm;"/><col style="width:4.013cm;"/></colgroup><tbody><tr><td class="Table18_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Opcode</p></td><td class="Table18_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Register field</p></td><td class="Table18_C1" style="vertical-align: top;  border:1.0px solid #000000;  padding:0.097cm; "><p class="center">Addressing mode</p></td></tr></tbody></table></div><p/><p>By comparing these <span class="spCh spChx2018">&#x2018;</span>Machine Code<span class="spCh spChx2019">&#x2019;</span> column values for all the <span class="spCh spChx2018">&#x2018;</span>ADDA<span class="spCh spChx2019">&#x2019;</span> and <span class="spCh spChx2018">&#x2018;</span>ADDB<span class="spCh spChx2019">&#x2019;</span> addressing options, determine which bits of the machine code represents the information in the <span class="spCh spChx2018">&#x2018;</span><b>first byte</b><span class="spCh spChx2019">&#x2019;</span>.</p><p><b>Solution</b></p><p><span style="display: block"><a name="graphics14"><!-- --></a><img alt="graphics14" class="fr3" height="219" src="module11_files/26e41960_552x219.jpg" style="border:0px; vertical-align: top" width="552"/></span></p><ul class="lib"><li><p>By comparing the machine code bits for ADDA and ADDB with the same addressing mode it can be seen that they differ in the <span class="spCh spChx2018">&#x2018;</span>Bit 6<span class="spCh spChx2019">&#x2019;</span> position.</p><p>The <span class="spCh spChx2018">&#x2018;</span>register field bit<span class="spCh spChx2019">&#x2019;</span> is bit 6 of the machine code.</p><p>For Accumulator A, Bit 6 is [0].<br/>For Accumulator B, Bit 6 is [1].</p></li><li><p>By comparing the machine code bits for the ADDA instructions with the different addressing modes it can be seen that Bits 4 and 5 indicate the addressing mode.</p><p>i.e.</p><div class="Table19" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table19" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:4.013cm; width:9.989cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:2.977cm;"/><col style="width:2.999cm;"/><col style="width:4.013cm;"/></colgroup><tbody><tr><td class="Table19_A1" style="vertical-align: top;  border-bottom:1.0px double #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center"><b>Bit 5</b></p></td><td class="Table19_A1" style="vertical-align: top;  border-bottom:1.0px double #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center"><b>Bit 4</b></p></td><td class="Table19_C1" style="vertical-align: top;  border-bottom:1.0px double #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center"><b>Address mode</b></p></td></tr><tr><td class="Table19_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">0</p><p class="center">0</p><p class="center">1</p><p class="center">1</p></td><td class="Table19_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">0</p><p class="center">1</p><p class="center">0</p><p class="center">1</p></td><td class="Table19_C2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="center">Immediate</p><p class="center">Direct</p><p class="center">Indexed</p><p class="center">Extended</p></td></tr></tbody></table></div><p/></li><li><p>The remaining bits specify the OPCODE.</p><p><a name="graphics15"><!-- --></a><img alt="graphics15" class="fr1" height="116" src="module11_files/m6587b69b_515x116.jpg" style="border:0px; vertical-align: top" width="515"/></p></li><li><p><b>Boolean/arithmetic operation.</b> For all tables, this column provides a quick reference as to the operation performed by the instruction.</p><p>Most of the symbols used are specified in the legend given in table 11.1. Those omitted are as follows:</p></li></ul><p/><div class="Table20" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table20" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:0.132cm; width:13.869cm; border-collapse: collapse; "><colgroup><col style="width:0.97cm;"/><col style="width:0.817cm;"/><col style="width:12.083cm;"/></colgroup><tbody><tr><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>A</p></td><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><span class="spCh spChx2013">&#x2013;</span></p></td><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>Contents of Accumulator A</p></td></tr><tr><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>B</p></td><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><span class="spCh spChx2013">&#x2013;</span></p></td><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>Contents OF Accumulator B</p></td></tr><tr><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>M</p></td><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><span class="spCh spChx2013">&#x2013;</span></p></td><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>Contents of the memory location (or data for immediate addressing) as addressed by the instruction</p></td></tr><tr><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>C</p></td><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><span class="spCh spChx2013">&#x2013;</span></p></td><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>Carry bit</p></td></tr><tr><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>X</p></td><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><span class="spCh spChx2013">&#x2013;</span></p></td><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>Contents of index register X</p></td></tr><tr><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>Y</p></td><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><span class="spCh spChx2013">&#x2013;</span></p></td><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>Contents of index register Y</p></td></tr><tr><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>XH</p></td><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><span class="spCh spChx2013">&#x2013;</span></p></td><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>Contents of the high byte of the index register</p></td></tr><tr><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>XL</p></td><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><span class="spCh spChx2013">&#x2013;</span></p></td><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>Contents of the low byte of the index register</p></td></tr><tr><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>SP</p></td><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><span class="spCh spChx2013">&#x2013;</span></p></td><td class="Table20_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>Contents of the Stack Pointer</p></td></tr></tbody></table></div><p/><div class="Table8" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table8 note" style="border-spacing: 0;empty-cells: show; width:14.601cm; border-collapse: collapse; "><colgroup><col style="width:2.002cm;"/><col style="width:12.599cm;"/></colgroup><tbody><tr><td class="Table8_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p><a name="graphics2"><!-- --></a><img alt="graphics2" class="fr2" height="57" src="module11_files/1e014184_57x57.jpg" style="border:0px; vertical-align: top" width="57"/></p></td><td class="Table8_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><h6><a id="id10" name="id10"><!--id10--></a>Note </h6><p>The symbol <span class="spCh spChx2018">&#x2018;</span>+<span class="spCh spChx2019">&#x2019;</span> is intended as the <span class="spCh spChx2018">&#x2018;</span>arithmetic plus<span class="spCh spChx2019">&#x2019;</span> for all instructions except the INCLUSIVE-OR and the <b>branch instructions</b> where it represents <b>logical</b> <span class="spCh spChx2018">&#x2018;</span>OR<span class="spCh spChx2019">&#x2019;</span>.</p></td></tr></tbody></table></div><p/><p><b>Boolean expression in table 11.3.</b> This column indicates <b>exactly</b> the conditions under which the conditional branch will occur. All expressions are logical or Boolean expressions.</p><div class="Table22" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table22" style="border-spacing: 0;empty-cells: show; width:14.601cm; border-collapse: collapse; "><colgroup><col style="width:0.993cm;"/><col style="width:13.608cm;"/></colgroup><tbody><tr><td style="vertical-align: top; "><p>e.g.</p></td><td style="vertical-align: top; "><p>The entry for <span class="spCh spChx2018">&#x2018;</span>BMI<span class="spCh spChx2019">&#x2019;</span> instruction<span class="spCh spChx2019">&#x2019;</span>. Note that it can be used with <span class="spCh spChx2018">&#x2018;</span>relative addressing only<span class="spCh spChx2019">&#x2019;</span>, the machine code is 2B<sub>16</sub>, it takes 3 machine cycles to execute, it is a 2 byte instruction and the condition that must exist for the branch to occur is the <span class="spCh spChx2018">&#x2018;</span>negative bit<span class="spCh spChx2019">&#x2019;</span>, N, must equal 1.</p></td></tr></tbody></table></div><p/><p>Some of the branch tests are quite complicated and these will be discussed later.</p><p><b>Warning: Ensure you check and understand the <span class="spCh spChx2018">&#x2018;</span>branch test<span class="spCh spChx2019">&#x2019;</span> when selecting the appropriate branch instruction.</b></p><div class="Table23" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table23" style="border-spacing: 0;empty-cells: show; width:14.601cm; border-collapse: collapse; "><colgroup><col style="width:0.97cm;"/><col style="width:13.631cm;"/></colgroup><tbody><tr><td style="vertical-align: top; "><p>e.g.</p></td><td style="vertical-align: top; "><p>BMI (Branch if minus) and BLT (Branch if less than zero) may appear to be the same.</p><p>BMI will cause a branch if N = 1 i.e. if the MSB of the result of the last operation is [1].</p><p>BLT will cause a branch if N = 1 providing the <b>overflow is not set</b> i.e. (N <span class="T3"><span class="spCh spChx2295">&#x2295;</span></span> V) = 1, it will also branch if N = 0 providing the overflow is set.</p></td></tr></tbody></table></div><p/><p><b>Boolean operation in Table 11.4.</b> This indicates a quick reference to the instructions that can be performed on the condition code register.</p><p class="indent">CCR <span class="spCh spChx2013">&#x2013;</span> Condition code register</p><p><b>Condition code register</b>. This section of all the tables is split into 8 columns, one for each condition code bit, and indicates the affect the instruction execution has on each bit in the condition code register.</p><p>The possible conditions that can apply for the setting of the condition code bits are indicated for each. The symbols used are briefly explained in the <span class="spCh spChx2018">&#x2018;</span>Legend<span class="spCh spChx2019">&#x2019;</span> below table 11.1 and are as follows:</p><ul class="lib"><li><p>This symbol against an instruction indicates that the value of the condition code bit is unaffected, i.e. if set, it remains set, if reset it remains reset.</p><p>Note that none of the branch instructions affects the condition code bits.</p><p><a name="graphics16"><!-- --></a><img alt="graphics16" class="fr2" height="37" src="module11_files/6accb454_529x37.jpg" style="border:0px; vertical-align: top" width="529"/></p><p>e.g. if the result of the operation is zero then the <span class="spCh spChx2018">&#x2018;</span>Z-bit<span class="spCh spChx2019">&#x2019;</span> will be [1]. Obviously if the <span class="spCh spChx2018">&#x2018;</span>Z-bit<span class="spCh spChx2019">&#x2019;</span> is [1] then the result is not negative and hence the <span class="spCh spChx2018">&#x2018;</span>N-bit<span class="spCh spChx2019">&#x2019;</span> will be zero.</p><p>Details for setting the condition code bits in the status register have been outlined in previous modules.<br/></p><div class="Table24" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table24" style="border-spacing: 0;empty-cells: show; margin-left:0cm; margin-right:0.093cm; width:14.508cm; border-collapse: collapse; "><colgroup><col style="width:0.617cm;"/><col style="width:13.891cm;"/></colgroup><tbody><tr><td class="Table24_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>1</p></td><td class="Table24_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>This symbol indicates that it is <span class="spCh spChx2018">&#x2018;</span>set<span class="spCh spChx2019">&#x2019;</span> as a result of the instruction without any test conditions applying.</p></td></tr><tr><td class="Table24_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>0</p></td><td class="Table24_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>This symbol indicates it is <span class="spCh spChx2018">&#x2018;</span>Reset<span class="spCh spChx2019">&#x2019;</span> without any test conditions applying.</p></td></tr><tr><td class="Table24_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="P16"><span class="spCh spChx2193">&#x2193;</span></p></td><td class="Table24_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>This symbol indicates that it may be reset, but not set.</p></td></tr></tbody></table></div></li></ul><p/><p><b>Points to note</b></p><ul class="lib"><li><p>The M68HC11 can perform certain operations directly on the contents of a memory location without first bringing them into an accumulator.</p><div class="Table25" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table25" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; width:4.72cm; border-collapse: collapse; "><colgroup><col style="width:1.252cm;"/><col style="width:1.461cm;"/><col style="width:2.007cm;"/></colgroup><tbody><tr><td class="Table25_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p>e.g.</p></td><td style="vertical-align: top; "><p><span class="spCh spChx2018">&#x2018;</span>CLR<span class="spCh spChx2019">&#x2019;</span> </p></td><td style="vertical-align: top; "><p>instruction</p></td></tr><tr><td class="Table25_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p/></td><td style="vertical-align: top; "><p><span class="spCh spChx2018">&#x2018;</span>DEC<span class="spCh spChx2019">&#x2019;</span></p></td><td style="vertical-align: top; "><p class="center"><span class="spCh spChx201d">&#x201D;</span></p></td></tr><tr><td class="Table25_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p/></td><td style="vertical-align: top; "><p><span class="spCh spChx2018">&#x2018;</span>COM<span class="spCh spChx2019">&#x2019;</span></p></td><td style="vertical-align: top; "><p class="center"><span class="spCh spChx201d">&#x201D;</span></p></td></tr><tr><td class="Table25_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p/></td><td style="vertical-align: top; "><p><span class="spCh spChx2018">&#x2018;</span>INC<span class="spCh spChx2018">&#x2018;</span></p></td><td style="vertical-align: top; "><p class="center"><span class="spCh spChx201d">&#x201D;</span></p></td></tr><tr><td class="Table25_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p/></td><td style="vertical-align: top; "><p> etc.</p></td><td style="vertical-align: top; "><p/></td></tr></tbody></table></div><p/><p>These instructions may be identified by the entries in the <b>Boolean expression</b> column. If an accumulator is used then <span class="spCh spChx2018">&#x2018;</span>A<span class="spCh spChx2019">&#x2019;</span> or <span class="spCh spChx2018">&#x2018;</span>B<span class="spCh spChx2019">&#x2019;</span> will appear. If the instruction applies directly to memory contents then <span class="spCh spChx2018">&#x2018;</span>M<span class="spCh spChx2019">&#x2019;</span> appears by itself.</p><p>i.e. For <span class="spCh spChx2018">&#x2018;</span>DEC<span class="spCh spChx2019">&#x2019;</span> the entry is <span class="spCh spChx2018">&#x2018;</span>M <span class="spCh spChx2013">&#x2013;</span> 1 <span class="T1"><span class="spCh spChx2192">&#x2192;</span></span> M<span class="spCh spChx2019">&#x2019;</span></p></li><li><p>Certain instructions have restricted <span class="spCh spChx2018">&#x2018;</span>addressing modes<span class="spCh spChx2019">&#x2019;</span>.</p><p>e.g.The COM, NEG, DEC, ROL, ROR, ASL, ASR, etc. instructions only allow <span class="spCh spChx2018">&#x2018;</span>Indexed and Extended Addressing<span class="spCh spChx2019">&#x2019;</span> when referencing a location in memory.</p></li><li><p>All <b><span class="spCh spChx2018">&#x2018;</span>compare<span class="spCh spChx2019">&#x2019;</span></b> and <b><span class="spCh spChx2018">&#x2018;</span>test<span class="spCh spChx2019">&#x2019;</span></b> instructions merely set the flags according to the result obtained from the operation performed, but do not store the result.</p><p>e.g. CMPA $1F3B</p><p>This instruction subtracts the contents of location 1F3B<sub>16</sub> from the accumulator and sets all the condition codes according to the result. The actual contents of the accumulator remain unchanged.</p><p>A <b><span class="spCh spChx2018">&#x2018;</span>compare<span class="spCh spChx2019">&#x2019;</span></b> or <b><span class="spCh spChx2018">&#x2018;</span>test<span class="spCh spChx2019">&#x2019;</span></b> instruction is always followed by a conditional branch</p><div class="Table26" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table26" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; width:9.44cm; border-collapse: collapse; "><colgroup><col style="width:1.252cm;"/><col style="width:8.188cm;"/></colgroup><tbody><tr><td class="Table26_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>i.e.<br/>Or<br/>&#xA0;</p></td><td class="Table26_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>BEQ <span class="spCh spChx2013">&#x2013;</span> Branch if equal to zero<br/>BNE <span class="spCh spChx2013">&#x2013;</span> Branch if not equal to zero<br/>etc.</p></td></tr></tbody></table></div><p/></li><li><p><b>Conditional Branch Instructions</b></p><p>Refer to table 11.3</p><p>To give an indication of the significance of the branch conditions, it is best to consider them in pairs.</p><p>BCC/BCS instructions <span class="spCh spChx2013">&#x2013;</span> These allow the program to test the status of the <span class="spCh spChx2018">&#x2018;</span>carry bit<span class="spCh spChx2019">&#x2019;</span>. The <span class="spCh spChx2018">&#x2018;</span>carry bit<span class="spCh spChx2019">&#x2019;</span> may have been set as a result of an arithmetic operation or as a result of one of the Shift/Rotate instructions. </p><p>BEQ/BNE instructions <span class="spCh spChx2013">&#x2013;</span> The condition for branching is based exclusively on the <span class="spCh spChx2018">&#x2018;</span>Z-bit<span class="spCh spChx2019">&#x2019;</span> and tests for the <span class="spCh spChx2018">&#x2018;</span>Result = 0<span class="spCh spChx2019">&#x2019;</span>.</p><p>BVS/BVC instructions <span class="spCh spChx2013">&#x2013;</span> These test the <b>overflow bit</b> and provide a means of ensuring that the binary data does not exceed the limits of 8-bit 2<span class="spCh spChx2019">&#x2019;</span>s complement arithmetic.</p><p>BPL/BMI instructions <span class="spCh spChx2013">&#x2013;</span> These test the MSB of the result, i.e. the <span class="spCh spChx2018">&#x2018;</span>sign bit<span class="spCh spChx2019">&#x2019;</span>, and should be used only with <span class="spCh spChx2018">&#x2018;</span>signed numbers<span class="spCh spChx2019">&#x2019;</span>, i.e. 2<span class="spCh spChx2019">&#x2019;</span>s complement numbers. Note that they do not test for the possibility of an <b>overflow</b>.</p><p>BLT/BGE instructions <span class="spCh spChx2013">&#x2013;</span> These are very similar to the BPL/BMI instructions but in addition to checking the <span class="spCh spChx2018">&#x2018;</span>sign-bit<span class="spCh spChx2019">&#x2019;</span> they also check for a 2<span class="spCh spChx2019">&#x2019;</span>s complement overflow.</p><p>BGT/BLE instructions <span class="spCh spChx2013">&#x2013;</span> These are very similar in test to the BLT/BGE instructions but with the added test to put the decision point above the zero value instead of below it.</p><p>BHI/BLS instructions <span class="spCh spChx2013">&#x2013;</span> These are special instructions in that they apply for <span class="spCh spChx2018">&#x2018;</span><b>unsigned numbers</b><span class="spCh spChx2019">&#x2019;</span>, i.e. the MSB does not indicate the <span class="spCh spChx2018">&#x2018;</span>sign<span class="spCh spChx2019">&#x2019;</span> and 2<span class="spCh spChx2019">&#x2019;</span>s complement numbers are not being used.<br/></p></li></ul><p><b>Example 5</b></p><p>Let Accumulator A contain E7<sub>16</sub> and memory location 0001<sub>16</sub> contains 7E<sub>16</sub>.</p><ol class="li-lower-alpha" style="list-style: lower-alpha;"><li><p>What instructions would be used to cause a program to <b>branch</b> if the contents of the accumulator are less than the contents of the memory location. Assume a <span class="spCh spChx2018">&#x2018;</span>signed number<span class="spCh spChx2019">&#x2019;</span> system, i.e. the numbers are 2<span class="spCh spChx2019">&#x2019;</span>s complement values.</p></li><li><p>Repeat a. for an <span class="spCh spChx2018">&#x2018;</span>unsigned<span class="spCh spChx2019">&#x2019;</span> number system.<br/></p></li></ol><p><b>Solution</b></p><ol class="li-lower-alpha" style="list-style: lower-alpha;"><li><p>To determine if the number in Accumulator A is less than that in memory location 0001<sub>16</sub> then first a <span class="spCh spChx2018">&#x2018;</span>compare<span class="spCh spChx2019">&#x2019;</span> instruction is required.</p><div class="Table27" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table27" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; width:7.721cm; border-collapse: collapse; "><colgroup><col style="width:1.252cm;"/><col style="width:6.468cm;"/></colgroup><tbody><tr><td class="Table27_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>i.e.</p></td><td class="Table27_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>CMPA $ 01 (direct addressing)</p></td></tr></tbody></table></div><p/><p>This operation results in the condition codes being set according to the following calculation:</p><div class="Table28" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table28" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:0.088cm; width:13.914cm; border-collapse: collapse; "><colgroup><col style="width:1.235cm;"/><col style="width:12.679cm;"/></colgroup><tbody><tr><td class="Table28_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>i.e.</p></td><td class="Table28_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>(ACCA) <span class="spCh spChx2013">&#x2013;</span> (location 0001<sub>16</sub>)</p></td></tr><tr><td class="Table28_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>or</p></td><td class="Table28_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>(E7 <span class="spCh spChx2013">&#x2013;</span> 7E) which is equivalent to (<span class="spCh spChx2013">&#x2013;</span>25<sub>10</sub> <span class="spCh spChx2013">&#x2013;</span>126<sub>10</sub>) for a <span class="spCh spChx2018">&#x2018;</span>signed 2<span class="spCh spChx2019">&#x2019;</span>s complement system<span class="spCh spChx2019">&#x2019;</span>.</p></td></tr></tbody></table></div><p/><p>A close examination of table 11.3 indicates possible suitable branch instructions are:</p><p>BMI <span class="spCh spChx2013">&#x2013;</span> Branch if minus (tests for N = 1)<br/>BLT <span class="spCh spChx2013">&#x2013;</span> Branch if less than zero (test is N <span class="T3"><span class="spCh spChx2295">&#x2295;</span></span> V = 1)</p><p>as it is <span class="spCh spChx2018">&#x2018;</span>signed numbers<span class="spCh spChx2019">&#x2019;</span> we are considering, these are the only appropriate choices.</p><p>To select the appropriate instruction consider the actual operation performed by the ALU.</p><div class="Table29" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table29" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:7.652cm; width:6.35cm; border-collapse: collapse; "><colgroup><col style="width:2.801cm;"/><col style="width:3.549cm;"/></colgroup><tbody><tr><td class="Table29_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>E7<sub>16</sub> is</p></td><td class="Table29_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>1 1 1 0 0 1 1 1</p></td></tr><tr><td class="Table29_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>7E<sub>16</sub> is</p></td><td class="Table29_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>0 1 1 1 1 1 1 0</p></td></tr></tbody></table></div><p/><p>2<span class="spCh spChx2019">&#x2019;</span>s complement of 7E<sub>16</sub> is 1 0 0 0 0 0 1 0</p><p>E7<sub>16</sub> <span class="spCh spChx2013">&#x2013;</span> 7E<sub>16</sub> results in</p><p><a name="graphics17"><!-- --></a><img alt="graphics17" class="fr2" height="113" src="module11_files/m2d5aad12_420x113.jpg" style="border:0px; vertical-align: top" width="420"/></p><p>From this result the condition code values would be as follows:</p><div class="Table30" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table30" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:0.088cm; width:13.914cm; border-collapse: collapse; "><colgroup><col style="width:2.007cm;"/><col style="width:0.75cm;"/><col style="width:11.157cm;"/></colgroup><tbody><tr><td class="Table30_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>N = 0</p></td><td class="Table30_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><span class="spCh spChx2013">&#x2013;</span></p></td><td class="Table30_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>MSB = 0</p></td></tr><tr><td class="Table30_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>Z = 0</p></td><td class="Table30_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><span class="spCh spChx2013">&#x2013;</span></p></td><td class="Table30_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>result is not zero</p></td></tr><tr><td class="Table30_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>V = 1</p></td><td class="Table30_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><span class="spCh spChx2013">&#x2013;</span></p></td><td class="Table30_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>overflow has occurred</p></td></tr><tr><td class="Table30_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table30_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><span class="spCh spChx2013">&#x2013;</span></p></td><td class="Table30_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>i.e. the 2 numbers added are both negative but the result is positive.</p></td></tr><tr><td class="Table30_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>C = 0</p></td><td class="Table30_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><span class="spCh spChx2013">&#x2013;</span></p></td><td class="Table30_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>Since the CPU subtracts using the 2<span class="spCh spChx2019">&#x2019;</span>s complement method, we need to invert the carry result to get the correct status.</p></td></tr></tbody></table></div></li></ol><p/><div class="Table21" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table21 note" style="border-spacing: 0;empty-cells: show; width:14.601cm; border-collapse: collapse; "><colgroup><col style="width:2.002cm;"/><col style="width:12.599cm;"/></colgroup><tbody><tr><td class="Table21_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p><a name="graphics28"><!-- --></a><img alt="graphics28" class="fr2" height="57" src="module11_files/1e014184_57x57.jpg" style="border:0px; vertical-align: top" width="57"/></p></td><td class="Table21_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><h6><a id="id11" name="id11"><!--id11--></a>Note </h6><p>In this example the carry generated by performing the subtraction using 2<span class="spCh spChx2019">&#x2019;</span>s complement arithmetic is discarded and is <b>not the borrow</b> resulting from the subtraction. This can be identified by performing normal subtraction as follows:</p></td></tr></tbody></table></div><p/><ul class="lip" style="list-style-type: None"><li><p>E7<sub>16</sub> <span class="spCh spChx2013">&#x2013;</span> 7E<sub>16</sub> is</p></li><li><p><a name="graphics18"><!-- --></a><img alt="graphics18" class="fr2" height="83" src="module11_files/m3e26299c_415x83.jpg" style="border:0px; vertical-align: top" width="415"/></p></li><li><p>i.e. there is <b>no borrow</b> therefore the <span class="spCh spChx2018">&#x2018;</span>C-bit<span class="spCh spChx2019">&#x2019;</span> of the condition code register is [0].</p></li><li><p>The result of a branch should indicate the E7<sub>16</sub> (<span class="spCh spChx2013">&#x2013;</span>25<sub>10</sub>) is less than 7E<sub>16</sub> (+126<sub>10</sub>).</p></li><li><p>The <span class="spCh spChx2018">&#x2018;</span>BMI instruction checks for N = 1. But N = 0 therefore this instruction would not branch and would give the incorrect result.</p></li><li><p>The BLT instruction performs the test (N <span class="T3"><span class="spCh spChx2295">&#x2295;</span></span> V) which is [1] and would cause the correct branching operation.</p></li><li><p>The appropriate instructions are then</p></li><li><p>CMPA $ 01<br/>BLT (offset distance)</p></li></ul><ol class="li-lower-alpha" style="list-style: lower-alpha;"><li><p>For an unsigned number system E7<sub>16</sub> is 231<sub>10</sub> and 7E<sub>16</sub> is 126<sub>10</sub> and as such no branch should occur.</p><p>The <span class="spCh spChx2018">&#x2018;</span>compare instruction<span class="spCh spChx2019">&#x2019;</span> is still required and the condition code bits will be set identical to that in (a). From the summary given in Conditional Branch Instructions above the only instructions that can be used for unsigned numbers are</p><p>BLS or BHI</p><p>BLS results in a branch if the contents of 0001<sub>16</sub> are <span class="spCh spChx2018">&#x2018;</span>same or less than<span class="spCh spChx2019">&#x2019;</span> the contents of Accumulator A. This example requires that <span class="spCh spChx2018">&#x2018;</span>it be less than<span class="spCh spChx2019">&#x2019;</span> that of Accumulator A.</p><p>This can be provided as follows:</p><div class="Table32" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table32" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; width:9.92cm; border-collapse: collapse; "><colgroup><col style="width:1.85cm;"/><col style="width:8.07cm;"/></colgroup><tbody><tr><td class="Table32_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>CMPA</p></td><td class="Table32_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>$ 01</p></td></tr><tr><td class="Table32_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>BEQ</p></td><td class="Table32_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>02</p></td></tr><tr><td class="Table32_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>BLS</p></td><td class="Table32_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>(<b>offset</b>)</p></td></tr></tbody></table></div><p/><p>If the numbers are the same then the <span class="spCh spChx2018">&#x2018;</span>BEQ<span class="spCh spChx2019">&#x2019;</span> instruction will jump forward over the BLS instruction. (N.B. Firstly branch instructions do not alter the condition codes and secondly, the branch <span class="spCh spChx2018">&#x2018;</span>02<span class="spCh spChx2019">&#x2019;</span> is required since the BLS instruction is 2 bytes long.) This ensures that the BLS instruction will only branch if the contents of 0001<sub>16</sub> are less than Accumulator A.</p></li></ol><ul class="lib"><li><p><b>Special instructions</b> in table 11.3, include instructions which do not fall under any general category.</p><div class="Table33" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table33" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:0.111cm; width:13.891cm; border-collapse: collapse; "><colgroup><col style="width:1.39cm;"/><col style="width:12.501cm;"/></colgroup><tbody><tr><td class="Table33_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>NOP</p></td><td class="Table33_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>or <span class="spCh spChx2018">&#x2018;</span>No Operation<span class="spCh spChx2019">&#x2019;</span> instruction. This is a single byte instruction which <span class="spCh spChx2018">&#x2018;</span>does nothing<span class="spCh spChx2019">&#x2019;</span> except increment the program counter to the next instruction. It is very useful since the inclusion of <span class="spCh spChx2018">&#x2018;</span>NOP<span class="spCh spChx2019">&#x2019;</span> instructions in a program allow extra instructions to be added without altering the locations of all the program. Similarly if an instruction is deleted during the <span class="spCh spChx2018">&#x2018;</span>debugging phase<span class="spCh spChx2019">&#x2019;</span> it can be replaced with <span class="spCh spChx2018">&#x2018;</span>NOP<span class="spCh spChx2019">&#x2019;</span>s<span class="spCh spChx2019">&#x2019;</span>.</p></td></tr><tr><td class="Table33_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>WAI</p></td><td class="Table33_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>This instruction is used when the timing of an input/output is controlled by an external interrupt. Its use will be demonstrated in a later module.</p></td></tr><tr><td class="Table33_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>JSR</p></td><td class="Table33_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>Allows the program to <b><span class="spCh spChx2018">&#x2018;</span>Jump to Subroutine<span class="spCh spChx2019">&#x2019;</span></b> and note that <span class="spCh spChx2018">&#x2018;</span>indexed<span class="spCh spChx2019">&#x2019;</span> and <span class="spCh spChx2018">&#x2018;</span>extended<span class="spCh spChx2019">&#x2019;</span> addressing can be used to specify the start address of the sub routine.</p><p>e.g. JSR $ 101F</p><p>This will cause the program to jump to the subroutine whose first instruction is located at memory location 101F<sub>16</sub>.</p><p>(See the illustration following table 11.3.)</p><p>On a <span class="spCh spChx2018">&#x2018;</span>JSR<span class="spCh spChx2019">&#x2019;</span> the value on the <span class="spCh spChx2018">&#x2018;</span>program counter<span class="spCh spChx2019">&#x2019;</span> (which points to the next instruction address in the main program) is pushed on the stack and the address specified by the JSR instruction (e.g. 101F<sub>16</sub>) is put in the PC.</p></td></tr><tr><td class="Table33_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>RTS</p></td><td class="Table33_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>The end of the subroutine is indicated by an RTS instruction and causes the original value of the PC to be returned from the <b>stack</b>.</p><p>(See the illustration following table 11.3.)</p></td></tr><tr><td class="Table33_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>BSR</p></td><td class="Table33_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>A branch to subroutine uses relative addressing to specify the subroutine address. This allows the subroutine to start at a location which must be within the range +127 to <span class="spCh spChx2013">&#x2013;</span> 128 locations of the current value of the PC.</p></td></tr><tr><td class="Table33_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>SWI</p></td><td class="Table33_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>In summary,</p><ul class="lib"><li><p>When the SWI is executed the PC, XREG, Acc A, Acc B and Condition Code register contents are saved on the <b>stack</b>. (N.B. The PC contains the address of the instruction following the SWI.)</p></li><li><p>The new PC value is taken from memory locations FFFA<sub>16</sub> and FFFB<sub>16</sub>. i.e. These supply the address of the <span class="spCh spChx2018">&#x2018;</span>service routine for the Software Interrupt<span class="spCh spChx2019">&#x2019;</span>.</p></li><li><p>The Service Routine is then run.</p></li></ul><p>The effect of the SWI is identical to an <span class="spCh spChx2018">&#x2018;</span>external hardware interrupt<span class="spCh spChx2019">&#x2019;</span> which alerts the processor by activating an <span class="spCh spChx2018">&#x2018;</span>Interrupt Request<span class="spCh spChx2019">&#x2019;</span> line.</p></td></tr><tr><td class="Table33_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>RTI</p></td><td class="Table33_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>The final instruction of an Interrupt Service Routine must be this instruction. When executed it causes all the register contents to be returned from the <b>stack</b>. This returns the original value of the PC which is the address of the next instruction and allows the main program to continue.</p><p>(See the illustration following table 11.3.)</p></td></tr></tbody></table></div></li></ul><p/><div class="Table34" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table34 learning" style="border-spacing: 0;empty-cells: show; width:14.601cm; border-collapse: collapse; "><colgroup><col style="width:2.002cm;"/><col style="width:12.599cm;"/></colgroup><tbody><tr><td class="Table34_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p><a name="graphics19"><!-- --></a><img alt="graphics19" class="fr2" height="57" src="module11_files/m73656803_57x57.jpg" style="border:0px; vertical-align: top" width="57"/></p></td><td class="Table34_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><h6><a id="id12" name="id12"><!--id12--></a>Activity <span class="T4">11</span><span class="T4">.</span><span class="T4">1</span></h6><p>All questions refer to the MC68HC11 series microprocessors.</p><ol class="lin" style="list-style: decimal;"><li><p>What is meant by the shorthand notation: A + B &gt; A?</p></li><li><p>How is the C flag affected by the <span class="spCh spChx2018">&#x2018;</span>add<span class="spCh spChx2019">&#x2019;</span> and <span class="spCh spChx2018">&#x2018;</span>add with carry<span class="spCh spChx2019">&#x2019;</span> instructions?</p></li><li><p>Is the C flag changed when the AND instruction is executed?</p></li><li><p>Explain the difference between the NEG instruction and the COM instruction.</p></li><li><p>Explain the difference between the ANDA instruction and the BITA instruction.</p></li><li><p>The decimal adjust instruction is associated with which accumulator?</p></li><li><p>When the RORA instruction is executed the LSB of Accumulator A is shifted into the __________    register.</p></li><li><p>List eleven operations that can be performed directly on an operand in memory without first loading it into one of the MPU registers.</p></li><li><p>Explain the difference between the SUBB instruction and the CMPB instruction.</p></li><li><p>List the four types of logic operations that the <span class="spCh spChx2018">&#x2018;</span>68HC11 MPU can perform.</p></li><li><p>When the LDX instruction is executed, from where is the index register loaded?</p></li><li><p>List four conditional branch instructions that are commonly used after a compare or subtract instruction to compare two<span class="spCh spChx2019">&#x2019;</span>s complement numbers.</p></li><li><p>Explain the difference between the BGT and BHI instructions.</p></li><li><p>Which instruction is often used to fill in a hole left in a program after an unwanted byte is removed?</p></li><li><p>Which of the condition codes can be individually set or cleared?</p></li><li><p>What is the difference between an unconditional branch instruction and a conditional branch instruction?</p></li><li><p>What condition is tested by the branch if minus (BMI) instruction?</p></li><li><p>When is the N flag set?</p></li><li><p>When is the Z flag set?</p></li><li><p>During an add operation, the C flag is set. What does this represent?</p></li><li><p>During a subtract operation, the C flag is set. What does this indicate?</p></li><li><p>Often, when two positive 2<span class="spCh spChx2019">&#x2019;</span>s complement numbers are added, the sign bit of the answer will indicate a negative sum. This <span class="spCh spChx2018">&#x2018;</span>error<span class="spCh spChx2019">&#x2019;</span> can be spotted by checking which flag?</p></li><li><p>Under, what condition will the BEQ instruction cause a branch to occur?</p></li><li><p>Under what condition will the BPL instruction cause a branch to occur?</p></li><li><p>When subtracting unsigned binary numbers, which flag indicates that the difference is a negative number?</p></li></ol></td></tr><tr><td class="Table34_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p/></td><td class="Table34_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><div class="Table35" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table35" style="border-spacing: 0;empty-cells: show; margin-left:0cm; margin-right:0.009cm; width:12.591cm; border-collapse: collapse; "><colgroup><col style="width:0.596cm;"/><col style="width:11.994cm;"/></colgroup><tbody><tr><td class="Table35_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>26.</p></td><td class="Table35_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>How is the ADC instruction different from the ADD instruction?</p></td></tr><tr><td class="Table35_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>27.</p></td><td class="Table35_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>How is the SBC instruction different from the SUB instruction?</p></td></tr><tr><td class="Table35_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>28.</p></td><td class="Table35_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>A primary use of the ADC and SBC instructions is in ____________ arithmetic.</p></td></tr><tr><td class="Table35_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>29.</p></td><td class="Table35_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>The accumulator contains the number 7<sub>10</sub>. If two ASLA instructions are executed, what number will be in the accumulator?</p></td></tr><tr><td class="Table35_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>30.</p></td><td class="Table35_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>The BRA instruction will cause a branch to occur:</p><ol class="li-lower-alpha" style="list-style: lower-alpha;"><li><p>Anytime that it is executed.</p></li><li><p>Only if the Z flag is set.</p></li><li><p>Only if the N flag is set.</p></li><li><p>Only if the C flag is set.</p></li></ol></td></tr><tr><td class="Table35_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>31.</p></td><td class="Table35_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>The <span class="spCh spChx2018">&#x2018;</span>operand address field<span class="spCh spChx2019">&#x2019;</span> that follows the opcode of an unconditional branch instruction is:</p><ol class="li-lower-alpha" style="list-style: lower-alpha;"><li><p>The address of the operand.</p></li><li><p>The address of the next opcode to be executed.</p></li><li><p>Added to the program count to form the address of the next opcode to be executed.</p></li><li><p>Added to the program count to form the address of the operand that is to be tested to see if a branch operation is required.</p></li></ol></td></tr><tr><td class="Table35_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>32.</p></td><td class="Table35_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>The opcode for an unconditional branch instruction is at address AF<sub>16</sub>. The relative address is 0F<sub>16</sub>. From what address will the next opcode be fetched?</p><ol class="li-lower-alpha" style="list-style: lower-alpha;"><li><p>A0<sub>16</sub></p></li><li><p>C0<sub>16</sub></p></li><li><p>BE<sub>16</sub></p></li><li><p>B1<sub>16</sub></p></li></ol></td></tr><tr><td class="Table35_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>33.</p></td><td class="Table35_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>The opcode for an unconditional branch instruction is at address 30<sub>16</sub>. The relative address is EF<sub>16</sub>. From what address will the next opcode be fetched?</p><ol class="li-lower-alpha" style="list-style: lower-alpha;"><li><p>21<sub>16</sub></p></li><li><p>EF<sub>16</sub></p></li><li><p>32<sub>16</sub></p></li><li><p>19<sub>16</sub></p></li></ol></td></tr><tr><td class="Table35_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>34.</p></td><td class="Table35_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>The carry register:</p><ol class="li-lower-alpha" style="list-style: lower-alpha;"><li><p>Acts like the ninth bit of the accumulator.</p></li><li><p>Is set when a <span class="spCh spChx2018">&#x2018;</span>borrow<span class="spCh spChx2019">&#x2019;</span> for bit 7 of the accumulator occurs.</p></li><li><p>Is set when a carry from bit 7 occurs.</p></li><li><p>All the above.</p></li></ol></td></tr></tbody></table></div></td></tr><tr><td class="Table34_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p/></td><td class="Table34_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><div class="Table36" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table36" style="border-spacing: 0;empty-cells: show; width:12.591cm; border-collapse: collapse; "><colgroup><col style="width:0.596cm;"/><col style="width:11.994cm;"/></colgroup><tbody><tr><td class="Table36_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>35</p></td><td class="Table36_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>The numbers 0101 10002, and 0110 00112, are added using the ADD instruction.</p><p>Immediately after the ADD instruction is executed, the condition code registers will indicate the following:</p><ol class="li-lower-alpha" style="list-style: lower-alpha;"><li><p>C = 1, N = 1, V = 1, Z = 0</p></li><li><p>C = 0, N = 1, V = 1, Z = 0</p></li><li><p>C = 0, N = 1, V = 0, Z = 0</p></li><li><p>C = 0, N = 0, V = 1, Z = 1</p></li></ol></td></tr><tr><td class="Table36_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>36.</p></td><td class="Table36_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>When you are adding multiple-precision binary numbers, all bytes except the least significant ones must be:</p><ol class="li-lower-alpha" style="list-style: lower-alpha;"><li><p>Added using the ADD instruction.</p></li><li><p>Added using the DAA instruction.</p></li><li><p>Added using the ADC instruction.</p></li><li><p>Decimal adjusted before addition takes place.</p></li></ol></td></tr></tbody></table></div><p/><p>Solutions are provided at the end of the module.</p></td></tr></tbody></table></div><p/><h1><a id="id13" name="id13"><!--id13--></a>11.2 Program formatting</h1><p>We now have all the information necessary to write programs in machine language to solve any problem. It should be noted, however, that all programs must be written in a strict format, which all other programmers can understand. Even a program written by you a week ago would now be difficult to recall if you don<span class="spCh spChx2019">&#x2019;</span>t document it in a standard format. This fact cannot be emphasised enough and be warned <span class="spCh spChx2013">&#x2013;</span> <span class="spCh spChx2018">&#x2018;</span>programs submitted in some other format will not be accepted as assignments in this course.<span class="spCh spChx2019">&#x2019;</span></p><p>The format is simple and logical and it uses a fixed set of columns known as <span class="spCh spChx2018">&#x2018;</span>fields<span class="spCh spChx2019">&#x2019;</span>. The technique used to solve problems often differs from programmer to programmer however in this course we will again follow a <span class="spCh spChx2018">&#x2018;</span>standard technique<span class="spCh spChx2019">&#x2019;</span>, which will at least guarantee you success in solving problems.</p><h2><a id="id14" name="id14"><!--id14--></a>11.2.1 Problem solving techniques</h2><p>There are 4 basic steps in solving a problem. These are:</p><h3><a id="id15" name="id15"><!--id15--></a>Step 1 <span class="spCh spChx2013">&#x2013;</span> a flowchart</h3><p>The flowchart is a block diagram used to graphically illustrate the technique used by the programmer to solve the problem. The words used in each block (or box) are standard English language and are <b>never</b> abbreviated computer jargon for a particular computer. The flowchart should be an explanation only of how the problem can be solved on any computer.</p><p>Flowchart symbols:</p><p>There are five basic symbols used to draw flowcharts. Each corresponds to one of the five basic functions of a computer, as follows:</p><p><a name="graphics20"><!-- --></a><img alt="graphics20" class="fr1" height="564" src="module11_files/6a640339_548x564.jpg" style="border:0px; vertical-align: top" width="548"/></p><p>A subroutine can be considered as a separate predefined process. When the program reaches this block, the main program is halted and flow passes to the subroutine. At the end of the subroutine flow returns to this block and the main program continues. Subroutines must be shown as a separate flowchart with a Start block at the beginning and a Return block at the end.</p><h3><a id="id16" name="id16"><!--id16--></a>Step 2 <span class="spCh spChx2013">&#x2013;</span> a memory map</h3><p>The memory map is a diagram showing the memory addresses used for data, I/O devices, the program itself and any unused memory. It will vary from processor to processor according to the available memory addresses.</p><p>The next two steps describe the program itself, which is written in two sections as shown.</p><h3><a id="id17" name="id17"><!--id17--></a>Step 3 <span class="spCh spChx2013">&#x2013;</span> the assembly language section</h3><p>This section contains everything (labels, mnemonics, operands and comments) except the actual codes used by the processor. We will see later that by describing this section to an <span class="spCh spChx2018">&#x2018;</span>assembler program<span class="spCh spChx2019">&#x2019;</span> on another computer we can automatically generate machine codes and so avoid the process described in Step 4.</p><h3><a id="id18" name="id18"><!--id18--></a>Step 4 <span class="spCh spChx2013">&#x2013;</span> the machine coded section</h3><p>This section of the program lists the actual addresses used by a particular processor together with the machine codes relevant for that processor. It is the only part of the whole programming process, which the computer itself understands.</p><p>As mentioned previously when writing and coding programs it is essential to present them in a format, which is consistent with that given by most assemblers. All programs you write should follow this format:</p><p><a name="graphics21"><!-- --></a><img alt="graphics21" class="fr1" height="283" src="module11_files/m30e80a4a_545x283.jpg" style="border:0px; vertical-align: top" width="545"/></p><p><b>Label field</b> <span class="spCh spChx2013">&#x2013;</span> It is convenient to give labels to certain instructions in the program. This makes it easy to follow.</p><p>e.g. START and END (or STOP)</p><p>Its major use however is to indicate <b>branch destinations</b>.</p><p>e.g. BPL LOOP</p><p>indicates the branch destination, i.e. the instruction to be executed immediately after a <span class="spCh spChx2018">&#x2018;</span><b>branch<span class="spCh spChx2019">&#x2019;</span>, </b>is that against the label LOOP, i.e. ADDA instruction.</p><p><b>Mnemonics field</b> <span class="spCh spChx2013">&#x2013;</span> Contains the mnemonic of the instructions only.</p><p><b>Operand</b> <b>field</b> <span class="spCh spChx2013">&#x2013;</span> Contain the <span class="spCh spChx2018">&#x2018;</span>address mode symbol<span class="spCh spChx2019">&#x2019;</span> and the <span class="spCh spChx2018">&#x2018;</span>operand<span class="spCh spChx2019">&#x2019;</span>.</p><p>Note: Use labels and names for operands rather than hexadecimal address.</p><p><b>Comment</b> <b>field</b> <span class="spCh spChx2013">&#x2013;</span> A brief comment on the function of the instruction.</p><h2><a id="id19" name="id19"><!--id19--></a>Programming example 1</h2><p>The foregoing process is best illustrated by an example. We will reprogram the previous example given in section 8.5.</p><p>Write a complete program using the stored program concept to perform the following numerical exercise: 9 <span class="spCh spChx2013">&#x2013;</span> 5 + 2 on a Motorola <span class="spCh spChx2018">&#x2018;</span>68HC11 series processor. The result is to be stored in a memory location labelled ANS.</p><p><b>Step 1:</b> Flowchart</p><p><b>Step 2:</b> Memory map</p><p><b>Step 3:</b> Assembly language program</p><p><b>Step 4:</b> Machine code program</p><p><b>Notes:</b> </p><ol class="lin" style="list-style: decimal;"><li><p>This program must be designed to operate on the M68HC11 series processor. Its memory space (allocated by the manufacturer) available to the programmer is 1100 to B600.</p></li><li><p>We will also illustrate the use of <b>labels</b>, which were mentioned in section 11.1.2. In this problem we will allocate labels to the data in this problem. For instance:<br/></p><div class="Table37" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table37" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:7.034cm; width:6.967cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:3.507cm;"/><col style="width:3.461cm;"/></colgroup><tbody><tr><td class="Table37_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center"><b>Data</b></p></td><td class="Table37_B1" style="vertical-align: top;  border:1.0px solid #000000;  padding:0.097cm; "><p class="center"><b>Label</b></p></td></tr><tr><td class="Table37_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">9<br/>5<br/>2<br/>Result</p></td><td class="Table37_B2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="center">NUM1<br/>NUM2<br/>NUM3<br/>ANS</p></td></tr></tbody></table></div></li></ol><p/><p>Remember labels are not recognized by the computer, however, they are used extensively in designing programs as they assist in layout and understanding of the programming techniques used.</p><p class="P5"><b>Step 1 <span class="spCh spChx2013">&#x2013;</span> Flowchart</b></p><p class="indent"><a name="graphics22"><!-- --></a><img alt="graphics22" class="fr2" height="363" src="module11_files/m1c2769a2_181x363.jpg" style="border:0px; vertical-align: top" width="181"/></p><p><b>Step 2 <span class="spCh spChx2013">&#x2013;</span> Memory map</b></p><p><a name="graphics23"><!-- --></a><img alt="graphics23" class="fr2" height="247" src="module11_files/m50ea27ce_516x247.jpg" style="border:0px; vertical-align: top" width="516"/></p><p class="P5"><b>Steps 3 and 4 <span class="spCh spChx2013">&#x2013;</span> Program sections</b></p><p class="P9">Note the use of extended addressing modes because the memory address locations are 16 bits in length.</p><div class="Table38" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table38" style="border-spacing: 0;empty-cells: show; keep-with-next:always; width:14.601cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:1.522cm;"/><col style="width:1.72cm;"/><col style="width:1.499cm;"/><col style="width:2.006cm;"/><col style="width:1.764cm;"/><col style="width:6.091cm;"/></colgroup><tbody><tr><td class="Table38_A1" colspan="2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center" style="font-size:10.5pt; ">Machine Code Section (Step 4)</p></td><td class="Table38_C1" colspan="4" style="vertical-align: top;  border:1.0px solid #000000;  padding:0.097cm; "><p class="center" style="font-size:10.5pt; ">Assembly Language Section <br/>(Step 3)</p></td></tr><tr><td class="Table38_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center" style="font-size:10.5pt; ">Address</p></td><td class="Table38_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center" style="font-size:10.5pt; ">Operation<br/>code</p></td><td class="Table38_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center" style="font-size:10.5pt; ">Label field</p></td><td class="Table38_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center" style="font-size:10.5pt; ">Mnemonics field</p></td><td class="Table38_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center" style="font-size:10.5pt; ">Operand<br/>field</p></td><td class="Table38_F2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="center" style="font-size:10.5pt; ">Comments field</p></td></tr><tr><td class="Table38_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center" style="font-size:10.5pt; ">1100<br/>1101<br/>1102<br/>1103<br/>1110<br/>1111<br/>1112<br/>1113<br/>1114<br/>1115<br/>1116<br/>1117<br/>1118<br/>1119<br/>111A<br/>111B<br/>111C<br/>111D<br/>111E</p></td><td class="Table38_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center" style="font-size:10.5pt; "><br/><br/><br/><br/>B6<br/>11<br/>00<br/>B0<br/>11<br/>01<br/>BB<br/>11<br/>02<br/>B7<br/>11<br/>03<br/>7E<br/>11<br/>1C</p></td><td class="Table38_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center" style="font-size:10.5pt; ">NUMl<br/>NUM2<br/>NUM3<br/>ANS<br/>START<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>HALT</p></td><td class="Table38_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center" style="font-size:10.5pt; "><br/><br/><br/><br/>LDAA<br/><br/><br/>SUBA<br/><br/><br/>ADDA<br/><br/><br/>STAA<br/><br/><br/>JMP</p></td><td class="Table38_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center" style="font-size:10.5pt; ">9<br/>5<br/>2<br/><br/>NUMI<br/><br/><br/>NUM2<br/><br/><br/>NUM3<br/><br/><br/>ANS<br/><br/><br/>HALT</p></td><td class="Table38_F2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="P11">Number 1 =9<br/>Number 2 = 5<br/>Number 3 = 2<br/>Location&#xA0;reserved&#xA0;for&#xA0;answer<br/>Loads Accumulator A with Number 1 from location 1100<br/><br/>Subtracts Number 2 from the Accumulator<br/><br/>Adds Number 3 to the <br/>Accumulator<br/><br/>Stores&#xA0;the&#xA0;result&#xA0;in&#xA0;Accumulator A into location 1103.<br/><br/>Halts the process at this point<br/>Not an ideal way to end a program, but acceptable in this course.</p></td></tr></tbody></table></div><p/><div class="Table39" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table39" style="border-spacing: 0;empty-cells: show; width:14.601cm; border-collapse: collapse; "><colgroup><col style="width:1.252cm;"/><col style="width:13.349cm;"/></colgroup><tbody><tr><td class="Table39_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p><b>Note:</b></p><p><b>&#xA0;<br/>&#xA0;</b></p></td><td class="Table39_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>This program is not designed to run on the 68HC11 microcontroller.</p><p>This program would be started at location $1110 after it has been typed into the CPU RAM.</p></td></tr></tbody></table></div><p/><p>Let us now consider another example where the assembly language program has been developed by someone else and we are to describe its operation and code it for a <span class="spCh spChx2018">&#x2018;</span>68HC11 series processor with memory addresses as given.</p><h2><a id="id20" name="id20"><!--id20--></a>Programming example 2</h2><p class="P10">Consider the following Assembly Language Program:</p><div class="Table40" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table40" style="border-spacing: 0;empty-cells: show; keep-with-next:always; width:14.601cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:2.249cm;"/><col style="width:2.999cm;"/><col style="width:2.734cm;"/><col style="width:6.62cm;"/></colgroup><tbody><tr><td class="Table40_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p>Label field</p></td><td class="Table40_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p>Mnemonic field</p></td><td class="Table40_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p>Operand field</p></td><td class="Table40_D1" style="vertical-align: top;  border:1.0px solid #000000;  padding:0.097cm; "><p>Comment field</p></td></tr><tr><td class="Table40_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p>START<br/><br/>LOOP<br/><br/><br/><br/>END</p></td><td class="Table40_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p>LDX<br/>CLRA<br/>ADDA<br/><br/>DEX<br/>BPL<br/>JMP</p></td><td class="Table40_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p>#$0004<br/><br/>$00,X<br/><br/><br/>LOOP<br/>END</p></td><td class="Table40_D2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p>Set the XREG = 4<br/>Clear Accumulator A<br/>Add (M) into Accumulator A<br/>Where M = (XREG) + 00<br/>Decrement XREG for next value<br/>For M &gt; 0000 go back to loop<br/>Stop the program</p></td></tr></tbody></table></div><p/><p>Describe the function of the program and code it into machine code with the program starting at location 0010<sub>16.</sub></p><h3><a id="id21" name="id21"><!--id21--></a>Solution</h3><p>Before solving the problem note the function of each of the columns.</p><p>The function of this program is to sum the contents of the memory locations 0000<sub>16</sub> to 0004<sub>16</sub>, i.e. a table, leaving the answer in the accumulator. Note how indexed addressing is used to point to the next entry in the table each <span class="spCh spChx2018">&#x2018;</span>pass through the loop<span class="spCh spChx2019">&#x2019;</span>.</p><p>Let the contents of 0000<sub>16</sub> to 0004<sub>16</sub> be as follows:</p><div class="Table41" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table41" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; width:5.29cm; border-collapse: collapse; "><colgroup><col style="width:2.503cm;"/><col style="width:2.787cm;"/></colgroup><tbody><tr><td class="Table41_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="center">Location</p></td><td class="Table41_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="center">Contents</p></td></tr><tr><td class="Table41_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="center">0000</p></td><td class="Table41_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="center">01</p></td></tr><tr><td class="Table41_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="center">0001</p></td><td class="Table41_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="center">02</p></td></tr><tr><td class="Table41_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="center">0002</p></td><td class="Table41_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="center">03</p></td></tr><tr><td class="Table41_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="center">0003</p></td><td class="Table41_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="center">04</p></td></tr><tr><td class="Table41_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="center">0004</p></td><td class="Table41_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="center">05</p></td></tr></tbody></table></div><p/><p>The register contents as the program is run would then be as follows:</p><ul class="lib"><li><p>After the program has just executed the CLRA instruction</p><p>Acc A = 0 XREG = 0004</p></li><li><p>When the program is about to execute BPL LOOP for the first time Acc A = 05<sub>16</sub> (i.e. contents of 0004<sub>16</sub> have been added to it)</p><p>XREG = 0003<sub>16</sub></p><p>As the <span class="spCh spChx2018">&#x2018;</span>DEX<span class="spCh spChx2019">&#x2019;</span> instruction set the <span class="spCh spChx2018">&#x2018;</span>condition codes<span class="spCh spChx2019">&#x2019;</span> and the result is 0003<sub>16</sub> then the BPL instruction will cause the program to branch back to LOOP and repeat at the <span class="spCh spChx2018">&#x2018;</span>ADDA<span class="spCh spChx2019">&#x2019;</span> instruction.</p></li><li><p>When the program is about to execute BPL LOOP for the second time</p><p>Acc A = 09<sub>16<br/></sub>XREG = 0002<sub>16</sub></p></li><li><p>When program is about to execute BPL LOOP for the third time</p><p>Acc A = 0C<sub>16</sub> (i.e. 5<sub>10</sub> + 4<sub>10</sub> + 3<sub>10</sub> = 12<sub>10</sub> = C<sub>16</sub>)<br/>XREG = 0001<sub>16</sub></p></li><li><p>After the fourth time</p><p>Acc A = 0E<sub>16<br/></sub>XREG = 0000<sub>16</sub><br/></p></li></ul><p>Note this is still positive (i.e. N bit = 0) so it will branch one more time.</p><ul class="lib"><li><p>After the fifth time</p><p>Acc A = 0F<sub>16</sub> (i.e. 15<sub>10</sub>)<br/>XREG = FFFF<sub>16</sub> (i.e. 0000<sub>16</sub><span class="spCh spChx2013">&#x2013;</span>1)</p><p>which means the N bit = 1 and the <b>branch</b> will not occur therefore the next instruction will be the JMP END instruction which is an endless loop that effectively stops the program. Resetting the processor with terminate the program properly.<br/></p></li></ul><p>The fully coded program is as follows:</p><div class="Table48" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table48" style="border-spacing: 0;empty-cells: show; width:14.601cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:1.743cm;"/><col style="width:2.006cm;"/><col style="width:1.984cm;"/><col style="width:2.007cm;"/><col style="width:1.764cm;"/><col style="width:5.098cm;"/></colgroup><tbody><tr><td class="Table48_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center" style="font-size:10.5pt; ">Address</p></td><td class="Table48_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center" style="font-size:10.5pt; ">Operation code</p></td><td class="Table48_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center" style="font-size:10.5pt; ">Label field</p></td><td class="Table48_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center" style="font-size:10.5pt; ">Mnemonic field</p></td><td class="Table48_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center" style="font-size:10.5pt; ">Operand field</p></td><td class="Table48_F1" style="vertical-align: top;  border:1.0px solid #000000;  padding:0.097cm; "><p class="P15">Comment field</p></td></tr><tr><td class="Table48_A2" style="vertical-align: top;  border-bottom:none;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:0.101cm; "><p class="center" style="font-size:10.5pt; ">0010<br/>0011<br/>0012<br/>0013<br/>0014<br/>&#xA0;</p></td><td class="Table48_A2" style="vertical-align: top;  border-bottom:none;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:0.101cm; "><p class="center" style="font-size:10.5pt; ">CE<br/>00<br/>04<br/>4F<br/>AB<br/>&#xA0;</p></td><td class="Table48_A2" style="vertical-align: top;  border-bottom:none;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:0.101cm; "><p class="center" style="font-size:10.5pt; ">START<br/>&#xA0;<br/>&#xA0;<br/>&#xA0;<br/>LOOP<br/>&#xA0;</p></td><td class="Table48_A2" style="vertical-align: top;  border-bottom:none;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:0.101cm; "><p class="center" style="font-size:10.5pt; ">LDX<br/>&#xA0;<br/>&#xA0;<br/>CLRA<br/>ADDA<br/>&#xA0;</p></td><td class="Table48_A2" style="vertical-align: top;  border-bottom:none;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:0.101cm; "><p class="center" style="font-size:10.5pt; ">#$0004<br/>&#xA0;<br/>&#xA0;<br/>&#xA0;<br/>$00,X<br/>&#xA0;</p></td><td class="Table48_F2" style="vertical-align: top;  border-bottom:none;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:0.101cm; "><p class="P15">Set the XREG = 4<br/>&#xA0;<br/>&#xA0;<br/>Clear Acc A<br/>Add (M) into Acc A<br/>Where M = (XREG) + 00</p></td></tr><tr><td class="Table48_A3" style="vertical-align: top;  border-bottom:none;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:1.0px; "><p class="center" style="font-size:10.5pt; ">0015<br/>0016<br/>0017<br/>0018</p></td><td class="Table48_A3" style="vertical-align: top;  border-bottom:none;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:1.0px; "><p class="center" style="font-size:10.5pt; ">00<br/>09<br/>2A<br/>FB</p></td><td class="Table48_A3" style="vertical-align: top;  border-bottom:none;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:1.0px; "><p class="center" style="font-size:10.5pt; ">&#xA0;<br/>&#xA0;<br/>&#xA0;<br/>&#xA0;</p></td><td class="Table48_A3" style="vertical-align: top;  border-bottom:none;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:1.0px; "><p class="center" style="font-size:10.5pt; ">&#xA0;<br/>DEX<br/>BPL<br/>&#xA0;</p></td><td class="Table48_A3" style="vertical-align: top;  border-bottom:none;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:1.0px; "><p class="center" style="font-size:10.5pt; ">&#xA0;<br/>&#xA0;<br/>LOOP<br/>&#xA0;</p></td><td class="Table48_F3" style="vertical-align: top;  border-bottom:none;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:1.0px; "><p class="P15"><br/>Decrement XREG for next M<br/>For&#xA0;M&#xA0;&gt;&#xA0;0000&#xA0;go&#xA0;back&#xA0;to&#xA0;loop<br/>&#xA0;</p></td></tr><tr><td class="Table48_A4" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:1.0px; "><p class="center" style="font-size:10.5pt; ">0019<br/>001A<br/>001B</p></td><td class="Table48_A4" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:1.0px; "><p class="center" style="font-size:10.5pt; ">7E<br/>00<br/>19</p></td><td class="Table48_A4" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:1.0px; "><p class="center" style="font-size:10.5pt; ">END<br/>&#xA0;<br/>&#xA0;</p></td><td class="Table48_A4" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:1.0px; "><p class="center" style="font-size:10.5pt; ">JMP<br/>&#xA0;<br/>&#xA0;</p></td><td class="Table48_A4" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:1.0px; "><p class="center" style="font-size:10.5pt; ">END<br/>&#xA0;<br/>&#xA0;</p></td><td class="Table48_F4" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding-bottom:1.0px;  padding-left:0.101cm;  padding-right:0.101cm;  padding-top:1.0px; "><p class="P15">STOP<br/>&#xA0;<br/>&#xA0;</p></td></tr></tbody></table></div><p/><p>The machine language program is written by selecting the appropriate machine code from the instruction set.</p><div class="Table49" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table49" style="border-spacing: 0;empty-cells: show; margin-left:0cm; margin-right:7.655cm; width:6.946cm; border-collapse: collapse; "><colgroup><col style="width:2.505cm;"/><col style="width:4.441cm;"/></colgroup><tbody><tr><td class="Table49_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>e.g. LDX</p></td><td class="Table49_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p> #$0004</p></td></tr></tbody></table></div><p/><p>is coded into three bytes as follows:</p><p class="indent"><a name="graphics24"><!-- --></a><img alt="graphics24" class="fr2" height="80" src="module11_files/76efc979_295x80.jpg" style="border:0px; vertical-align: top" width="295"/></p><p>N.B. In some references the assembly code for this instruction is written as</p><div class="Table50" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table50" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:10.407cm; width:3.595cm; border-collapse: collapse; "><colgroup><col style="width:1.764cm;"/><col style="width:1.831cm;"/></colgroup><tbody><tr><td class="Table50_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>LDX</p></td><td class="Table50_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>#$04</p></td></tr></tbody></table></div><p/><p>This is valid, however, care should be exercised to check that it is in fact a 3-byte instruction. This can be found in the <span class="spCh spChx2018">&#x2018;</span>bytes column<span class="spCh spChx2019">&#x2019;</span> of the instruction details.</p><p>Coding for the remainder of the instructions should be straight forward except possibly the <span class="spCh spChx2018">&#x2018;</span>BPL LOOP<span class="spCh spChx2019">&#x2019;</span> instruction.</p><p>The machine code for <span class="spCh spChx2018">&#x2018;</span>BPL LOOP<span class="spCh spChx2019">&#x2019;</span> is</p><div class="Table51" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table51" style="border-spacing: 0;empty-cells: show; margin-left:0.6cm; margin-right:9.525cm; width:4.477cm; border-collapse: collapse; "><colgroup><col style="width:1.743cm;"/><col style="width:2.734cm;"/></colgroup><tbody><tr><td class="Table51_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>Byte 1</p></td><td class="Table51_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>2A</p></td></tr><tr><td class="Table51_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>Byte 2</p></td><td class="Table51_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>OFFSET</p></td></tr></tbody></table></div><p/><p>The value of the OFFSET is that value which when added to the current value of the PC will cause the next instruction to be fetched from location 0014<sub>16</sub> (i.e. the <span class="spCh spChx2018">&#x2018;</span>ADDA<span class="spCh spChx2019">&#x2019;</span> instruction). This is <b>relative addressing</b>.</p><p>When the <span class="spCh spChx2018">&#x2018;</span>BPL LOOP<span class="spCh spChx2019">&#x2019;</span> instruction is executed the PC will already have been incremented to point at the next instruction.</p><div class="Table52" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table52" style="border-spacing: 0;empty-cells: show; margin-left:0cm; margin-right:9.551cm; width:5.05cm; border-collapse: collapse; "><colgroup><col style="width:1.252cm;"/><col style="width:3.798cm;"/></colgroup><tbody><tr><td style="vertical-align: top; "><p>i.e.</p></td><td style="vertical-align: top; "><p>PC = 0019<sub>16</sub></p></td></tr></tbody></table></div><p/><p>Therefore, the address calculation will be as follows:</p><div class="Table53" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table53" style="border-spacing: 0;empty-cells: show; margin-left:0cm; width:7.89cm; border-collapse: collapse; "><colgroup><col style="width:1.251cm;"/><col style="width:6.639cm;"/></colgroup><tbody><tr><td class="Table53_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p/></td><td class="Table53_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>0019<sub>16</sub> + OFFSET = 0014<sub>16</sub></p></td></tr><tr><td class="Table53_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>or </p></td><td class="Table53_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>OFFSET = <span class="spCh spChx2013">&#x2013;</span>5</p></td></tr></tbody></table></div><p/><p>This OFFSET is held as a 2<span class="spCh spChx2019">&#x2019;</span>s complement value, which for <span class="spCh spChx2013">&#x2013;</span>05<sub>16</sub> is FB<sub>16</sub>.</p><div class="Table54" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table54 learning" style="border-spacing: 0;empty-cells: show; width:14.601cm; border-collapse: collapse; "><colgroup><col style="width:2.002cm;"/><col style="width:12.599cm;"/></colgroup><tbody><tr><td class="Table54_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p><a name="graphics25"><!-- --></a><img alt="graphics25" class="fr2" height="57" src="module11_files/m73656803_57x57.jpg" style="border:0px; vertical-align: top" width="57"/></p></td><td class="Table54_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><h6><a id="id22" name="id22"><!--id22--></a>Activity <span class="T4">11</span><span class="T4">.</span><span class="T4">2</span></h6><div class="Table55" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table55" style="border-spacing: 0;empty-cells: show; width:12.591cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:2.249cm;"/><col style="width:2.272cm;"/><col style="width:2.226cm;"/><col style="width:5.844cm;"/></colgroup><tbody><tr><td class="Table55_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Label field</p></td><td class="Table55_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Mnemonic field</p></td><td class="Table55_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Operand field</p></td><td class="Table55_D1" style="vertical-align: top;  border:1.0px solid #000000;  padding:0.097cm; "><p>Comment field</p></td></tr><tr><td class="Table55_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">START<br/>LOOP<br/><br/><br/><br/><br/>STOP</p></td><td class="Table55_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">CLRA<br/>TST<br/>BEQ<br/>DEC<br/>ADDA<br/>BRA<br/>JMP</p></td><td class="Table55_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center"><br/>$0020<br/>STOP<br/>$0020<br/>$21<br/>LOOP<br/>STOP</p></td><td class="Table55_D2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p>Clear Accumulator A<br/>Test the Multiplier<br/>If it is zero STOP<br/>Otherwise&#xA0;decrement&#xA0;the&#xA0;multiplier<br/>Add Multiplicand to the Product<br/>Repeat the loop</p></td></tr></tbody></table></div><p class="figure-caption-below"><b><br/>Figure </b><b>11</b><b>.</b><b>1</b><b>:</b> </p><p>This program performs a multiplication by repeated addition. The memory locations reserved for variables are as follows:</p><div class="Table56" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table56" style="border-spacing: 0;empty-cells: show; width:10.716cm; border-collapse: collapse; "><colgroup><col style="width:2.425cm;"/><col style="width:8.29cm;"/></colgroup><tbody><tr><td class="Table56_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>Multiplier</p></td><td class="Table56_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p> = Address 0020<sub>16</sub></p></td></tr><tr><td class="Table56_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>Multiplicand</p></td><td class="Table56_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p> = Address 0021<sub>16</sub></p></td></tr></tbody></table></div><p/><p>Let the Multiplier = 05<sub>16</sub>, the Multiplicand = 04<sub>16</sub> and the program when coded into machine code is to start at Address 0010<sub>16</sub>.</p><p>In relation to the program in figure 11.1 answer the following questions.</p><ol class="lin" style="list-style: decimal;"><li><p>Code the program into machine code with starting address 0010<sub>16</sub>.</p></li><li><p>What addressing mode does the TST instruction use?</p><ol class="li-lower-alpha" style="list-style: lower-alpha;"><li><p>Immediate</p></li><li><p>Direct</p></li><li><p>Extended</p></li><li><p>Indexed</p></li></ol></li><li><p>The BEQ instruction checks to see if the TST instruction set the:</p><ol class="li-lower-alpha" style="list-style: lower-alpha;"><li><p>Z flag</p></li><li><p>C flag</p></li><li><p>H flag</p></li><li><p>V flag</p></li></ol></li><li><p>The DEC instruction decrements the number in:</p><ol class="li-lower-alpha" style="list-style: lower-alpha;"><li><p>Accumulator A</p></li><li><p>Memory location $0020</p></li><li><p>Accumulator B</p></li><li><p>The index register</p></li></ol></li></ol></td></tr><tr><td class="Table54_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p/></td><td class="Table54_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><div class="Table57" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table57" style="border-spacing: 0;empty-cells: show; width:12.591cm; border-collapse: collapse; "><colgroup><col style="width:0.617cm;"/><col style="width:11.973cm;"/></colgroup><tbody><tr><td class="Table57_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="P12">5.</p></td><td class="Table57_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>Which instruction is executed immediately after the BRA instruction?</p><ol class="li-lower-alpha" style="list-style: lower-alpha;"><li><p>WAI</p></li><li><p>BEQ</p></li><li><p>CLRA</p></li><li><p>TST</p></li></ol></td></tr><tr><td class="Table57_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="P12">6.</p></td><td class="Table57_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>With the values given for the multiplier and multiplicand, how many times will the main program loop be repeated?</p><ol class="li-lower-alpha" style="list-style: lower-alpha;"><li><p>Four times</p></li><li><p>Five times</p></li><li><p>Twenty times</p></li><li><p>Twice</p></li></ol></td></tr><tr><td class="Table57_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="P12">7.</p></td><td class="Table57_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>After the program has been executed, memory location $0020 will contain:</p><ol class="li-lower-alpha" style="list-style: lower-alpha;"><li><p>05<sub>16</sub></p></li><li><p>04<sub>16</sub></p></li><li><p>20<sub>16</sub></p></li><li><p>00<sub>16</sub></p></li></ol></td></tr><tr><td class="Table57_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="P12">8.</p></td><td class="Table57_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>After the program has been executed, the product will appear in:</p><ol class="li-lower-alpha" style="list-style: lower-alpha;"><li><p>Memory location $0020</p></li><li><p>Memory location $0021</p></li><li><p>Accumulator A</p></li><li><p>Accumulator B</p></li></ol></td></tr><tr><td class="Table57_A1" colspan="2" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><div class="Table58" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table58" style="border-spacing: 0;empty-cells: show; width:12.591cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:3.147cm;"/><col style="width:3.149cm;"/></colgroup><tbody><tr><td class="Table58_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="P17">Label field</p></td><td class="Table58_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="P17">Mnemonic field</p></td><td class="Table58_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="P17">Operand field</p></td><td class="Table58_D1" style="vertical-align: top;  border:1.0px solid #000000;  padding:0.097cm; "><p class="P17">Comment</p></td></tr><tr><td class="Table58_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">START<br/>LOOP<br/><br/><br/><br/><br/><br/>STOP</p></td><td class="Table58_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">LDX<br/>LDAA<br/>ADDA<br/>STAA<br/>INX<br/>CPX<br/>BNE<br/>JMP</p></td><td class="Table58_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">#$0005<br/>$20,X<br/>$30,X<br/>$40,X<br/><br/>#$0015<br/>LOOP<br/>STOP</p></td><td class="Table58_D2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="P17"/></td></tr></tbody></table></div><p class="figure-caption-below" style="text-align:start; "><br/><b>Figure </b><b>11</b><b>.</b><b>2</b><b>:</b> </p><p class="P17">For questions 9<span class="spCh spChx2013">&#x2013;</span>14 refer to the program in figure 11.2.</p></td></tr><tr><td class="Table57_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="P12">9.</p></td><td class="Table57_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="P17">Analyse the program and determine what it does.</p></td></tr><tr><td class="Table57_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="P12">10.</p></td><td class="Table57_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="P17">Code the program into machine code with starting address 0010<sub>16</sub> and fill in the appropriate comments in the <span class="spCh spChx2018">&#x2018;</span>comment field<span class="spCh spChx2019">&#x2019;</span>.</p></td></tr></tbody></table></div><p/></td></tr><tr><td class="Table54_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p/></td><td class="Table54_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><div class="Table59" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table59" style="border-spacing: 0;empty-cells: show; width:12.591cm; border-collapse: collapse; "><colgroup><col style="width:0.706cm;"/><col style="width:11.885cm;"/></colgroup><tbody><tr><td class="Table59_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">11.</p></td><td class="Table59_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P17">On the first pass through the main program loop, the <span class="spCh spChx2018">&#x2018;</span>LDAA $20,X<span class="spCh spChx2019">&#x2019;</span> instruction takes into operand from memory</p><ol class="li-lower-alpha" style="list-style: lower-alpha;"><li><p>$0005</p></li><li><p>$0020</p></li><li><p>$0025</p></li><li><p>$0014</p></li></ol></td></tr><tr><td class="Table59_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">12.</p></td><td class="Table59_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p>On the first pass, the <span class="spCh spChx2018">&#x2018;</span>ADDA $30,X<span class="spCh spChx2019">&#x2019;</span> adds the contents of what memory location to Accumulator A?</p><ol class="li-lower-alpha" style="list-style: lower-alpha;"><li><p>$0005</p></li><li><p>$0030</p></li><li><p>$0035</p></li><li><p>$0016</p></li></ol></td></tr><tr><td class="Table59_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">13.</p></td><td class="Table59_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p>On the second pass through the program loop, the contents of memory location:</p><ol class="li-lower-alpha" style="list-style: lower-alpha;"><li><p>$0021 are added to the contents of $0031 and the result is stored in $0041.</p></li><li><p>$0026 are added to the contents of $0036 and the result is stored in $0046.</p></li><li><p>$0025 are added to the contents of $0035 and the result is stored in $0045.</p></li><li><p>$0020 are added to the contents of $0030 and the result is stored in $0040.</p></li></ol></td></tr><tr><td class="Table59_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">14.</p></td><td class="Table59_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p>How many times is the main program loop repeated?</p><ol class="li-lower-alpha" style="list-style: lower-alpha;"><li><p>10<sub>16</sub> times</p></li><li><p>05<sub>16</sub> times</p></li><li><p>30<sub>16</sub> times</p></li><li><p>15<sub>16</sub> times</p></li></ol></td></tr></tbody></table></div><p class="P12"/></td></tr></tbody></table></div><p/><div class="Table60" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table60 selfassessment" style="border-spacing: 0;empty-cells: show; break-after:auto; width:14.601cm; border-collapse: collapse; "><colgroup><col style="width:2.002cm;"/><col style="width:12.599cm;"/></colgroup><tbody><tr><td class="Table60_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p><a name="graphics30"><!-- --></a><img alt="graphics30" class="fr2" height="57" src="module11_files/74f1452e_57x57.jpg" style="border:0px; vertical-align: top" width="57"/></p></td><td class="Table60_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><h6><a id="id23" name="id23"><!--id23--></a>Activity 11.1 solutions </h6><ol class="lin" style="list-style: decimal;"><li><p>Add the contents of Accumulator A to the contents of Accumulator B; transfer the result to Accumulator A.</p></li><li><p>The C flag is set if a carry occurs; it is cleared otherwise.</p></li><li><p>No, the C flag is unaffected by the AND instruction.</p></li><li><p>The COM instruction replaces the operand with its 1<span class="spCh spChx2019">&#x2019;</span>s complement. The NEG instruction replaces the operand with its 2<span class="spCh spChx2019">&#x2019;</span>s complement.</p></li><li><p>With the ANDA instruction, the result of the AND operation is placed in Accumulator A. With the BITA instruction, the condition code registers are set according to the result but the result is not retained.</p></li><li><p>The decimal adjust instruction works only with the Accumulator&#xA0;A.</p></li><li><p>Carry (C).</p></li><li><p>A byte in memory can be: cleared, incremented, decremented, complemented, negated, rotated left, rotated right, shifted left arithmetically, shifted right arithmetically, shifted right logically, and tested.</p></li><li><p>With the SUBB instruction, a difference is produced and placed in Accumulator B. With CMPB, the flags are set as if a difference were produced, but the difference is not retained.</p></li><li><p>Complement, AND, inclusive OR, and exclusive OR.</p></li><li><p>The upper half of the index register is loaded from the specified memory location; the lower half from the byte following the specified memory location.</p></li><li><p>BGE, BGT, BLE, BLT.</p></li><li><p>BGT is used to test the result of subtracting two<span class="spCh spChx2019">&#x2019;</span>s complement numbers. BHI is used to test the result of subtracting unsigned numbers.</p></li><li><p>NOP</p></li><li><p>C, I and V</p></li><li><p>An unconditional branch instruction always causes a branch operation to occur. On the other hand, the conditional branch instruction implements a branch operation only if some specified condition is met.</p></li><li><p>The BMI instruction tests the Negative (N) bit of the Condition Code register to see if it is set.</p></li><li><p>Generally speaking, the N flag is set if the previous instruction left a 1 in the MSB of the accumulator.</p></li><li><p>Generally, the Z flag is set if the previous instruction left all zeros in the accumulator.</p></li><li><p>During an add operation, the carry bit is set if there is a carry from bit 7 of the accumulator.</p></li><li><p>During a subtract operation, the carry bit is set if bit 7 had to <span class="spCh spChx2018">&#x2018;</span>borrow<span class="spCh spChx2019">&#x2019;</span> a bit to complete the subtraction.</p></li><li><p>This condition results from a two<span class="spCh spChx2019">&#x2019;</span>s complement overflow. Thus, the V flag will be set if this condition occurs.</p></li></ol></td></tr><tr><td class="Table60_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p/></td><td class="Table60_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><div class="Table61" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table61" style="border-spacing: 0;empty-cells: show; width:12.591cm; border-collapse: collapse; "><colgroup><col style="width:0.773cm;"/><col style="width:11.818cm;"/></colgroup><tbody><tr><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">23.</p></td><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P17">The BEQ instruction causes a branch to occur only if the Z bit is set.</p></td></tr><tr><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">24.</p></td><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P17">The BPL instruction causes a branch to occur only if the N bit is clear.</p></td></tr><tr><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">25.</p></td><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P17">The carry flag.</p></td></tr><tr><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">26.</p></td><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P17">When the ADC instruction is executed, an additional 1 is added to the sum if the carry flag is set.</p></td></tr><tr><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">27.</p></td><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P17">When the SBC instruction is executed, an additional 1 is subtracted from the difference if the carry flag is set.</p></td></tr><tr><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">28.</p></td><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P17">Multiple-precision.</p></td></tr><tr><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">29.</p></td><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P17">The first ASLA instruction multiplies the number by two, giving 14<sub>10</sub>. The second ASLA doubles this number, giving 28<sub>10</sub>.</p></td></tr><tr><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">30.</p></td><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P17">a. <span class="spCh spChx2013">&#x2013;</span>&#xA0;&#xA0;The BRA instruction causes a branch anytime that it is executed.</p></td></tr><tr><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">31.</p></td><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P17">c. <span class="spCh spChx2013">&#x2013;</span>&#xA0;&#xA0;The address that follows a branch opcode is added to the program count to form the address of the next opcode to be executed.</p></td></tr><tr><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">32.</p></td><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P17">b. <span class="spCh spChx2013">&#x2013;</span>&#xA0;&#xA0;During the execution of the branch instruction, the program counter is advanced twice to B1<sub>16</sub>. Thus, when the relative address (<b>0F</b><b><sub>16</sub></b>) is added, the new address becomes <b>C0</b><b><sub>16</sub></b>.</p></td></tr><tr><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">33.</p></td><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P17">a. <span class="spCh spChx2013">&#x2013;</span>&#xA0;&#xA0;The execution of the branch instruction increments the program counter to 32<sub>16</sub>. When the relative address (EF<sub>16</sub>) is added, the new address becomes</p><div class="Table62" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table62" style="border-spacing: 0;empty-cells: show; width:11.624cm; border-collapse: collapse; "><colgroup><col style="width:2.469cm;"/><col style="width:1.014cm;"/><col style="width:1.498cm;"/><col style="width:1.501cm;"/><col style="width:2.492cm;"/><col style="width:0.988cm;"/><col style="width:1.662cm;"/></colgroup><tbody><tr><td style="vertical-align: top; "><p class="P12"/></td><td style="vertical-align: top; "><p class="P12"/></td><td style="vertical-align: top; "><p class="P12">0011</p></td><td style="vertical-align: top; "><p class="P12"/></td><td style="vertical-align: top; "><p class="P12">0010<sub>2</sub></p></td><td style="vertical-align: top; "><p class="P12"/></td><td style="vertical-align: top; "><p class="P12">32<sub>16</sub></p></td></tr><tr><td style="vertical-align: top; "><p class="P12"/></td><td style="vertical-align: top; "><p class="P12"/></td><td style="vertical-align: top; "><p class="P12">1110</p></td><td style="vertical-align: top; "><p class="P12"/></td><td style="vertical-align: top; "><p class="P12">1111<sub>2</sub></p></td><td style="vertical-align: top; "><p class="P12"/></td><td style="vertical-align: top; "><p class="P12">EF<sub>16</sub></p></td></tr><tr><td style="vertical-align: top; "><p class="P12"/></td><td style="vertical-align: top; "><p class="center">1</p></td><td style="vertical-align: top; "><p class="P12">0010</p></td><td style="vertical-align: top; "><p class="P12"/></td><td style="vertical-align: top; "><p class="P12">0001<sub>2</sub></p></td><td style="vertical-align: top; "><p class="center">1</p></td><td style="vertical-align: top; "><p class="P12">21<sub>16</sub></p></td></tr><tr><td style="vertical-align: top; "><p class="P12">Ignore Carry</p></td><td style="vertical-align: top; "><p class="center"><span class="spCh spChx2191">&#x2191;</span></p></td><td style="vertical-align: top; "><p class="P12"/></td><td style="vertical-align: top; "><p class="P12"/></td><td style="vertical-align: top; "><p class="P12">Ignore Carry</p></td><td style="vertical-align: top; "><p class="center"><span class="spCh spChx2191">&#x2191;</span></p></td><td style="vertical-align: top; "><p class="P12"/></td></tr></tbody></table></div><p class="P17"/></td></tr><tr><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">34.</p></td><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P17">d. <span class="spCh spChx2013">&#x2013;</span>&#xA0;&#xA0;The carry register performs all the functions listed.</p></td></tr><tr><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">35.</p></td><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p>b. <span class="spCh spChx2013">&#x2013;</span>&#xA0;&#xA0;The result of this addition is</p><div class="Table63" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table63" style="border-spacing: 0;empty-cells: show; margin-left:0.587cm; margin-right:6.054cm; width:4.983cm; border-collapse: collapse; "><colgroup><col style="width:2.492cm;"/><col style="width:2.491cm;"/></colgroup><tbody><tr><td class="Table63_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="P12">0101</p></td><td class="Table63_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="P12">1000<sub>2</sub></p></td></tr><tr><td class="Table63_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>0110</p></td><td class="Table63_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p>0011<sub>2</sub></p></td></tr><tr><td class="Table63_A3" style="vertical-align: top;  border:none;  padding:1.0px; "><p class="P12"><span style="text-decoration:underline; "><span class="underline"><span style="font-size:6pt; "><span class="T5">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></span></span></span></p></td><td class="Table63_A3" style="vertical-align: top;  border:none;  padding:1.0px; "><p class="P12"><span style="text-decoration:underline; "><span class="underline"><span style="font-size:6pt; "><span class="T5">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></span></span></span></p></td></tr><tr><td class="Table63_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="P12">1011</p></td><td class="Table63_A1" style="vertical-align: top;  border:none;  padding-bottom:0.101cm;  padding-left:1.0px;  padding-right:1.0px;  padding-top:0.101cm; "><p class="P12">1011<sub>2</sub></p></td></tr></tbody></table></div><p/><p class="P17">The C flag is cleared to 0 because there was no carry from bit 7. The N flag is set to 1 because bit 7 is 1. The V flag is set to 1 because, if you consider the numbers to be signed binary, the addition of two positive numbers resulted in a negative answer. The Z flag is cleared to 0 because the result is not zero.</p></td></tr><tr><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">36.</p></td><td class="Table61_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P17">c. <span class="spCh spChx2013">&#x2013;</span>&#xA0;&#xA0;The ADC instruction must be used when you are adding multiple-precision numbers.</p></td></tr></tbody></table></div><p/></td></tr></tbody></table></div><p/><p class="P8"/><div class="Table64" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table64 selfassessment" style="border-spacing: 0;empty-cells: show; width:14.601cm; border-collapse: collapse; "><colgroup><col style="width:2.002cm;"/><col style="width:12.599cm;"/></colgroup><tbody><tr><td class="Table64_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p><a name="graphics26"><!-- --></a><img alt="graphics26" class="fr2" height="57" src="module11_files/74f1452e_57x57.jpg" style="border:0px; vertical-align: top" width="57"/></p></td><td class="Table64_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><h6><a id="id24" name="id24"><!--id24--></a>Activity 11.2 solutions </h6><p/></td></tr><tr><td class="Table64_A1" colspan="2" style="vertical-align: top;  border:none;  padding:1.0px; "><div class="Table65" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table65" style="border-spacing: 0;empty-cells: show; width:14.601cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:2.007cm;"/><col style="width:1.984cm;"/><col style="width:2.006cm;"/><col style="width:1.984cm;"/><col style="width:2.028cm;"/><col style="width:4.591cm;"/></colgroup><tbody><tr><td class="Table65_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Address</p></td><td class="Table65_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Operation code</p></td><td class="Table65_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Label field</p></td><td class="Table65_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Mnemonic field</p></td><td class="Table65_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Operand field</p></td><td class="Table65_F1" style="vertical-align: top;  border:1.0px solid #000000;  padding:0.097cm; "><p>Comment field</p></td></tr><tr><td class="Table65_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">0010<br/>0011<br/>0012<br/>0013<br/>0014<br/>0015<br/>0016<br/>0017<br/>0018<br/>0019<br/>001A<br/>001B<br/>001C<br/>001D<br/>001E<br/>001E</p></td><td class="Table65_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">4F<br/>7D<br/>00<br/>20<br/>27<br/>07<br/>7A<br/>00<br/>20<br/>9B<br/>21<br/>20<br/>F4<br/>7E<br/>00<br/>1D</p></td><td class="Table65_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">START<br/>LOOP<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>STOP</p></td><td class="Table65_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">CLRA<br/>TST<br/><br/><br/>BEQ<br/><br/>DEC<br/><br/><br/>ADDA<br/><br/>BRA<br/><br/>JMP</p></td><td class="Table65_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center"><br/>$0020<br/><br/><br/>STOP<br/><br/>$0020<br/><br/><br/>$21<br/><br/>LOOP<br/><br/>STOP</p></td><td class="Table65_F2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p>Clear Accumulator A<br/>Test the Multiplier<br/><br/><br/>If it is zero STOP<br/><br/>Otherwise decrement the multiplier<br/><br/>Add the Multiplicand to the product<br/>Repeat the loop<br/><br/>STOP</p></td></tr><tr><td class="Table65_A3" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"/></td><td class="Table65_A3" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"/></td><td class="Table65_A3" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"/></td><td class="Table65_A3" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"/></td><td class="Table65_A3" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="center"/></td><td class="Table65_A3" style="vertical-align: top;  border:none;  padding:0.097cm; "><p/></td></tr></tbody></table></div></td></tr><tr><td class="Table64_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p/></td><td class="Table64_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><div class="Table68" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table68" style="border-spacing: 0;empty-cells: show; width:12.591cm; border-collapse: collapse; "><colgroup><col style="width:0.684cm;"/><col style="width:11.906cm;"/></colgroup><tbody><tr><td class="Table68_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">2.</p></td><td class="Table68_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P17">c. <span class="spCh spChx2013">&#x2013;</span>&#xA0;&#xA0;Extended.</p></td></tr><tr><td class="Table68_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">3.</p></td><td class="Table68_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P17">a. <span class="spCh spChx2013">&#x2013;</span>&#xA0;&#xA0;The BEQ instruction tests the Z flag.</p></td></tr><tr><td class="Table68_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">4.</p></td><td class="Table68_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P17">b. <span class="spCh spChx2013">&#x2013;</span>&#xA0;&#xA0;The DEC instruction decrements the number in memory location $0020.</p></td></tr><tr><td class="Table68_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">5.</p></td><td class="Table68_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P17">d. <span class="spCh spChx2013">&#x2013;</span>&#xA0;&#xA0;The relative address (F4) directs the program back to the TST instruction.</p></td></tr><tr><td class="Table68_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">6.</p></td><td class="Table68_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P17">b. <span class="spCh spChx2013">&#x2013;</span>&#xA0;&#xA0;The multiplier (05) is decremented on each pass until it reaches 00.<br/>Thus, the loop will be repeated five times.</p></td></tr><tr><td class="Table68_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">7.</p></td><td class="Table68_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P17">d. <span class="spCh spChx2013">&#x2013;</span>&#xA0;&#xA0;The multiplier is reduced to 00 as the program is executed.</p></td></tr><tr><td class="Table68_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">8.</p></td><td class="Table68_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P17">c. <span class="spCh spChx2013">&#x2013;</span>&#xA0;&#xA0;The product appears in Accumulator A.</p></td></tr><tr><td class="Table68_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P12">9.</p></td><td class="Table68_A1" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="P17">This program adds together the corresponding values of two equal sized tables and stores a result in a third table. The tables are stored as follows:</p></td></tr><tr><td class="Table68_A1" colspan="2" style="vertical-align: top;  border:none;  padding:0.097cm; "><p class="indent" style="margin-left:0cm; margin-right:0cm; text-indent:0cm; ">Table 1 is in locations 0025<sub>16</sub> to 0034<sub>16</sub></p><p>Table 2 is in locations 0035<sub>16</sub> to 0044<sub>16</sub></p><p>Table 3 (answers) is in locations 0045<sub>16  </sub>to 0054<sub>16</sub></p><p>LDAA $20,X takes a value from table 1 into ACCA<br/>ADDA $30,X adds the corresponding value from table 2 into Acc A<br/>STAA $40,X stores this value in table 3<br/>This procedure is then repeated 16<sub>10</sub> or 10<sub>16</sub> times.</p></td></tr></tbody></table></div><p><br/><br/></p></td></tr><tr><td class="Table64_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p/></td><td class="Table64_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p class="P12">10.</p></td></tr><tr><td class="Table64_A1" colspan="2" style="vertical-align: top;  border:none;  padding:1.0px; "><div class="Table67" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table67" style="border-spacing: 0;empty-cells: show; width:14.601cm; border-collapse: collapse; border: 1.0px solid #000000"><colgroup><col style="width:1.743cm;"/><col style="width:2.006cm;"/><col style="width:1.72cm;"/><col style="width:2.028cm;"/><col style="width:1.764cm;"/><col style="width:5.341cm;"/></colgroup><tbody><tr><td class="Table67_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Address</p></td><td class="Table67_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Operation code</p></td><td class="Table67_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Label field</p></td><td class="Table67_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Mnemonic field</p></td><td class="Table67_A1" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:1.0px solid #000000;  padding:0.097cm; "><p class="center">Operand field</p></td><td class="Table67_F1" style="vertical-align: top;  border:1.0px solid #000000;  padding:0.097cm; "><p class="P17">Comment field</p></td></tr><tr><td class="Table67_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">0010<br/>0011<br/>0012<br/>0013<br/>0014<br/>0015<br/>&#xA0;<br/>0016<br/>0017<br/>0018<br/>0019<br/>00lA<br/>001B<br/>001C<br/>001D<br/>001E<br/>001F<br/>0020<br/>0021</p></td><td class="Table67_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">CE<br/>00<br/>05<br/>A6<br/>20<br/>AB<br/>&#xA0;<br/>30<br/>A7<br/>40<br/>08<br/>8C<br/>00<br/>15<br/>26<br/>F4<br/>7E<br/>00<br/>1F</p></td><td class="Table67_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">START<br/>&#xA0;<br/>&#xA0;<br/>LOOP<br/>&#xA0;<br/>&#xA0;<br/>&#xA0;<br/>&#xA0;<br/>&#xA0;<br/>&#xA0;<br/>&#xA0;<br/>&#xA0;<br/>&#xA0;<br/>&#xA0;<br/>&#xA0;<br/>&#xA0;<br/>END</p></td><td class="Table67_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">LDX<br/>&#xA0;<br/>&#xA0;<br/>LDAA<br/>&#xA0;<br/>ADDA<br/>&#xA0;<br/>&#xA0;<br/>STAA<br/>&#xA0;<br/>INX<br/>CPX<br/>&#xA0;<br/>&#xA0;<br/>BNE<br/>&#xA0;<br/>JMP</p></td><td class="Table67_A2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:none;  border-top:none;  padding:0.097cm; "><p class="center">#$0005<br/>&#xA0;<br/>&#xA0;<br/>$20,X<br/>&#xA0;<br/>$30,X<br/>&#xA0;<br/>&#xA0;<br/>$40,X<br/>&#xA0;<br/>&#xA0;<br/>#$0015<br/>&#xA0;<br/>&#xA0;<br/>LOOP<br/>&#xA0;<br/>END</p></td><td class="Table67_F2" style="vertical-align: top;  border-bottom:1.0px solid #000000;  border-left:1.0px solid #000000;  border-right:1.0px solid #000000;  border-top:none;  padding:0.097cm; "><p class="P12">Set Index Register to $0005<br/>&#xA0;<br/>&#xA0;<br/>Load ACCA from Address M where M = $20 + XREG<br/>Add the contents of location <br/>($30 + XREG) into Acc A<br/>&#xA0;<br/>Store Acc A into the location<br/>($40 + XREG)<br/>increment&#xA0;XREG&#xA0;for&#xA0;next&#xA0;value<br/>Compare the index register<br/>to $0015<br/>&#xA0;<br/>If not equal to $0015. Go back to loop<br/>&#xA0;Yes <span class="spCh spChx2013">&#x2013;</span> STOP</p></td></tr></tbody></table></div><p/></td></tr><tr><td class="Table64_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><p/></td><td class="Table64_A1" style="vertical-align: top;  border:none;  padding:1.0px; "><div class="Table66" style="width: 100%; margin: 0px; padding: 0px; text-align:left;"><table class="Table66" style="border-spacing: 0;empty-cells: show; width:12.591cm; border-collapse: collapse; "><colgroup><col style="width:0.882cm;"/><col style="width:11.709cm;"/></colgroup><tbody><tr><td style="vertical-align: top; "><p class="P12">11.</p></td><td style="vertical-align: top; "><p class="P17">c. <span class="spCh spChx2013">&#x2013;</span>&#xA0;&#xA0;The Offset address ($20) is added to the number in the index register ($0005) to form an operand address of $0025.</p></td></tr><tr><td style="vertical-align: top; "><p class="P12">12.</p></td><td style="vertical-align: top; "><p class="P17">c. <span class="spCh spChx2013">&#x2013;</span>&#xA0;&#xA0;The contents of location $0035 are added to Accumulator A on the first pass through the loop.</p></td></tr><tr><td style="vertical-align: top; "><p class="P12">13.</p></td><td style="vertical-align: top; "><p class="P17">b. <span class="spCh spChx2013">&#x2013;</span>&#xA0;&#xA0;On the second pass, the contents of location $0026 are added to the contents of location $0036. The result is stored at $0046.</p></td></tr><tr><td style="vertical-align: top; "><p class="P12">14.</p></td><td style="vertical-align: top; "><p class="P17">a. <span class="spCh spChx2013">&#x2013;</span>&#xA0;&#xA0;The index register starts at $0005 and is incremented to $0015. Therefore, the loop is repeated 10<sub>16</sub> times.</p></td></tr></tbody></table></div><p/></td></tr></tbody></table></div><p/></body></html>
