Module 3 overview Boolean algebra and mapping techniques are essential tools in combinational logic design.  This can be seen in the following concept map. Combinational logic (concept map) Objectives At the completion of this module you will be able to: demonstrate a working knowledge of Boolean algebra by minimising logic equations understand mapping techniques and their use in minimising logic equations identify  ‘ Don ’ t Care ’  conditions and use them to minimise logic equations. 3.1 Boolean algebra In the mid 1800 ’ s, a mathematical proposition was presented which simplified and allowed manipulation of algebraic expressions. The presenter was an English mathematician named George  Boole  and the technique he developed was known as  Boolean Algebra . Its application to two-state (binary) switching circuits was proposed in 1938 by Claude  Shannon  at Massachusetts Institute of Technology. The terms  ‘ AND gate ’  and  ‘ OR gate ’  originated from Shannon ’ s paper. Boolean algebra provides a straight forward approach to the design and simplification of electronic switching systems. This of course leads to a reduction in the total number of gates required to implement a logical operation which in turn makes the final design more reliable, less complicated and therefore less expensive to produce. A Boolean  variable  (A) can have two possible values which can be indicated by a 0 or a 1. i.e.    A can equal 0 in some cases and A can equal 1 in others. A logic designer would always specify which of the above 2 conditions is being used for a particular design. The Boolean inverse of A is  .  The inverse of C is   etc. A Boolean  function  is an algebraic expression containing the variables in terms appropriate to a particular design. The variables may appear in the terms in either  true  (A) or  complement  ( ) form. The terms may appear in the function (or algebraic expression) in either the  ‘ product ’  form (ABC) or the  ‘ sum ’  form (A+B+C). Here of course the  ‘ product ’  form means logical AND and the  ‘ sum ’  form means logical OR. No other mathematical symbols are used in Boolean algebra. Two basic forms of Boolean functions are of special interest because of their common occurrence and symmetrical form. These are called  canonical  forms. They are: the product of sums (called  maxterm  form) the sum of products (called  minterm  form). In order for either form to be canonical,  all  variables involved must appear in  all  terms of the expression in either true or complement form. A  minterm  for three variables A, B and C is a  product  form such as:  A  maxterm  for the same three variables is a  sum  form such as:  For three variables there are eight possible combinations or terms. In minterm form we have:  . For four variables there are sixteen possible combinations etc. 3.1.1 Boolean operations Several relationships can be identified between Boolean variables. Using the  ‘ AND ’  function and letting A = 1 we may write: A  ∙  A = A i.e. 1 and 1 equals 1 etc. and Similarly letting A = 0, we may write: A  ∙  0 = 0 A  ∙  1 = A The same analysis applied to the  ‘ OR ’  function yields: A + A = A A + 0 = A A + 1 = 1 Two theorems are often used to assist in simplifying expressions. These are known as “ De Morgans ”  theorems. Notice how these expressions transform an OR function to an AND function and vice versa. From i. above we have: This is a very interesting and important property which has a good practical base. i.e. an OR gate can be used to perform an AND gate function as illustrated in module 2.4.4. When simplifying an expression using De Morgans theorems, the line to be broken is the one immediately above the sign. Lines crossing a bracket, or an implied bracket, must first be broken outside the bracket. Variables ANDed together have implied brackets around them. Implied brackets should be inserted to avoid mistakes.     AB and   have implied brackets around them so first break the line above the + symbol. The AND symbol is not required, but is implied. The lines above A B and   can now be broken  –  retain brackets. Remember, break the line change the sign. i.e.  Note: Double bars cancel, i.e.  3.1.2 Other properties and relationships Commutative A + B = B + A A  ∙  B = B  ∙  A Associative A + (B + C) = (A + B) + C A  ∙  (B  ∙  C) = (A  ∙  B)  ∙  C Distributive A + (B  ∙  C) = (A + B)  ∙  (A + C) A  ∙  (B + C) = (A  ∙  B) + (A  ∙  C) Other relationships which often occur in logic design are: Now let us consider an example using Boolean algebra to reduce an expression. 3.2 Mapping techniques Boolean expressions may be simplified using mapping techniques instead of algebra. This is a very powerful reduction technique resulting in minimal errors sometimes caused by mistakes in Boolean algebra application. The map generally used is called a  Karnaugh  map.  Consider the equation:   This is a 3 variable (A,B,C) problem so we would use a 3 variable Karnaugh map. Note the order of possible states of AB, i.e.   00  01  11  00 Placing the equation on the map involves the use of  ‘ 1 ’ s as entries on the map. After all terms have been entered on the map, entries are grouped together with loops, according to these basic rules: Grouping can only include adjacent entries. Grouping can only be horizontal or vertical. The map is considered continuous i.e. spherical. The number of entries grouped together  must  be a power of 2, and should be as large as possible. Entries may be included in more than one loop if necessary. So our example becomes: The variable B disappears from the term as the loop can ’ t have B and   present at once. The other map entry cannot be looped with anything else so it remains untouched. The reduced expression is then: Activity  3 . 1 Example 1 Simplify:  Note:  This is the same result as obtained by the mapping technique. Example 2       Example 3 Notes: You will see that to place the term ABC on a 4 variable map we will need 2 entries. The term BC will require 4 entries to specify on the map. The term ABCD which as all 4 variables present will only require 1 entry on the map. Also note if an entry is already present from a previous term, it is not necessary to duplicate it. Example 4 Simplify using Boolean algebra the following expression and check your answer with a map. (1) By Boolean Algebra: It can be seen that BC is common to the last two terms, and the expression can be rewritten: (2) By map: Mapping techniques can be superior! Example 5    A submarine is to have an automatic control system which will cause it to submerge if the wind speed is greater than 30 knots, the water speed is greater than 10 knots and if an unidentified surface ship appears within 20 miles. It will also submerge if an air target appears closer than 150 miles when the wind speed is greater than 30 knots and will also submerge if the water speed is less than 10 knots and an unidentified surface ship appears outside 20 miles range. It should also submerge if an air target appears outside 150 miles with an unidentified surface ship within 20 miles, the wind speed being greater than 30 knots and it should also submerge if manually instructed to do so. Design a logic system which will accept the defined inputs and produce the required single  “ submerge ”  output instruction. Hint: Define your own symbol table for all the required conditions. i.e. Let W  =  water speed greater than 10 knots etc. Note: The solution to this problem is given later. However you should not look at it until you have at least made a serious attempt at solving this problem yourself. 3.3 Implementation of a boolean expression using logic gates Implementation of the final boolean expression with logic gates is done backwards.  That is, commencing with the final gate rather than the first. Consider the expression  The output of the final gate will be the expression  To determine the inputs to the final gate we do the operation outside the brackets first. That is, an AND operation where one input to the AND gate is A and the other input is  . Note  –  A is an initial input, so this input is complete. To determine the intermediate gates you must undo the OR operation (inside the brackets) before the AND operation. Since, the output of the OR operation is  , one input to the OR gate is   and the other is  , as shown below. Finally, the   input is B inverted and the C  ∙  D  input is C AND D, as shown below. 3.4 Don ’ t care conditions In some logic systems certain input conditions may occur which may not affect the output. In other cases they may affect the output but it will have no effect on the system. If these input conditions occur we  ‘ don ’ t care ’  and the inputs are called  don ’ t cares . Consider a binary sequence for 4 variables: Count Inputs Output A B C D F 0 0 0 0 0 1 0 0 0 1 2 0 0 1 0 3 0 0 1 1 4 0 1 0 0 5 0 1 0 1 6 0 1 1 0 7 0 1 1 1 8 1 0 0 0 9 1 0 0 1 10 1 0 1 0 X 11 1 0 1 1 X 12 1 1 0 0 X 13 1 1 0 1 X 14 1 1 1 0 X 15 1 1 1 1 X As you can see for a decimal system (0-9) we only need some of the binary inputs as shown and their corresponding outputs, whether a logic one or zero.  The remaining inputs are not required and may be called  “ don't care ”  conditions.  It means we don't care if the inputs are a one or zero.  For that reason their outputs are given the symbol (X) in order that they may be distinguished on a Karnaugh Map. 3.4.1 Minimisation using maps with don ’ t care terms Don ’ t care conditions are chosen as either 1 or 0 depending on which choice gives the largest loop. However we do not try to loop as many or as few don ’ t cares as possible. i.e. Loops which contain  only  don ’ t cares should  not  be used. Activity  3 . 2 Minimise the following using the don ’ t cares as shown. Solutions to activity 3.2  Solution to activity 3.1, Example 5  Symbol table Let D = wind speed  >  30 knots W = water speed  >  10 knots S = unidentified surface ship  <  20 miles A = air target  <  150 miles M = manual dive Boolean expression Analysing the problem from the statement, the Boolean equation may be written from each sentence: Activity  3 . 3 Find complements of the following expressions then using DeMorgan ’ s laws simplify the expressions until DeMorgan ’ s laws cannot be applied further. Show that A  +  A   ∙   B  = A  by means of: Boolean algebra a truth table and implement the function with logic. Show that (A  +  B)   ∙   (A  +  C)  =  A  +  B   ∙    C  using boolean algebra and implement each side of the expression using logic. Given  minimise the expression,  (D  =  A  +  C) draw the logic diagram for the given equation, draw the reduced logic diagram. Write the expression for the output (y). 6. Write the logic expression for the output (s). 7. Refer to the ELE1301 course page on  ‘ Study Desk ’  and complete the following experiments: a. b. Home experiment 3-1  –  Boolean operations Home experiment 3-2  –  DeMorgan ’ s theorems. Solutions to activity 3.3  1. a. b.  implied brackets removed 2.  A + AB = A A(1 + B) = A A    = A 3. (A + B)(A + C)  AA + AC + BA + BC A + AC + BA + BC A(1 + C) + BA + BC A + BA + BC A(1+B) + BC A + BC = A + BC 4. A + C