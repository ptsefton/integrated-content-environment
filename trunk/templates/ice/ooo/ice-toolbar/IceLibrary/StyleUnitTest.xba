<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="StyleUnitTest" script:language="StarBasic">Rem  To Test the style&#x0d;
#Const MSWD = False&#x0d;
#Const OOO = Not MSWD&#x0d;
&#x0d;
Sub Test()&#x0d;
   Call testStyle&#x0d;
End Sub&#x0d;
&#x0d;
&#x0d;
Sub testStyle()&#x0d;
    Dim oTables, oTable&#x0d;
    Dim i&#x0d;
    Dim oTableCursor, oText&#x0d;
    Dim RowIndex, ColIndex&#x0d;
    Dim Rows, Cols&#x0d;
    Dim boo As Boolean&#x0d;
    Dim keywords As Variant&#x0d;
    &#x0d;
    errMsg = &quot;&quot;&#x0d;
    testmode = True&#x0d;
    setTestmode (True)&#x0d;
    &#x0d;
    &#x0d;
    #If OOO Then&#x0d;
        oTables = ThisComponent.getTextTables()&#x0d;
    &#x0d;
        If Not oTables.hasElements() Then&#x0d;
            MsgBox &quot;Cannot find the test tables. Use &apos;toolbat_test.odt&apos; file for Testing&quot;&#x0d;
            Exit Sub&#x0d;
        End If&#x0d;
        &#x0d;
    &#x0d;
        For i = 0 To oTables.getCount() - 1&#x0d;
            oTable = oTables.getByIndex(i)&#x0d;
            oPars = oTable.getCellByName(&quot;A1&quot;).GetText().createEnumeration()&#x0d;
            oOldSelection = ThisComponent.CurrentSelection&#x0d;
            Do While oPars.hasMoreElements()&#x0d;
                oPar = oPars.nextElement()&#x0d;
                Rem select the paragraph&#x0d;
                ThisComponent.CurrentController.Select (oPar)&#x0d;
                oVC = fnGetViewCursor&#x0d;
                If oPar.getString = &quot;&quot; Then&#x0d;
                    Exit Do&#x0d;
                End If&#x0d;
                &#x0d;
                keywords = Split(oPar.getString, &quot; &quot;)&#x0d;
                If LCase(keywords(0)) &lt;&gt; &quot;given&quot; And LCase(keywords(0)) &lt;&gt; &quot;test&quot; Then&#x0d;
                    If InStr(LCase(keywords(0)), &quot;given&quot;) &lt;&gt; 0 Then&#x0d;
                        pos = InStr(LCase(keywords(0)), &quot;given&quot;)&#x0d;
                    Else&#x0d;
                        pos = InStr(LCase(keywords(0)), &quot;test&quot;)&#x0d;
                    End If&#x0d;
                    pos = pos - 1&#x0d;
                    keywords(0) = Right(keywords(0), Len(keywords(0)) - pos)&#x0d;
                End If&#x0d;
                If LCase(keywords(0)) = &quot;given&quot; Then&#x0d;
                    If keywords(1) &lt;&gt; oPar.paraStyleName Then&#x0d;
                        Rem if the given statement doesnot have the style. then apply the style.&#x0d;
                        subSetParaStyleName(oVC, keywords(1))&#x0d;
                    End If&#x0d;
                End If&#x0d;
                &#x0d;
                If LCase(keywords(0)) = &quot;test&quot; Then&#x0d;
                    If keywords(1) &lt;&gt; oPar.paraStyleName Then&#x0d;
                        Rem if the test statement doesn&apos;t have the prestyle then apply it.&#x0d;
                        subSetParaStyleName(oVC, keywords(1))&#x0d;
                    End If&#x0d;
                    If processEvent(CStr(keywords(2)), CStr(Trim(keywords(3)))) Then&#x0d;
                        errMsg = fnGetErrMsg()&#x0d;
                        If CStr(keywords(3)) = oPar.paraStyleName Then&#x0d;
                                If errMsg &lt;&gt; &quot;&quot; Then&#x0d;
                                    message = &quot;RESULT: &quot; + &quot;PASSED with error Message shown &apos;&quot; + errMsg + &quot;&apos;&quot;&#x0d;
                                    errMsg = &quot;&quot;&#x0d;
                                Else&#x0d;
                                    message = &quot;RESULT: &quot; + &quot;PASSED&quot;&#x0d;
                                End If&#x0d;
                                &#x0d;
                            Else&#x0d;
                                If errMsg = &quot;&quot; Then&#x0d;
                                    message = &quot;RESULT: FAILED : Paragraph Style (&quot; + oPar.paraStyleName + &quot;) is not PosStyle : &quot; + keywords(3) + &quot;&apos;&quot;&#x0d;
                                Else&#x0d;
                                    message = &quot;RESULT: FAILED : Paragraph Style (&quot; + oPar.paraStyleName + &quot;) is not PosStyle : &quot; + keywords(3) + &quot;.&quot; + &quot;with error message &apos;&quot; + errMsg + &quot;&apos;&quot;&#x0d;
                                End If&#x0d;
                            End If&#x0d;
                        End If&#x0d;
                        Rem oVC.goToEndofParagraph(1,False)&#x0d;
                        printResult (message)&#x0d;
                        subSetErrMsg (&quot;&quot;)&#x0d;
                End If&#x0d;
            Loop&#x0d;
        Next&#x0d;
        &#x0d;
    #Else&#x0d;
        Selection.Bookmarks.Add (&quot;CurrentCursorPosition&quot;)&#x0d;
        If ActiveDocument.Tables.count = 0 Then&#x0d;
            MsgBox &quot;Cannot find the test tables. Use &apos;toolbat_test.doc&apos; file for Testing&quot;&#x0d;
            Exit Sub&#x0d;
        End If&#x0d;
         For i = 1 To ActiveDocument.Tables.count&#x0d;
         &#x0d;
            With ActiveDocument.Tables(i)&#x0d;
                For j = 1 To .Cell(1, 1).Range.Paragraphs.count&#x0d;
                    .Cell(1, 1).Range.Paragraphs(j).Range.Select&#x0d;
                    keywords = Split(CStr(.Cell(1, 1).Range.Paragraphs(j).Range.Text))&#x0d;
&#x0d;
                  &#x0d;
                    If LCase(keywords(0)) = &quot;given&quot; Then&#x0d;
                        If keywords(1) &lt;&gt; .Cell(1, 1).Range.Paragraphs(j).style Then&#x0d;
                            .Cell(1, 1).Range.Paragraphs(j).style = keywords(1)&#x0d;
                        End If&#x0d;
                        &#x0d;
                    End If&#x0d;
                    If LCase(keywords(0)) = &quot;test&quot; Then&#x0d;
                         keywords(3) = Left(keywords(3), Len(keywords(3)) - 1)&#x0d;
                        If StrComp(keywords(1), .Cell(1, 1).Range.Paragraphs(j).Format.style) &lt;&gt; 0 Then&#x0d;
                            Rem in case style is not the pre style&#x0d;
                            .Cell(1, 1).Range.Paragraphs(j).style = keywords(1)&#x0d;
                        End If&#x0d;
                        &#x0d;
                        &#x0d;
                        &#x0d;
                        If processEvent(CStr(keywords(2)), CStr(Trim(keywords(3)))) Then&#x0d;
                            Rem check the result style&#x0d;
                           &#x0d;
                           errMsg = fnGetErrMsg()&#x0d;
                           If StrComp(CStr(keywords(3)), Trim(.Cell(1, 1).Range.Paragraphs(j).style), vbTextCompare) = 0 Then&#x0d;
                            &#x0d;
                           Rem  If strCompare(CStr(Trim(Keywords(3))), .Cell(1, 1).Range.Paragraphs(j).style) Then&#x0d;
                                If errMsg &lt;&gt; &quot;&quot; Then&#x0d;
                                    message = &quot;RESULT: &quot; + &quot;PASSED with error Message shown &apos;&quot; + errMsg + &quot;&apos;&quot;&#x0d;
                                    errMsg = &quot;&quot;&#x0d;
                                Else&#x0d;
                                    message = &quot;RESULT: &quot; + &quot;PASSED&quot;&#x0d;
                                End If&#x0d;
                                &#x0d;
                            Else&#x0d;
                                If errMsg = &quot;&quot; Then&#x0d;
                                    message = &quot;RESULT: FAILED : Paragraph Style (&quot; + .Cell(1, 1).Range.Paragraphs(j).style + &quot;) is not PosStyle : &quot; + keywords(3) + &quot;&apos;&quot;&#x0d;
                                Else&#x0d;
                                    message = &quot;RESULT: FAILED : Paragraph Style (&quot; + .Cell(1, 1).Range.Paragraphs(j).style + &quot;) is not PosStyle : &quot; + &quot;.&quot; + &quot;with error message &apos;&quot; + errMsg + &quot;&apos;&quot;&#x0d;
                                End If&#x0d;
                            End If&#x0d;
                        End If&#x0d;
                         Selection.Collapse (wdCollapseEnd)&#x0d;
                        printResult (message)&#x0d;
                        subSetErrMsg (&quot;&quot;)&#x0d;
                    End If&#x0d;
                    &#x0d;
                    &#x0d;
                Next&#x0d;
           End With&#x0d;
        Next&#x0d;
      &#x0d;
       &#x0d;
        &#x0d;
        Rem reset the current position and then delete the bookmark&#x0d;
        If Selection.Bookmarks.Exists(&quot;CurrentCursorPosition&quot;) Then&#x0d;
            Selection.GoTo what:=wdGoToBookmark, Name:=&quot;CurrentCursorPosition&quot;&#x0d;
            ActiveDocument.Bookmarks(&quot;CurrentCursorPosition&quot;).Delete&#x0d;
        End If&#x0d;
    #End If&#x0d;
    &#x0d;
    setTestmode (False)&#x0d;
    MsgBox &quot;done testing&quot;&#x0d;
    Exit Sub&#x0d;
End Sub&#x0d;
&#x0d;
&#x0d;
Function processEvent(fnName As String, posStyle As String)&#x0d;
    Select Case fnName&#x0d;
        Case &quot;DemoteButton&quot;&#x0d;
            Call toolbar.eventDemoteButton&#x0d;
            processEvent = True&#x0d;
        Case &quot;PromoteButton&quot;&#x0d;
            Call toolbar.eventPromoteButton&#x0d;
            processEvent = True&#x0d;
        Case &quot;TitleButton&quot;&#x0d;
            Call toolbar.eventTitleButton&#x0d;
            processEvent = True&#x0d;
        Case &quot;HeadingButton&quot;&#x0d;
            Call toolbar.eventHeadingButton&#x0d;
            processEvent = True&#x0d;
        Case &quot;LeftAlignedButton&quot;&#x0d;
            Call toolbar.LeftAlignedParagraph&#x0d;
            processEvent = True&#x0d;
        Case &quot;IndentButton&quot;&#x0d;
            Call toolbar.IndentParagraph&#x0d;
            processEvent = True&#x0d;
        Case &quot;CenterAlignedButton&quot;&#x0d;
            Call toolbar.CenterAlignedParagraph&#x0d;
            processEvent = True&#x0d;
        Case &quot;RightAlignedButton&quot;&#x0d;
            Call toolbar.RightAlignedParagraph&#x0d;
            processEvent = True&#x0d;
        Case &quot;BlockQuoteButton&quot;&#x0d;
            Call toolbar.eventBlockQuoteButton&#x0d;
            processEvent = True&#x0d;
        Case &quot;DefinitionButton&quot;&#x0d;
            Call toolbar.Definition&#x0d;
            processEvent = True&#x0d;
        Case &quot;PreformattedButton&quot;&#x0d;
            Call toolbar.Preformatted&#x0d;
            processEvent = True&#x0d;
        Case &quot;BulletButton&quot;&#x0d;
            Call toolbar.eventBulletButton&#x0d;
            processEvent = True&#x0d;
        Case &quot;NumberiseButton&quot;&#x0d;
            Call toolbar.eventNumberiseButton&#x0d;
            processEvent = True&#x0d;
        Case Else&#x0d;
            #If MSWD Then&#x0d;
                Selection.Range.Collapse (wdCollapseEnd)&#x0d;
            #End If&#x0d;
            MsgBox fnName&#x0d;
            printResult (&quot;This function is not yet implemented&quot;)&#x0d;
            processEvent = False&#x0d;
    End Select&#x0d;
End Function&#x0d;
&#x0d;
&#x0d;
&#x0d;
Sub restore()&#x0d;
    Dim oTables As Object, oTable As Object&#x0d;
    Dim i As Integer&#x0d;
    Dim oText As Object&#x0d;
    Rem set the require field&#x0d;
    errMsg = &quot;&quot;&#x0d;
    &#x0d;
    setTestmode (True)&#x0d;
    #If OOO Then&#x0d;
        oTables = ThisComponent.getTextTables()&#x0d;
    &#x0d;
        If Not oTables.hasElements() Then&#x0d;
            If MsgBox(&quot;This document is not the test document.  This process will delete all paragraphs.  Are you sure you want to continue?&quot;, 4, &quot;ICE Warning&quot;) = 7 Then&#x0d;
                Exit Sub&#x0d;
            End If&#x0d;
        ElseIf oTables.getByIndex(0).Columns.count &lt;&gt; 1 Then&#x0d;
            If MsgBox(&quot;This document is not the test document.  This process will delete all paragraphs.  Are you sure you want to continue?&quot;, 4, &quot;ICE Warning&quot;) = 7 Then&#x0d;
                Exit Sub&#x0d;
            End If&#x0d;
        End If&#x0d;
&#x0d;
        For i = 0 To oTables.getCount() - 1&#x0d;
            oTable = oTables.getByIndex(i)&#x0d;
            oPars = oTable.getCellByName(&quot;A1&quot;).GetText().createEnumeration()&#x0d;
            oOldSelection = ThisComponent.CurrentSelection&#x0d;
            Do While oPars.hasMoreElements()&#x0d;
                oPar = oPars.nextElement()&#x0d;
                Rem select the paragraph&#x0d;
                ThisComponent.CurrentController.Select (oPar)&#x0d;
                oVC = fnGetViewCursor&#x0d;
&#x0d;
                If oPar.getString = &quot;&quot; Then&#x0d;
                    Exit Do&#x0d;
                End If&#x0d;
                &#x0d;
                keywords = Split(oPar.getString, &quot; &quot;)&#x0d;
&#x0d;
                &#x0d;
                If LCase(keywords(0)) = &quot;given&quot; Then&#x0d;
                    If keywords(1) &lt;&gt; oPar.paraStyleName Then&#x0d;
                        Rem if the given statement doesnot have the style. then apply the style.&#x0d;
                        subSetParaStyleName(oVC, keywords(1))&#x0d;
                    End If&#x0d;
                End If&#x0d;
                &#x0d;
                If LCase(keywords(0)) = &quot;test&quot; Then&#x0d;
                    If keywords(1) &lt;&gt; oPar.paraStyleName Then&#x0d;
                        Rem if the test statement doesn&apos;t have the prestyle then apply it.&#x0d;
                        subSetParaStyleName(oVC, keywords(1))&#x0d;
                    End If&#x0d;
                End If&#x0d;
                &#x0d;
                If LCase(keywords(0)) = &quot;result:&quot; Then&#x0d;
                    oCursor = oVC.GetText().createTextCursorByRange(oPar)&#x0d;
&#x0d;
                    oCursor.setString (&quot;here&quot;)&#x0d;
                    If oCursor.gotoPreviousParagraph(False) Then&#x0d;
                        oCursor.gotoEndOfParagraph (False)&#x0d;
                        oCursor.gotoNextParagraph (True)&#x0d;
                        oCursor.gotoEndOfParagraph (True)&#x0d;
                        oCursor.setString (&quot;&quot;)&#x0d;
                    End If&#x0d;
                End If&#x0d;
            Loop&#x0d;
        Next&#x0d;
        Call removeStylesResult&#x0d;
    #Else&#x0d;
        Selection.Bookmarks.Add (&quot;CurrentCursorPosition&quot;)&#x0d;
        If ActiveDocument.Tables.count = 0 Then&#x0d;
            MsgBox &quot;Cannot find the test tables. Use &apos;toolbat_test.doc&apos; file for Testing&quot;&#x0d;
            Exit Sub&#x0d;
        End If&#x0d;
         For i = 1 To ActiveDocument.Tables.count&#x0d;
            With ActiveDocument.Tables(i)&#x0d;
                For j = 1 To .Cell(1, 1).Range.Paragraphs.count&#x0d;
                    On Error Resume Next&#x0d;
                    With .Cell(1, 1).Range.Paragraphs(j)&#x0d;
                        .Range.Select&#x0d;
                      If InStr(.Range.Text, &quot;RESULT&quot;) &lt;&gt; 0 Then&#x0d;
                          .Range.Text = &quot;&quot;&#x0d;
                      Else&#x0d;
                          If .Range.Text &lt;&gt; &quot;&quot; Then&#x0d;
                            keywords = Split(CStr(.Range.Text))&#x0d;
                            If keywords(0) = &quot;GIVEN&quot; Or keywords(0) = &quot;TEST&quot; Then&#x0d;
                                If UBound(keywords) &gt; 1 Then&#x0d;
                                    .style = keywords(1)&#x0d;
                                Else&#x0d;
                                    .style = &quot;p&quot;&#x0d;
                                End If&#x0d;
                            End If&#x0d;
                        End If&#x0d;
                      End If&#x0d;
                       Selection.Collapse (wdCollapseEnd)&#x0d;
                       &#x0d;
                     End With&#x0d;
                Next&#x0d;
           End With&#x0d;
        Next&#x0d;
        On Error GoTo 0&#x0d;
       &#x0d;
        &#x0d;
        Rem reset the current position and then delete the bookmark&#x0d;
        If Selection.Bookmarks.Exists(&quot;CurrentCursorPosition&quot;) Then&#x0d;
            Selection.GoTo what:=wdGoToBookmark, Name:=&quot;CurrentCursorPosition&quot;&#x0d;
            ActiveDocument.Bookmarks(&quot;CurrentCursorPosition&quot;).Delete&#x0d;
        End If&#x0d;
    #End If&#x0d;
    setTestmode (False)&#x0d;
    MsgBox &quot;done restoring&quot;&#x0d;
    Exit Sub&#x0d;
&#x0d;
End Sub&#x0d;
&#x0d;
Sub removeStylesResult()&#x0d;
    Dim oPars As Object, oPar As Object&#x0d;
    Dim str As String&#x0d;
    Dim pos As Integer&#x0d;
    oOldSelection = ThisComponent.CurrentSelection&#x0d;
    oPars = ThisComponent.GetText().createEnumeration()&#x0d;
    Do While oPars.hasMoreElements()&#x0d;
        oPar = oPars.nextElement()&#x0d;
        Rem if paragraph is a text paragraph, then delete it.&#x0d;
        If oPar.supportsService(&quot;com.sun.star.text.Paragraph&quot;) Then&#x0d;
            oPar.setString (&quot;&quot;)&#x0d;
        End If&#x0d;
    Loop&#x0d;
&#x0d;
    Rem restore the selection. or deselect the paragraph&#x0d;
    ThisComponent.CurrentController.Select (oOldSelection)&#x0d;
&#x0d;
End Sub&#x0d;
</script:module>