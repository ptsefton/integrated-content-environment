<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="common" script:language="StarBasic">#Const MSWD = False&#x0d;
#Const OOO = Not MSWD&#x0d;
&#x0d;
Rem *********************************************************************&#x0d;
Rem    Copyright (C) 2006  Distance and e-Learning Centre,&#x0d;
Rem    University of Southern Queensland&#x0d;
Rem&#x0d;
Rem    This program is free software; you can redistribute it and/or modify&#x0d;
Rem    it under the terms of the GNU General Public License as published by&#x0d;
Rem    the Free Software Foundation; either version 2 of the License, or&#x0d;
Rem    (at your option) any later version.&#x0d;
Rem&#x0d;
Rem    This program is distributed in the hope that it will be useful,&#x0d;
Rem    but WITHOUT ANY WARRANTY; without even the implied warranty of&#x0d;
Rem    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#x0d;
Rem    GNU General Public License for more details.&#x0d;
Rem&#x0d;
Rem    You should have received a copy of the GNU General Public License&#x0d;
Rem    along with this program; if not, write to the Free Software&#x0d;
Rem    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA&#x0d;
Rem&#x0d;
Rem *********************************************************************&#x0d;
&#x0d;
Dim testmode As Boolean&#x0d;
&#x0d;
Function getOOoVersion()&#x0d;
Rem return ooo version number&#x0d;
#If OOO Then&#x0d;
    Dim aSettings, aConfigProvider&#x0d;
    Dim aParams2(0) As New com.sun.star.beans.PropertyValue&#x0d;
    &#x0d;
    aConfigProvider = createUnoService(&quot;com.sun.star.configuration.ConfigurationProvider&quot;)&#x0d;
    &#x0d;
    aParams2(0).Name = &quot;nodepath&quot;&#x0d;
    aParams2(0).value = &quot;/org.openoffice.Setup/Product&quot;&#x0d;
    &#x0d;
    aSettings = aConfigProvider.createInstanceWithArguments(&quot;com.sun.star.configuration.ConfigurationAccess&quot;, aParams2())&#x0d;
    getOOoVersion = aSettings.getByName(&quot;ooSetupVersion&quot;)&#x0d;
#End If&#x0d;
End Function&#x0d;
&#x0d;
Sub setTestmode(value As Boolean)&#x0d;
    Rem set testmode value&#x0d;
    Rem param : value(TRUE/False)&#x0d;
    testmode = value&#x0d;
End Sub&#x0d;
&#x0d;
Sub printMsgbox(message As String)&#x0d;
    Rem param : message&#x0d;
    Rem if testmode is false, then it is user mode&#x0d;
    Rem  if true, then it is testing mode&#x0d;
    If IsMissing(testmode) Then&#x0d;
        setTestmode (False)&#x0d;
    End If&#x0d;
    If testmode Then&#x0d;
        subSetErrMsg (message)&#x0d;
    Else&#x0d;
        MsgBox message, 0, &quot;ICE&quot;&#x0d;
    End If&#x0d;
End Sub&#x0d;
&#x0d;
Function fnMakeStyleName(sFamily, nLev, sTyp)&#x0d;
    Rem param: Family, Type as string, Level as Integer&#x0d;
    Rem return sStyleName&#x0d;
    sLev = Trim(str(nLev))&#x0d;
&#x0d;
    If sFamily = &quot;p&quot; Or sFamily = &quot;Title&quot; Then&#x0d;
&#x0d;
        If sTyp &lt;&gt; &quot;&quot; Then&#x0d;
            sLev = &quot;-&quot;&#x0d;
        Else&#x0d;
            sLev = &quot;&quot;&#x0d;
        End If&#x0d;
    End If&#x0d;
    fnMakeStyleName = sFamily + sLev + sTyp&#x0d;
End Function&#x0d;
&#x0d;
&#x0d;
Function fnGetType(sStyle)&#x0d;
    Rem param: styleName e.g p-center&#x0d;
    Rem Return subtype of a style, eg &quot;center&quot; for a p, or the flavour of a list&#x0d;
&#x0d;
    nTypestart = 1000&#x0d;
    Rem Sub-types of styles are indicated by anything following a number or &quot;-&quot; character&#x0d;
    For i = 1 To Len(sStyle)&#x0d;
        nLev = Mid(sStyle, i, 1)&#x0d;
        If InStr(&quot;-123456789&quot;, nLev) Then&#x0d;
            nTypestart = i + 1&#x0d;
        End If&#x0d;
    Next&#x0d;
&#x0d;
    If nTypestart &lt;= Len(sStyle) Then&#x0d;
        fnGetType = Mid(sStyle, nTypestart)&#x0d;
    Else&#x0d;
        fnGetType = &quot;&quot;&#x0d;
    End If&#x0d;
End Function&#x0d;
&#x0d;
&#x0d;
Function fnGetLevel(sStyle)&#x0d;
    Rem param: styleName e.g p-center&#x0d;
    Rem Find a digit: this will return the last one ICE styles are expected to only have one&#x0d;
    fnGetLevel = 0&#x0d;
    For i = 1 To Len(sStyle)&#x0d;
        nLev = Mid(sStyle, i, 1)&#x0d;
        If InStr(&quot;123456789&quot;, nLev) Then&#x0d;
            fnGetLevel = Int(nLev)&#x0d;
        End If&#x0d;
    Next&#x0d;
End Function&#x0d;
&#x0d;
&#x0d;
Function fnGetFamily(sStyle)&#x0d;
    Rem param: styleName e.g p-center&#x0d;
    Rem return styleFamily. e.g. p&#x0d;
    If Left(sStyle, 3) = &quot;pre&quot; Then&#x0d;
        fnGetFamily = &quot;pre&quot;&#x0d;
    ElseIf Left(sStyle, 2) = &quot;li&quot; Then&#x0d;
        fnGetFamily = &quot;li&quot;&#x0d;
    ElseIf Left(sStyle, 2) = &quot;dt&quot; Then&#x0d;
        fnGetFamily = &quot;dt&quot;&#x0d;
    ElseIf Left(sStyle, 2) = &quot;dd&quot; Then&#x0d;
        fnGetFamily = &quot;dd&quot;&#x0d;
    ElseIf Left(sStyle, 1) = &quot;h&quot; Then&#x0d;
        fnGetFamily = &quot;h&quot;&#x0d;
    ElseIf Left(sStyle, 2) = &quot;bq&quot; Then&#x0d;
        fnGetFamily = &quot;bq&quot;&#x0d;
    ElseIf Left(sStyle, 5) = &quot;Title&quot; Then&#x0d;
        fnGetFamily = &quot;Title&quot;&#x0d;
    ElseIf Left(sStyle, 1) = &quot;i&quot; Then&#x0d;
        fnGetFamily = &quot;i&quot;&#x0d;
    ElseIf Left(sStyle, 4) = &quot;xRef&quot; Then&#x0d;
        fnGetFamily = &quot;xRef&quot;&#x0d;
    Else&#x0d;
        fnGetFamily = &quot;p&quot;&#x0d;
    End If&#x0d;
End Function&#x0d;
&#x0d;
&#x0d;
Function fnHasStyle(sStyleName, Optional sStyleType As String) As Boolean&#x0d;
    Rem check if the style exist or not.&#x0d;
    Rem to reduce the processing time, I have intensionally get the error.&#x0d;
    Rem both word processor will give error if the style doesn&apos;t exist.&#x0d;
    Rem return True/False&#x0d;
    Dim oStyle&#x0d;
On Error GoTo NoStyle:&#x0d;
    If IsMissing(sStyleType) Then&#x0d;
        sStyleType = &quot;&quot;&#x0d;
    End If&#x0d;
    fnHasStyle = False&#x0d;
    If sStyleName = &quot;&quot; Then&#x0d;
        Exit Function&#x0d;
    End If&#x0d;
    #If OOO Then&#x0d;
        If sStyleType = &quot;&quot; Then&#x0d;
            Rem OOO must have sStyleType. Thus force it to have it.&#x0d;
            sFamily = fnGetFamily(sStyleName)&#x0d;
            If sFamily = &quot;i&quot; Or sFamily = &quot;xRef&quot; Then&#x0d;
                sStyleType = &quot;Character&quot;&#x0d;
            ElseIf sFamily = &quot;li&quot; Then&#x0d;
                hasNumStyle = False&#x0d;
                oStyles = ThisComponent.styleFamilies.getByName(&quot;NumberingStyles&quot;)&#x0d;
                hasNumStyle = oStyles.hasByName(sStyleName)&#x0d;
                If Not hasNumStyle Then&#x0d;
                    Exit Function&#x0d;
                End If&#x0d;
                sStyleType = &quot;Paragraph&quot;&#x0d;
            Else&#x0d;
                sStyleType = &quot;Paragraph&quot;&#x0d;
            End If&#x0d;
        End If&#x0d;
        oStyles = ThisComponent.styleFamilies.getByName(sStyleType + &quot;Styles&quot;)&#x0d;
        fnHasStyle = oStyles.hasByName(sStyleName)&#x0d;
    #Else&#x0d;
        If ActiveDocument.Styles(sStyleName).NameLocal = sStyleName Then&#x0d;
            fnHasStyle = True&#x0d;
        End If&#x0d;
&#x0d;
    #End If&#x0d;
    Exit Function&#x0d;
NoStyle:&#x0d;
    fnHasStyle = False&#x0d;
End Function&#x0d;
&#x0d;
Sub subSetupEscKeyHandler()&#x0d;
    #If MSWD Then&#x0d;
        CustomizationContext = NormalTemplate&#x0d;
        KeyBindings.Add KeyCode:=wdKeyEsc, KeyCategory:=wdKeyCategoryMacro, _&#x0d;
            Command:=&quot;subEventEscKey&quot;&#x0d;
    #Else&#x0d;
            Rem inspired by Geoffroy Piroux&apos;s macro&#x0d;
    &#x0d;
        Rem prepare config manager&#x0d;
        configSupplier = createUnoService(&quot;com.sun.star.ui.ModuleUIConfigurationManagerSupplier&quot;)&#x0d;
    &#x0d;
        Rem configure the shortcut manager&#x0d;
        ShortCutManager = configSupplier.getUIConfigurationManager(&quot;com.sun.star.text.TextDocument&quot;).getShortCutManager&#x0d;
    &#x0d;
        Rem define the key&#x0d;
        Dim Key As New com.sun.star.awt.KeyEvent&#x0d;
        Key.KeyCode = com.sun.star.awt.Key.ESCAPE&#x0d;
    &#x0d;
        Rem define the function&#x0d;
        cmdString = &quot;vnd.sun.star.script:IceLibrary.Toolbar.eventKeyControl?language=Basic&amp;location=application&quot;&#x0d;
    &#x0d;
        Rem set the shortcut key and store it&#x0d;
        ShortCutManager.setKeyEvent( Key, cmdString )&#x0d;
        ShortCutManager.store&#x0d;
    #End If&#x0d;
    MsgBox &quot;Done Assigning Shortcut.&quot;&#x0d;
End Sub&#x0d;
&#x0d;
&#x0d;
Function fnIsThereAFile()&#x0d;
    Rem to check if there is a document opened in MS word.&#x0d;
    Rem to remove the error if the user is using the toolbar when there is no document&#x0d;
    #If MSWD Then&#x0d;
        If Application.Documents.count = 0 Then&#x0d;
            MsgBox &quot;There is no document to perform this operation&quot;, vbCritical, &quot;ICE&quot;&#x0d;
            fnIsThereAFile = False&#x0d;
            Exit Function&#x0d;
        End If&#x0d;
        fnIsThereAFile = True&#x0d;
    #End If&#x0d;
End Function</script:module>