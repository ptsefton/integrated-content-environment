<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Publisher" script:language="StarBasic">#Const MSWD = False
#Const OOO = Not MSWD
Rem *********************************************************************
Rem    Copyright (C) 2006  Distance and e-Learning Centre,
Rem    University of Southern Queensland
Rem
Rem    This program is free software; you can redistribute it and/or modify
Rem    it under the terms of the GNU General Public License as published by
Rem    the Free Software Foundation; either version 2 of the License, or
Rem    (at your option) any later version.
Rem
Rem    This program is distributed in the hope that it will be useful,
Rem    but WITHOUT ANY WARRANTY; without even the implied warranty of
Rem    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
Rem    GNU General Public License for more details.
Rem
Rem    You should have received a copy of the GNU General Public License
Rem    along with this program; if not, write to the Free Software
Rem    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
Rem
Rem *********************************************************************
Global udg_oDialogConvert
Global udg_oDialogPublish
Dim OSType As Integer
Dim sIceLoc As String

Function fnDialogStartup()
    Dim sloc As String
    fnDialogStartup = True
    sloc = &quot;C:\Program Files\ICE 2\bin\Ice.exe&quot;
    If fnFileExists(sloc) Then
        Rem if 32bits window OS
        Call subSetOSType(1)
        Call subSetIceLoc(&quot;C:\Program Files\ICE 2&quot;)
    Else
        sloc = &quot;C:\Program Files (x86)\ICE 2\bin\Ice.exe&quot;
        If fnFileExists(sloc) Then
            Rem If 64bits Window OS
            Call subSetOSType(1)
            Call subSetIceLoc(&quot;C:\Program Files (x86)\ICE 2&quot;)
        Else
            sloc = Trim(Environ(&quot;ICE_HOME&quot;)) + &quot;bin\Ice.exe&quot;
            If fnFileExists(sloc) Then
                Rem if Window but ICE is installed in other place than ProgramFile. Check if this is the case.
                Call subSetOSType(1)
                Call subSetIceLoc(Trim(Environ(&quot;ICE_HOME&quot;)))
            Else
                sloc = &quot;/Applications/Ice2/Ice2.app/Contents/Resources/ice2.sh&quot;
                If fnFileExists(sloc) Then
                    Rem if Mac OS
                    Call subSetOSType(3)
                    Call subSetIceLoc(&quot;sh &quot; + sloc)
                Else
                    iceHome = Trim(Environ(&quot;ICE_HOME&quot;)) 
                    if Right(iceHome,1) =&quot;/&quot; or Right(iceHome,1) =&quot;\&quot; Then
                        iceHome = Left(iceHome,Len(iceHome)-1)
                    End if 
                    sloc = iceHome+ &quot;/ice.sh&quot;
                    If fnFileExists(sloc) Then
                        Rem if Ubuntu
                        Call subSetOSType(4)
                        Call subSetIceLoc(sloc)
                    Else
                        GoTo FileNotFound
                    End If
                End If
            End If
        End If
    End If
    Call subAddProperties
    Exit Function
FileNotFound:
    Call subSetIceLoc(&quot;&quot;)
    fnDialogStartup = False
    printMsgbox (&quot;Feature is unavailable for your operating system or ICE could not be found.&quot;)
End Function

Sub subAddProperties()
    #If OOO Then
        oDocInfo = ThisComponent.getDocumentInfo()
        If Not oDocInfo.PropertySetInfo.HasPropertyByName(&quot;chkTitle&quot;) Then
            oDocInfo.addProperty(&quot;chkTitle&quot;, 0, fnConvertToBoolean(1))
        End If
        If Not oDocInfo.PropertySetInfo.HasPropertyByName(&quot;chkTableOfContents&quot;) Then
            oDocInfo.addProperty(&quot;chkTableOfContents&quot;, 0, fnConvertToBoolean(0))
        End If
        If Not oDocInfo.PropertySetInfo.HasPropertyByName(&quot;chkPDF&quot;) Then
            oDocInfo.addProperty(&quot;chkPDF&quot;, 0, fnConvertToBoolean(0))
        End If
        If Not oDocInfo.PropertySetInfo.HasPropertyByName(&quot;filTemplate&quot;) Then
            oDocInfo.addProperty(&quot;filTemplate&quot;, 0, &quot;&quot;)
        End If
        If Not oDocInfo.PropertySetInfo.HasPropertyByName(&quot;filSaveDir&quot;) Then
            oDocInfo.addProperty(&quot;filSaveDir&quot;, 0, &quot;&quot;)
        End If
        If Not oDocInfo.PropertySetInfo.HasPropertyByName(&quot;txtTitle&quot;) Then
            oDocInfo.addProperty(&quot;txtTitle&quot;, 0, oDocInfo.Title)
        ElseIf fnGetDocProp(&quot;txtTitle&quot;) = &quot;&quot; Then
            subSetDocProp(&quot;txtTitle&quot;,oDocInfo.Title)
        End If
        If Not oDocInfo.PropertySetInfo.HasPropertyByName(&quot;txtSummary&quot;) Then
            oDocInfo.addProperty(&quot;txtSummary&quot;, 0, &quot;&quot;)
        End If
        If Not oDocInfo.PropertySetInfo.HasPropertyByName(&quot;txtAuthor&quot;) Then
            oDocInfo.addProperty(&quot;txtAuthor&quot;, 0, &quot;&quot;)
        End If
        If Not oDocInfo.PropertySetInfo.HasPropertyByName(&quot;txtAtomPubUrl&quot;) Then
            oDocInfo.addProperty(&quot;txtAtomPubUrl&quot;, 0, &quot;&quot;)
        End If
        If Not oDocInfo.PropertySetInfo.HasPropertyByName(&quot;txtCategories&quot;) Then
            oDocInfo.addProperty(&quot;txtCategories&quot;, 0, &quot;&quot;)
        End If
        If Not oDocInfo.PropertySetInfo.HasPropertyByName(&quot;optAuthType&quot;) Then
            oDocInfo.addProperty(&quot;optAuthType&quot;, 0, &quot;Basic&quot;)
        End If
        If Not oDocInfo.PropertySetInfo.HasPropertyByName(&quot;txtUsername&quot;) Then
            oDocInfo.addProperty(&quot;txtUsername&quot;, 0, &quot;&quot;)
        End If
        If Not oDocInfo.PropertySetInfo.HasPropertyByName(&quot;chkDraft&quot;) Then
            oDocInfo.addProperty(&quot;chkDraft&quot;, 0, fnConvertToBoolean(1))
        End If
        If Not oDocInfo.PropertySetInfo.HasPropertyByName(&quot;chkNewEntry&quot;) Then
            oDocInfo.addProperty(&quot;chkNewEntry&quot;, 0, fnConvertToBoolean(1))
        End If
    #Else
        On Error Resume Next
        ActiveDocument.CustomDocumentProperties.Add Name:=&quot;chkTitle&quot;, LinkToContent:=False, value:=True, Type:=msoPropertyTypeNumber
        ActiveDocument.CustomDocumentProperties.Add Name:=&quot;chkTableOfContents&quot;, LinkToContent:=False, value:=False, Type:=msoPropertyTypeNumber
        ActiveDocument.CustomDocumentProperties.Add Name:=&quot;chkPDF&quot;, LinkToContent:=False, value:=False, Type:=msoPropertyTypeNumber
        ActiveDocument.CustomDocumentProperties.Add Name:=&quot;filTemplate&quot;, LinkToContent:=False, value:=&quot;&quot;, Type:=msoPropertyTypeString
        ActiveDocument.CustomDocumentProperties.Add Name:=&quot;filSaveDir&quot;, LinkToContent:=False, value:=&quot;&quot;, Type:=msoPropertyTypeString
        ActiveDocument.CustomDocumentProperties.Add Name:=&quot;txtTitle&quot;, LinkToContent:=False, value:=&quot;&quot;, Type:=msoPropertyTypeString
        If fnGetDocProp(&quot;txtTitle&quot;) = &quot;&quot; Then
            Call subSetDocProp(&quot;txtTitle&quot;, ActiveDocument.BuiltInDocumentProperties(wdPropertyTitle))
        End If
        ActiveDocument.CustomDocumentProperties.Add Name:=&quot;txtAuthor&quot;, LinkToContent:=False, value:=&quot;&quot;, Type:=msoPropertyTypeString
        ActiveDocument.CustomDocumentProperties.Add Name:=&quot;txtSummary&quot;, LinkToContent:=False, value:=&quot;&quot;, Type:=msoPropertyTypeString
        ActiveDocument.CustomDocumentProperties.Add Name:=&quot;txtAtomPubUrl&quot;, LinkToContent:=False, value:=&quot;&quot;, Type:=msoPropertyTypeString
        ActiveDocument.CustomDocumentProperties.Add Name:=&quot;txtCategories&quot;, LinkToContent:=False, value:=&quot;&quot;, Type:=msoPropertyTypeString
        ActiveDocument.CustomDocumentProperties.Add Name:=&quot;optAuthType&quot;, LinkToContent:=False, value:=&quot;Basic&quot;, Type:=msoPropertyTypeString
        ActiveDocument.CustomDocumentProperties.Add Name:=&quot;txtUsername&quot;, LinkToContent:=False, value:=&quot;&quot;, Type:=msoPropertyTypeString
        ActiveDocument.CustomDocumentProperties.Add Name:=&quot;chkDraft&quot;, LinkToContent:=False, value:=True, Type:=msoPropertyTypeNumber
        ActiveDocument.CustomDocumentProperties.Add Name:=&quot;chkNewEntry&quot;, LinkToContent:=False, value:=True, Type:=msoPropertyTypeNumber
    #End If
End Sub

Function fnConvertToBoolean(value) As Boolean 
    Rem this should fix the conversion 
    fnConvertToBoolean = CBool(value) 
End Function 

Function fnConvertToInteger(value) As Integer 
    Dim intValue  As Integer 
    If VarType(value) = 11 Or VarType(value) = 2 Then 
        intValue = CInt(value) 
    Else 
        Rem if string 
        intValue = CInt(CBool(value)) 
    End If 
    If intValue &lt;&gt; 0 Then 
        intValue = 1 
    End If 
    fnConvertToInteger = intValue 
End Function 

Function fnConvertToString(value) As String 
    fnConvertToString = CStr(CBool(value)) 
End Function 

Sub PublishToBlog()
    #If MSWD Then
        If Not fnIsThereAFile() Then
            Exit Sub
        End If
    #End If
    Call subPublish
End Sub

Sub subPublish()
    If Not fnDialogStartup Then
        Exit Sub
    End If
    #If OOO Then
        DialogLibraries.LoadLibrary (&quot;IceLibrary&quot;)
        udg_oDialogPublish = CreateUnoDialog(DialogLibraries.IceLibrary.dlgPublish)
        Rem this is needed for preview
        udg_oDialogConvert = CreateUnoDialog(DialogLibraries.IceLibrary.dlgConvert)
    #Else
        Set udg_oDialogPublish = frmPublish
        Set udg_oDialogConvert = frmConvert
    #End If

    Call subSetDlgCtrlText(udg_oDialogPublish, &quot;txtTitle&quot;, fnGetDocProp(&quot;txtTitle&quot;))
    Call subSetDlgCtrlText(udg_oDialogPublish, &quot;txtAuthor&quot;, fnGetDocProp(&quot;txtAuthor&quot;))
    Call subSetDlgCtrlText(udg_oDialogPublish, &quot;txtSummary&quot;, fnGetDocProp(&quot;txtSummary&quot;))
    Call subSetDlgCtrlText(udg_oDialogPublish, &quot;txtAtomPubUrl&quot;, fnGetDocProp(&quot;txtAtomPubUrl&quot;))
    Call subSetDlgCtrlText(udg_oDialogPublish, &quot;txtCategories&quot;, fnGetDocProp(&quot;txtCategories&quot;))
    Call subSetDlgCtrlState(udg_oDialogPublish, &quot;opt&quot; + fnGetDocProp(&quot;optAuthType&quot;), 1)
    Call subSetDlgCtrlText(udg_oDialogPublish, &quot;txtUsername&quot;, fnGetDocProp(&quot;txtUsername&quot;))
    Call subSetDlgCtrlState(udg_oDialogPublish, &quot;chkDraft&quot;, fnConvertToInteger(fnGetDocProp(&quot;chkDraft&quot;)))
    Call subSetDlgCtrlState(udg_oDialogPublish, &quot;chkNewEntry&quot;, fnConvertToInteger(fnGetDocProp(&quot;chkNewEntry&quot;)))
    Call subSetDlgCtrlState(udg_oDialogConvert, &quot;chkPDF&quot;, fnConvertToInteger(fnGetDocProp(&quot;chkPDF&quot;)))
    If Not CheckFile Then
        Exit Sub
    End If
    proxyFile = subGetProxyFile
    If fnFileExists(proxyFile) Then
        Call subSetDlgCtrlText(udg_oDialogPublish, &quot;txtProxy&quot;, fnReadFile(proxyFile))
    End If

    subExecuteDialog (udg_oDialogPublish)

    If fnGetDlgCtrlText(udg_oDialogPublish, &quot;txtProxy&quot;) = &quot;&quot; Then
        subKill (proxyFile)
    Else
        Call fnWriteFile(proxyFile, fnGetDlgCtrlText(udg_oDialogPublish, &quot;txtProxy&quot;))
    End If

    Call subSetDocProp(&quot;txtTitle&quot;, fnGetDlgCtrlText(udg_oDialogPublish, &quot;txtTitle&quot;))
    Call subSetDocProp(&quot;txtAuthor&quot;, fnGetDlgCtrlText(udg_oDialogPublish, &quot;txtAuthor&quot;))
    Call subSetDocProp(&quot;txtSummary&quot;, fnGetDlgCtrlText(udg_oDialogPublish, &quot;txtSummary&quot;))
    Call subSetDocProp(&quot;txtAtomPubUrl&quot;, fnGetDlgCtrlText(udg_oDialogPublish, &quot;txtAtomPubUrl&quot;))
    Call subSetDocProp(&quot;txtCategories&quot;, fnGetDlgCtrlText(udg_oDialogPublish, &quot;txtCategories&quot;))
    Select Case True
    Case fnGetDlgCtrlState(udg_oDialogPublish, &quot;optNone&quot;)
        Call subSetDocProp(&quot;optAuthType&quot;, &quot;None&quot;)
    Case fnGetDlgCtrlState(udg_oDialogPublish, &quot;optBasic&quot;)
        Call subSetDocProp(&quot;optAuthType&quot;, &quot;Basic&quot;)
    Case fnGetDlgCtrlState(udg_oDialogPublish, &quot;optBlogger&quot;)
        Call subSetDocProp(&quot;optAuthType&quot;, &quot;Blogger&quot;)
    End Select
    Call subSetDocProp(&quot;txtUsername&quot;, fnGetDlgCtrlText(udg_oDialogPublish, &quot;txtUsername&quot;))
    Call subSetDocProp(&quot;chkDraft&quot;, fnConvertToBoolean(fnGetDlgCtrlState(udg_oDialogPublish, &quot;chkDraft&quot;)))
    Call subSetDocProp(&quot;chkNewEntry&quot;, fnConvertToBoolean(fnGetDlgCtrlState(udg_oDialogPublish, &quot;chkNewEntry&quot;)))
    Call subSetDocProp(&quot;chkPDF&quot;, fnConvertToBoolean(fnGetDlgCtrlState(udg_oDialogConvert, &quot;chkPDF&quot;)))
End Sub

Sub convertToHTML()
    #If MSWD Then
        If Not fnIsThereAFile() Then
            Exit Sub
        End If
    #End If
    Call subConvert
End Sub

Sub subConvert()
    If Not fnDialogStartup Then
        Exit Sub
    End If
    #If OOO Then
        DialogLibraries.LoadLibrary (&quot;IceLibrary&quot;)
        udg_oDialogConvert = CreateUnoDialog(DialogLibraries.IceLibrary.dlgConvert)
    #Else
        Set udg_oDialogConvert = frmConvert
    #End If

    Call subSetDlgCtrlState(udg_oDialogConvert, &quot;chkTitle&quot;, fnConvertToInteger(fnGetDocProp(&quot;chkTitle&quot;)))
    Call subSetDlgCtrlState(udg_oDialogConvert, &quot;chkTableOfContents&quot;, fnConvertToInteger(fnGetDocProp(&quot;chkTableOfContents&quot;)))
    Call subSetDlgCtrlState(udg_oDialogConvert, &quot;chkPDF&quot;, fnConvertToInteger(fnGetDocProp(&quot;chkPDF&quot;)))
    If Not CheckFile Then
        Exit Sub
    End If
    Call subSetDlgCtrlText(udg_oDialogConvert, &quot;filTemplate&quot;, fnGetDocProp(&quot;filTemplate&quot;))
    Call subSetDlgCtrlText(udg_oDialogConvert, &quot;filSaveDir&quot;, docName)

    subExecuteDialog (udg_oDialogConvert)

    Call subSetDocProp(&quot;chkTitle&quot;, fnConvertToBoolean(fnGetDlgCtrlState(udg_oDialogConvert, &quot;chkTitle&quot;)))
    Call subSetDocProp(&quot;chkTableOfContents&quot;, fnConvertToBoolean(fnGetDlgCtrlState(udg_oDialogConvert, &quot;chkTableOfContents&quot;)))
    Call subSetDocProp(&quot;chkPDF&quot;, fnConvertToBoolean(fnGetDlgCtrlState(udg_oDialogConvert, &quot;chkPDF&quot;)))
    Call subSetDocProp(&quot;filTemplate&quot;, fnGetDlgCtrlText(udg_oDialogConvert, &quot;filTemplate&quot;))
    Call subSetDocProp(&quot;filSaveDir&quot;, fnGetDlgCtrlText(udg_oDialogConvert, &quot;filSaveDir&quot;))
End Sub

Function CheckFile()
    docName = fnGetDocPath
    If docName = &quot;&quot; Then
        printMsgbox (&quot;Please save current document first&quot;)
        CheckFile = False
        Exit Function
    End If
    docName = fnGetDocName
    fileParts = Split(docName, &quot;.&quot;)
    If fileParts(UBound(fileParts)) &lt;&gt; &quot;odt&quot; And fileParts(UBound(fileParts)) &lt;&gt; &quot;doc&quot; And fileParts(UBound(fileParts)) &lt;&gt; &quot;docx&quot; Then
        printMsgbox (&quot;Cannot support this file extension&quot;)
        CheckFile = False
        Exit Function
    End If
    CheckFile = True
End Function
Sub subConvertExecute()
    #If MSWD Then
        Set udg_oDialogConvert = frmConvert
    #End If
    Call subExecute(udg_oDialogConvert, &quot;convert&quot;, False)
End Sub

Sub subConvertPreview()
    #If MSWD Then
        Set udg_oDialogConvert = frmConvert
    #End If
    Call subExecute(udg_oDialogConvert, &quot;convert&quot;, True)
End Sub

Sub subPublishExecute()
    #If MSWD Then
        Set udg_oDialogPublish = frmPublish
    #End If
    Call subExecute(udg_oDialogPublish, &quot;publish&quot;, False)
End Sub

Sub subPublishPreview()
    #If MSWD Then
        Set udg_oDialogPublish = frmPublish
    #End If
    Call subExecute(udg_oDialogPublish, &quot;publish&quot;, True)
End Sub

Sub subExecute(oDialog, mode, preview)
    docName = fnGetDocName
    tempDir = fnGetTempDir
    If docName = &quot;&quot; Then
        printMsgbox (&quot;Please save current document first&quot;)
        Exit Sub
    End If
    sIceLoc = fnGetIceLoc
    Select Case fnGetOSType
        Case 1
            iceCmd = &quot;C: &amp;&amp; cd &quot;&quot;&quot; + sIceLoc + &quot;&quot;&quot; &amp;&amp; bin\ice.exe&quot;
            Rem for testing purpose
            Rem iceCmd = &quot;C: &amp;&amp; cd &quot;&quot;C:\cynthia\workspace\ice\trunk\apps\ice&quot;&quot; &amp;&amp; python ice2.py&quot;
            s = &quot;\&quot;
        Case Else
            iceCmd = sIceLoc
            s = &quot;/&quot;
    End Select
    
    If fnGetOSType = 4 Then
        quote = &quot;&apos;&quot;
    Else
        quote = &quot;&quot;&quot;&quot;
    End If

    checkBoxBool = Array(&quot;False&quot;, &quot;True&quot;)

    If mode = &quot;publish&quot; Then
        includeTitle = &quot; -includetitle &quot; + checkBoxBool(0)
        includeToC = &quot; -toc &quot; + checkBoxBool(0)
        includePDF = &quot; -pdfLink &quot; + fnConvertToString(fnGetDlgCtrlState(oDialog, &quot;chkPDF&quot;))

        templateString = &quot;&lt;div&gt;&lt;div class=&apos;ins pdf-rendition-link&apos;&gt;&lt;/div&gt;&lt;div class=&apos;ins page-toc&apos;&gt;&lt;/div&gt;&lt;div class=&apos;ins body&apos;&gt;&lt;/div&gt;&lt;/div&gt;&quot;

        If fnGetOSType = 1 Then
            filTemplate = &quot; -templateString &quot; + quote + templateString + quote
        Else
            tempDir = fnGetTempDir
            tempFile = tempDir + &quot;/template.txt&quot;
            Call fnWriteFile(tempFile, templateString)
            filTemplate = &quot; -template &quot; + quote + tempFile + quote
        End If
        isDraft = fnConvertToBoolean(fnGetDlgCtrlState(oDialog, &quot;chkDraft&quot;))
        Draft = &quot; -draft &quot; + quote + fnConvertToString(isDraft) + quote
        newEntry = &quot; -new &quot; + quote + fnConvertToString(fnGetDlgCtrlState(oDialog, &quot;chkNewEntry&quot;)) + quote
        saveDir = tempDir

        Rem authType
        Select Case True
        Case fnGetDlgCtrlState(oDialog, &quot;optNone&quot;)
            authType = &quot; -authType None&quot;
        Case fnGetDlgCtrlState(oDialog, &quot;optBasic&quot;)
            authType = &quot; -authType Basic&quot;
        Case fnGetDlgCtrlState(oDialog, &quot;optBlogger&quot;)
            authType = &quot; -authType Blogger&quot;
        End Select

        Rem title
        If fnGetDlgCtrlText(oDialog, &quot;txtTitle&quot;) = &quot;&quot; Then
            Rem title is an internal variable name and will cause it to crash badly. therefore use txtTitle
            txtTitle = &quot;&quot;
            If Not preview Then
                subDispErr (&quot;Title&quot;)
                Exit Sub
            End If
        Else
            Dim Title As String
            Title = fnGetDlgCtrlText(oDialog, &quot;txtTitle&quot;)
            If InStr(Title, &quot;&apos;&quot;) Or InStr(Title, &quot;&quot;&quot;&quot;) Then
                Title = Replace(Title, &quot;&apos;&quot;, &quot;%27&quot;)
                Title = Replace(Title, &quot;&quot;&quot;&quot;, &quot;%22&quot;)
                Title = Replace(Title, &quot; &quot;, &quot;%20&quot;)
                txtTitle = &quot; -title &quot; + quote + quote + &quot; -urlencodedtitle &quot; + quote + Title + quote
            Else
                txtTitle = &quot; -title &quot; + quote + Title + quote
            End If
        End If

        Rem atomPubURL
        If fnGetDlgCtrlText(oDialog, &quot;txtAtomPubUrl&quot;) = &quot;&quot; Then
            atomPubUrl = &quot;&quot;
            If Not preview Then
                subDispErr (&quot;URL&quot;)
                Exit Sub
            End If
        Else
            Rem  for display later
            atomURL = fnGetDlgCtrlText(oDialog, &quot;txtAtomPubUrl&quot;)
            if Left(atomURL,4) &lt;&gt; &quot;http&quot; Then
                printMsgbox(&quot;URL is invalid. Please check again.&quot;) 
                Exit Sub
            End if
            atomPubUrl = &quot; -atomPubUrl &quot; + quote + atomURL + quote
        End If
        
        Rem Categories
        If fnGetDlgCtrlText(oDialog, &quot;txtCategories&quot;) = &quot;&quot; Then
            categories = &quot;&quot;
        Else
            categories = fnGetDlgCtrlText(oDialog, &quot;txtCategories&quot;)
            if Right(categories,1)=&quot;;&quot; Then
                categories = Left(categories,Len(categories)-1)
            End if 
            categories = &quot; -categories=&quot; + quote + categories + quote
        End If
        
        Rem username
        If fnGetDlgCtrlText(oDialog, &quot;txtUsername&quot;) = &quot;&quot; Then
            UserName = &quot;&quot;
            If Not (preview Or fnGetDlgCtrlState(oDialog, &quot;optNone&quot;)) Then
                subDispErr (&quot;Username&quot;)
                Exit Sub
            End If
        Else
            If fnGetOSType = 3 Then
               UserName = &quot; -username &quot; + fnGetDlgCtrlText(oDialog, &quot;txtUsername&quot;)
            Else
               UserName = &quot; -username &quot; + quote + fnGetDlgCtrlText(oDialog, &quot;txtUsername&quot;) + quote
            End If
        End If

        Rem password
        If fnGetDlgCtrlText(oDialog, &quot;txtPassword&quot;) = &quot;&quot; Then
            Password = &quot;&quot;
            If Not (preview Or fnGetDlgCtrlState(oDialog, &quot;optNone&quot;)) Then
                subDispErr (&quot;Password&quot;)
                Exit Sub
            End If
        Else
            If fnGetOSType = 3 Then
                Password = &quot; -password &quot; + fnGetDlgCtrlText(oDialog, &quot;txtPassword&quot;)
            Else
                Password = &quot; -password &quot; + quote + fnGetDlgCtrlText(oDialog, &quot;txtPassword&quot;) + quote
            End If
        End If

        Rem authorl
        If fnGetDlgCtrlText(oDialog, &quot;txtAuthor&quot;) = &quot;&quot; Then
            Author = &quot;&quot;
        Else
            Author = &quot; -author &quot; + quote + fnGetDlgCtrlText(oDialog, &quot;txtAuthor&quot;) + quote
        End If

        Rem summary
        If fnGetDlgCtrlText(oDialog, &quot;txtSummary&quot;) = &quot;&quot; Then
            summary = &quot;&quot;
        Else
            Dim varSummary As String
            varSummary = fnGetDlgCtrlText(oDialog, &quot;txtSummary&quot;)
            If InStr(varSummary, &quot;&apos;&quot;) Or InStr(varSummary, &quot;&quot;&quot;&quot;) Then
                varSummary = Replace(varSummary, &quot;&apos;&quot;, &quot;%27&quot;)
                varSummary = Replace(varSummary, &quot;&quot;&quot;&quot;, &quot;%22&quot;)
                varSummary = Replace(varSummary, &quot; &quot;, &quot;%20&quot;)
                summary = &quot; -summary &quot; + quote + quote + &quot; -urlencodedsummary &quot; + quote + varSummary + quote
            Else
                summary = &quot; -summary &quot; + quote + summary + quote
            End If
        End If


        Rem proxy
        If fnGetDlgCtrlText(oDialog, &quot;txtProxy&quot;) = &quot;&quot; Then
            proxyCmd = &quot;&quot;
        Else
            If fnGetOSType = 1 Then
                proxyCmd = &quot;set http_proxy=&quot; + fnGetDlgCtrlText(oDialog, &quot;txtProxy&quot;) + &quot; &amp;&amp; &quot;
            ElseIf fnGetOSType = 4 Then
                printMsgbox (&quot;Warning: Cannot set Proxy. Please set manually&quot;)
            Else
                REM mac does not like to set http_proxy so hopefully the ice will do so.
                REM proxyCmd = &quot;export http_proxy=&quot; + fnGetDlgCtrlText(oDialog, &quot;txtProxy&quot;) + &quot; &amp;&amp; &quot;
            End If
        End If
    Else
        Rem convert
        includeTitle = &quot; -includetitle &quot; + fnConvertToString(fnGetDlgCtrlState(oDialog, &quot;chkTitle&quot;))
        includeToC = &quot; -toc &quot; + fnConvertToString(fnGetDlgCtrlState(oDialog, &quot;chkTableOfContents&quot;))
        includePDF = &quot; -pdfLink &quot; + fnConvertToString(fnGetDlgCtrlState(oDialog, &quot;chkPDF&quot;))

        If fnGetDlgCtrlText(oDialog, &quot;filTemplate&quot;) = &quot;&quot; Then
            filTemplate = &quot;&quot;
        Else
            filTemplate = &quot; -template &quot;&quot;&quot; + fnGetDlgCtrlText(oDialog, &quot;filTemplate&quot;) + &quot;&quot;&quot;&quot;
        End If

        If fnGetDlgCtrlText(oDialog, &quot;filSaveDir&quot;) = &quot;&quot; Then
            Rem saveDir = docName
            saveDir = fnGetDocPath
        Else
            saveDir = fnGetDlgCtrlText(oDialog, &quot;filSaveDir&quot;)
        End If
        If Right(saveDir, 1) = &quot;/&quot; Or Right(saveDir, 1) = &quot;\&quot; Then
            Rem if window, then the &quot;/&quot; or &quot;\&quot; at the end causes the error .
            saveDir = Left(saveDir, Len(saveDir) - 1)
        End If
        If Not fnDirExists(saveDir) Then
            MsgBox fnDirExists(saveDir)
            printMsgbox (&quot;Output Location Directory is not found.&quot;)
            Exit Sub
        End If
        
    End If

    If preview Then
        saveDir = tempDir
    End If
    Rem  This is to keep the save path clean
    saveTempDir = saveDir
    
    REM to prevent the ice from deleting source document
    sourceLink = &quot; -sourceLink True&quot;

    docName = &quot; -f &quot; + quote + docName + quote
    saveDir = &quot; -d &quot; + quote + saveDir + quote
    openCmdString = &quot; -open&quot;
    cmdString = iceCmd + &quot; -convert&quot; + docName + saveDir + includeTitle + includeToC + includePDF + sourceLink + filTemplate
    If preview Then
        cmdString = cmdString + openCmdString
    ElseIf mode = &quot;publish&quot; Then
        If isDraft Then
            openCmdString = &quot;&quot;
        End If
        If fnGetOSType = 4 Then
            cmdString = iceCmd + &quot; -convert -atomConvertPub&quot; + docName + saveDir + includeTitle + includeToC + sourceLink +  includePDF + filTemplate + atomPubUrl + categories + txtTitle + authType + UserName + Password + Author + summary + Draft + newEntry + openCmdString
        Else
            cmdString = proxyCmd + iceCmd + &quot; -convert -atomConvertPub&quot; + docName + saveDir + includeTitle + sourceLink + includeToC + includePDF + filTemplate + atomPubUrl + categories + txtTitle + authType + UserName + Password + Author + summary + Draft + newEntry + openCmdString
        End If
    End If
    cmd = cmdString
    Rem execute the .bat files
    Select Case fnGetOSType
    Case 1:
        Rem window
        cmd = &quot;cmd /c &quot; + cmdString
    Case 3:
        Rem Mac
        cmd = cmdString
    Case 4:
        Rem Ubuntu
        cmd = &quot;gnome-terminal -e &quot;&quot;&quot; + cmdString + &quot;&quot;&quot; --working-directory=&quot;&quot;&quot; + Environ(&quot;ICE_HOME&quot;) + &quot;&quot;&quot;&quot;
    End Select
   
    If Not preview And mode = &quot;convert&quot; Then
        Select Case fnGetOSType
            Case 1:
                cmd = cmd + &quot; &amp;&amp; cd &quot;&quot;&quot; + saveTempDir + &quot;&quot;&quot; &amp;&amp; explorer .&quot;
            Case 3:
                cmdString = &quot;open &quot; + saveTempDir
                Shell(cmdString)
                Rem Todo find if the command can be added like windows
                REM open cannot be joined in Mac does not work with shell. 
            Case 4:
                REM Example command
                REM cmd = &quot;gnome-terminal -x bash -c &quot;&quot;/home/wongcyn/ice2/apps/ice/ice.sh -convert 
                REM -f &apos;/home/wongcyn/Desktop/Untitled 1.odt&apos; -d &apos;/home/wongcyn/Desktop&apos; -includetitle True -toc True
                REM  -pdfLink True; nautilus /home/wongcyn/Desktop;&quot;&quot;
                REM  -working-directory=&quot;&quot;/home/wongcyn/ice2/apps/ice&quot;&quot;&quot;
                cmd =&quot;gnome-terminal -x bash -c &quot;&quot;&quot;+ cmdString + &quot; ; nautilus &quot; + saveTempDir +  &quot;&quot;&quot; --working-directory=&quot;&quot;&quot; + Environ(&quot;ICE_HOME&quot;) + &quot;&quot;&quot;&quot;
        End Select
        
    End If
    Shell (cmd)
    Rem testing remove comment for the following lines
    Rem oVC = fnGetViewCursor
    Rem oVC.String = cmd
    Rem if word
    Rem Selection.Range.Text = cmd
End Sub

Rem ############ These are added for workaround for GetGuiType function for now. ############
Sub subSetIceLoc(loc As String)
    sIceLoc = loc
End Sub

Function fnGetIceLoc()
    fnGetIceLoc = sIceLoc
End Function

Sub subSetOSType(t As Integer)
    OSType = t
End Sub

Function fnGetOSType()
    Rem return the os type as follow
    Rem Windows = 1
    Rem Mac OS = 3
    Rem Ubuntu = 4
    If OSType &lt;&gt; 0 Then
        Rem OSType variable is the work around for the GetGuiType for now.
        Rem This variable is assumed to be set on the form loads.
        fnGetOSType = OSType
    Else
        Rem Just in Case the OSType is never set
        #If OOO Then
            Rem     The following GetGuiType is not working for Mac OSX. It is defected in the OOo code.
            Rem     See http://www.openoffice.org/issues/show_bug.cgi?id=95717 .
            Rem     Need to work around for now.
            fnGetOSType = GetGuiType
        #Else
            If InStr(Application.System.OperatingSystem, &quot;Windows&quot;) Then
               fnGetOSType = 1
            Else
               Rem this set the default as Mac.
               Rem I have assumed user will not use MS Word on Ubuntu.
               Rem of course if they are using WINE, then I am dead. :P.
               Rem thus to do. find out what word call Mac. in this variable.
               fnGetOSType = 3
            End If
        #End If
    End If
End Function
Rem #############################################################################
Function fnGetDocName()
    #If OOO Then
        fnGetDocName = ConvertFromURL(ThisComponent.URL)
    #Else
        fnGetDocName = ActiveDocument.FullName
    #End If
End Function

Function fnGetDocPath()
    #If OOO Then
        docName = fnGetDocName
        If docName &lt;&gt; &quot;&quot; Then
            For i = Len(docName) To 1 Step -1
                If InStr(&quot;/\&quot;, Mid(docName, i, 1)) Then
                    Exit For
                End If
            Next
            Rem  -1 to get rid of slash
            fnGetDocPath = Left(docName, i - 1)
        Else
            fnGetDocPath = &quot;&quot;
        End If
    #Else
        fnGetDocPath = ActiveDocument.Path
    #End If
End Function

Function fnGetTempDir()
    #If OOO Then
        fnGetTempDir = ConvertFromURL(createUnoService(&quot;com.sun.star.util.PathSettings&quot;).temp)
    #Else
        fnGetTempDir = CreateObject(&quot;Scripting.FileSystemObject&quot;).GetSpecialFolder(2)
    #End If
End Function

Function subGetProxyFile()
    #If OOO Then
        If fnGetOSType = 1 Then
            Rem the best path to use is storage since it is the most similar to the one we want.
            paths = createUnoService(&quot;com.sun.star.util.PathSettings&quot;)
            If Int(getOOoVersion()) = 2 Then
                Rem go up to common folder and back down to ice folder
                subGetProxyFile = ConvertFromURL(Left(paths.Storage, InStr(paths.Storage, &quot;/OpenOffice.org2/user/store&quot;))) + &quot;Ice\http_proxy.txt&quot;
            Else
                Rem go up to common folder and back down to ice folder
                subGetProxyFile = ConvertFromURL(Left(paths.Storage, InStr(paths.Storage, &quot;/OpenOffice.org/3/user/store&quot;))) + &quot;Ice\http_proxy.txt&quot;
            End If
        Else
           Rem  don&apos;t know why sam put this. will have to check later.
           Rem  subGetProxyFile = &quot;/Users/knipes/Ice/http_proxy.txt&quot;
           Rem do nothing at the moment
        End If
    #Else
        If fnGetOSType = 1 Then
            Rem sTempFilePath = Options.DefaultFilePath(wdTempFilePath)
            Rem subGetProxyFile = Left(sTempFilePath, InStr(sTempFilePath, &quot;\locals~1\temp&quot;)) + &quot;Applic~1\Ice\http_proxy.txt&quot;
            If Right(Environ(&quot;USERPROFILE&quot;), 1) &lt;&gt; &quot;/&quot; Or Right(Environ(&quot;USERPROFILE&quot;), 1) &lt;&gt; &quot;\&quot; Then
                subGetProxyFile = Environ(&quot;USERPROFILE&quot;) + &quot;\Applic~1\Ice\http_proxy.txt&quot;
            Else
                subGetProxyFile = Environ(&quot;USERPROFILE&quot;) + &quot;Applic~1\Ice\http_proxy.txt&quot;
            End If
        Else
            Rem Don&apos;t do anything
        End If
    #End If
End Function

Function fnDirExists(sDirName)
    #If OOO Then
        
    #Else
        If (GetAttr(sDirName) And vbDirectory) = vbDirectory Then
            Rem Check if directory
            fnDirExists = True
        Else
            fnDirExists = False
        End If
    #End If
End Function


Function fnFileExists(sFileName)
    #If OOO Then
        fnFileExists = createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;).Exists(ConvertToURL(sFileName))
    #Else
        fnFileExists = CreateObject(&quot;Scripting.FileSystemObject&quot;).FileExists(sFileName)
    #End If
End Function



Sub subKill(sFileName)
    If fnFileExists(sFileName) Then
        #If OOO Then
            createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;).Kill (ConvertToURL(sFileName))
        #Else
            Call CreateObject(&quot;Scripting.FileSystemObject&quot;).DeleteFile(sFileName, True)
        #End If
    End If
End Sub


Function fnReadFile(sFileName)
    If Not fnFileExists(sFileName) Then
        Rem something&apos;s not right, we can&apos;t open a file that doesn&apos;t exist
        Exit Function
    End If
    #If OOO Then
        oInputStream = createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;).openFileRead(ConvertToURL(sFileName))
        sFileContents = FileReadString(oInputStream)
        oInputStream.closeInput
    #Else
        If fnFileExists(sFileName) Then
            With CreateObject(&quot;Scripting.FileSystemObject&quot;).GetFile(sFileName).OpenAsTextStream(1, TristateUseDefault)
                sFileContents = .ReadAll
                .Close
            End With
        Else
            sFileContents = &quot;&quot;
        End If
    #End If
    fnReadFile = sFileContents
End Function


Function fnWriteFile(sFileName, sFileContents, Optional bKillFile)
    If IsMissing(bKillFile) Then
        bKillFile = True
    End If
    If bKillFile Then
        subKill (sFileName)
    End If
    #If OOO Then
        On Error Resume Next
        oOutputStream = createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;).openFileWrite(ConvertToURL(sFileName))
        FileWriteString(oOutputStream, sFileContents)
        oOutputStream.closeOutput
    #Else
        With CreateObject(&quot;Scripting.FileSystemObject&quot;).CreateTextFile(sFileName, bKillFile)
            .Write (sFileContents)
            .Close
        End With
    #End If
    fnWriteFile = sFileName
End Function


Sub FileWriteString(oOS, ByVal cString As String)
    #If OOO Then
        oOutputStream = oOS
        Rem Convert the string into an array of bytes.
        aBytesToWrite = StringToByteArray(cString)

        Rem Write the bytes to the output file.
        oOutputStream.writeBytes (aBytesToWrite)
    #End If
End Sub


Function StringToByteArray(ByVal cString As String)
    nNumBytes = Len(cString)
    If nNumBytes = 0 Then
        StringToByteArray() = 0
        Exit Function
    End If
    Rem ToDo: Resolve error on OS X
    Rem On Error Resume Next
    Dim aBytes(nNumBytes - 1) As Integer
    For i = 1 To nNumBytes
        cChar = Mid(cString, i, 1)
        nByte = Asc(cChar)
        nByte = IntegerToByte(nByte)
        aBytes(i - 1) = nByte
    Next
    StringToByteArray() = aBytes()
End Function

Function IntegerToByte(ByVal nByte As Integer) As Integer
    If nByte &gt; 127 Then
        nByte = nByte - 256
    End If
    IntegerToByte = nByte
End Function

Function FileReadString(oIS, Optional nNumBytesToRead As Integer) As String
    #If OOO Then
        oInputStream = oIS
        aBytesToRead = Array()
        If IsMissing(nNumBytesToRead) Then
            nNumBytesToRead = oInputStream.Length()
        End If
        Rem  Read the bytes from the output file.
        oInputStream.readBytes(aBytesToRead, nNumBytesToRead)
        Rem Return the array of bytes as a string.
        FileReadString = ByteArrayToString(aBytesToRead)
    #End If
End Function

Function ByteArrayToString(aByteArray)
    cBytes = &quot;&quot;
    For i = LBound(aByteArray) To UBound(aByteArray)
        nByte = aByteArray(i)
        nByte = ByteToInteger(nByte)
        cBytes = cBytes + Chr(nByte)
    Next i
    ByteArrayToString() = cBytes
End Function

Function ByteToInteger(ByVal nByte As Integer) As Integer
    If nByte &lt; 0 Then
        nByte = nByte + 256
    End If
    ByteToInteger() = nByte
End Function

Sub subDispErr(sMissingInfo)
    printMsgbox (&quot;Please fill in the &quot; + sMissingInfo + &quot; field.&quot;)
End Sub

Sub subViewLog()
    tempDir = fnGetTempDir
    If fnGetOSType = 1 Then
        s = &quot;\&quot;
        sLogCmd = &quot;notepad &quot;
    ElseIf fnGetOSType = 4 Then
        s = &quot;/&quot;
        sLogCmd = &quot;gedit &quot;
    Else
        s = &quot;/&quot;
        sLogCmd = &quot;open &quot;
    End If
    cmdString = sLogCmd + tempDir + s + &quot;ice.log&quot;
    Shell (cmdString)
End Sub

Function fnGetDocProp(sPropertyName)
    #If OOO Then
        fnGetDocProp = ThisComponent.getDocumentInfo().getPropertyValue(sPropertyName)
    #Else
        fnGetDocProp = ActiveDocument.CustomDocumentProperties(sPropertyName)
    #End If
End Function

Function convertToSuitableType(vVarType, vValue)
Rem vbEmpty     0   Empty (Empty: The state of an uninitialized Variant variable (which returns a VarType of 0). Not to be confused with Null (a variable state indicating invalid data), variables with zero-length strings (&quot; &quot;), or numeric variables equal zero.)  (uninitialized)
Rem vbNull  1   Null (Null: A value you can enter in a field or use in expressions or queries to indicate missing or unknown data. In Visual Basic, the Null keyword indicates a Null value. Some fields, such as primary key fields, can&apos;t contain Null.) (no valid data)
Rem vbInteger   2   Integer
Rem vbLong  3   Long integer
Rem vbSingle    4   Single-precision floating-point number
Rem vbDouble    5   Double-precision floating-point number
Rem vbCurrency  6   Currency value
Rem vbDate  7   Date value
Rem vbString    8   String
Rem vbObject    9   Object
Rem vbError     10  Error value
Rem vbBoolean   11  Boolean value
Rem vbVariant   12  Variant (used only with arrays (array: A variable that contains a finite number of elements that have a common name and data type. Each element of an array is identified by a unique index number. Changes made to one element of an array don&apos;t affect the other elements.) of variants)
Rem vbDataObject    13  A data access object
Rem vbDecimal   14  Decimal value
Rem vbByte  17  Byte value
Rem vbUserDefinedType   36  Variants that contain user-defined types
Rem vbArray     8192    Array

    If vVarType = 2 Then
        convertToSuitableType = CInt(vValue)
    ElseIf vVarType = 3 Then
        convertToSuitableType = CLng(vValue)
    ElseIf vVarType = 5 Then
        convertToSuitableType = CDbl(vValue)
    ElseIf vVarType = 8 Then
        convertToSuitableType = CStr(vValue)
    ElseIf vVarType = 11 Then
        convertToSuitableType = CBool(vValue)
    Else
        convertToSuitableType = &quot;Error in storing the form data: Unsupported Data Type. This will cause the lost of form data&quot;
    End If
End Function

Sub subSetDocProp(sPropertyName, vNewValue)
    #If OOO Then
        On Error GoTo wrongType
        thisComponent.getDocumentInfo().setPropertyValue(sPropertyName, vNewValue)
        Exit Sub
wrongType:
        Rem fix the wrong type error
        value = convertToSuitableType(VarType(fnGetDocProp(sPropertyName)), vNewValue)
        On Error GoTo otherError
        If VarType(value) &lt;&gt; 8 Then
            thisComponent.getDocumentInfo().setPropertyValue(sPropertyName, value)
        Else
            If InStr(value, &quot;Error in storing the form data:&quot;) = 0 Then
                thisComponent.getDocumentInfo().setPropertyValue(sPropertyName, value)
            End If
        End If
        Exit Sub
otherError:
        Rem This is for the last solution for the error. Hope there is no more error
        ThisComponent.getDocumentInfo().removeProperty (sPropertyName)
        thisComponent.getDocumentInfo().addProperty(sPropertyName, 0,vNewValue)
    #Else
        ActiveDocument.CustomDocumentProperties(sPropertyName) = vNewValue
    #End If
End Sub

Function fnGetDlgCtrlText(oDialog, sControlName)
On Error GoTo noData
    #If OOO Then
        fnGetDlgCtrlText = oDialog.getControl(sControlName).GetText
    #Else
        Select Case sControlName
        Case &quot;filTemplate&quot;
            fnGetDlgCtrlText = oDialog.filTemplate
        Case &quot;filSaveDir&quot;
            fnGetDlgCtrlText = oDialog.filSaveDir
        Case &quot;txtTitle&quot;
            fnGetDlgCtrlText = oDialog.txtTitle
        Case &quot;txtAuthor&quot;
            fnGetDlgCtrlText = oDialog.txtAuthor
        Case &quot;txtSummary&quot;
            fnGetDlgCtrlText = oDialog.txtSummary
        Case &quot;txtAtomPubUrl&quot;
            fnGetDlgCtrlText = oDialog.txtAtomPubUrl
        Case &quot;txtUsername&quot;
            fnGetDlgCtrlText = oDialog.txtUsername
        Case &quot;txtPassword&quot;
            fnGetDlgCtrlText = oDialog.txtPassword
        Case &quot;txtProxy&quot;
            fnGetDlgCtrlText = oDialog.txtProxy
        Case &quot;txtCategories&quot;
            fnGetDlgCtrlText = oDialog.txtCategories
        End Select
        Exit Function
noData:
        fnGetDlgCtrlText = &quot;&quot;
    #End If
End Function

Function fnGetDlgCtrlState(ByVal oDialog, sControlName)
On Error GoTo noData
    #If OOO Then
        fnGetDlgCtrlState = oDialog.getControl(sControlName).GetState
    #Else
        Select Case sControlName
        Case &quot;chkTitle&quot;
            fnGetDlgCtrlState = oDialog.chkTitle
        Case &quot;chkTableOfContents&quot;
            fnGetDlgCtrlState = oDialog.chkTableOfContents
        Case &quot;chkPDF&quot;
            fnGetDlgCtrlState = oDialog.chkPDF
        Case &quot;optNone&quot;
            fnGetDlgCtrlState = oDialog.optNone
        Case &quot;optBasic&quot;
            fnGetDlgCtrlState = oDialog.optBasic
        Case &quot;optBlogger&quot;
            fnGetDlgCtrlState = oDialog.optBlogger
        Case &quot;chkDraft&quot;
            fnGetDlgCtrlState = oDialog.chkDraft
        Case &quot;chkNewEntry&quot;
            fnGetDlgCtrlState = oDialog.chkNewEntry
        End Select
        If fnGetDlgCtrlState &lt;&gt; 0 Then
            fnGetDlgCtrlState = 1
        End If
        Exit Function
noData:
        fnGetDlgCtrlState = 1
    #End If
End Function

Sub subSetDlgCtrlText(oDialog, sControlName, sNewText)
    #If OOO Then
        oDialog.getControl(sControlName).SetText (sNewText)
    #Else
        Select Case sControlName
        Case &quot;filTemplate&quot;
            oDialog.filTemplate = sNewText
        Case &quot;filSaveDir&quot;
            oDialog.filSaveDir = sNewText
        Case &quot;txtTitle&quot;
            oDialog.txtTitle = sNewText
        Case &quot;txtAuthor&quot;
            oDialog.txtAuthor = sNewText
        Case &quot;txtSummary&quot;
            oDialog.txtSummary = sNewText
        Case &quot;txtAtomPubUrl&quot;
            oDialog.txtAtomPubUrl = sNewText
        Case &quot;txtUsername&quot;
            oDialog.txtUsername = sNewText
        Case &quot;txtPassword&quot;
            oDialog.txtPassword = sNewText
        Case &quot;txtProxy&quot;
            oDialog.txtProxy = sNewText
        Case &quot;txtCategories&quot;
            oDialog.txtCategories = sNewText
        End Select
    #End If
End Sub

Sub subSetDlgCtrlState(oDialog, sControlName, bNewState)
    #If OOO Then
        oDialog.getControl(sControlName).SetState (bNewState)
    #Else
        If bNewState &lt;&gt; 0 Then
            bNewState = True
        End If
        Select Case sControlName
        Case &quot;chkTitle&quot;
            oDialog.chkTitle = bNewState
        Case &quot;chkTableOfContents&quot;
            oDialog.chkTableOfContents = bNewState
        Case &quot;chkPDF&quot;
            oDialog.chkPDF = bNewState
        Case &quot;optNone&quot;
            oDialog.optNone = bNewState
        Case &quot;optBasic&quot;
            oDialog.optBasic = bNewState
        Case &quot;optBlogger&quot;
            oDialog.optBlogger = bNewState
        Case &quot;chkDraft&quot;
            oDialog.chkDraft = bNewState
        Case &quot;chkNewEntry&quot;
            oDialog.chkNewEntry = bNewState
        End Select
    #End If
End Sub

Sub subExecuteDialog(ByVal oDialog)
    #If OOO Then
        oDialog.Execute
    #Else
        oDialog.Show
    #End If
End Sub
</script:module>