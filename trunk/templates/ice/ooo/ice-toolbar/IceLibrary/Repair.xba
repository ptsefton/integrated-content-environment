<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Repair" script:language="StarBasic">#Const MSWD = False&#x0d;
#Const OOO = Not MSWD&#x0d;
Rem *********************************************************************&#x0d;
Rem    University of Southern Queensland&#x0d;
Rem    Author : Cynthia&#x0d;
Rem *********************************************************************&#x0d;
&#x0d;
Sub Repair()&#x0d;
Rem this is for Word Hover problem&#x0d;
    #If MSWD Then&#x0d;
        isFile = fnIsThereAFile()&#x0d;
        If Not isFile Then&#x0d;
            Exit Sub&#x0d;
        End If&#x0d;
    #End If&#x0d;
    Call subCheckDocument&#x0d;
End Sub&#x0d;
&#x0d;
Sub RepairTitleStyle()&#x0d;
Rem Dummy call for fixing the title style&#x0d;
    Call FixTitle&#x0d;
End Sub&#x0d;
&#x0d;
Sub subFixLinks()&#x0d;
    #If OOO Then&#x0d;
        Rem For NOw it is to fix underline in Links.&#x0d;
        oStyles = ThisComponent.styleFamilies.getByName(&quot;CharacterStyles&quot;)&#x0d;
         If oStyles.hasByName(&quot;Internet Link&quot;) Then&#x0d;
            oStyles.getByName(&quot;Internet Link&quot;).charUnderline = 0&#x0d;
         End If&#x0d;
         If oStyles.hasByName(&quot;Visited Internet Link&quot;) Then&#x0d;
            oStyles.getByName(&quot;Visited Internet Link&quot;).charUnderline = 0&#x0d;
         End If&#x0d;
    #End If&#x0d;
End Sub&#x0d;
&#x0d;
&#x0d;
Sub subFixBulletList()&#x0d;
    For i = 1 To 5&#x0d;
        sStyle = fnMakeStyleName(&quot;li&quot;, i, &quot;b&quot;)&#x0d;
        If fnHasStyle(sStyle) Then&#x0d;
            ResetNumberingRules (sStyle)&#x0d;
        End If&#x0d;
    Next&#x0d;
End Sub&#x0d;
&#x0d;
Sub subRemoveUsedNumberingStyles()&#x0d;
#If OOO Then&#x0d;
    oTextElementEnum = ThisComponent.Text.GetText().createEnumeration&#x0d;
    While oTextElementEnum.hasMoreElements()&#x0d;
        oTextElement = oTextElementEnum.nextElement()&#x0d;
        If oTextElement.supportsService(&quot;com.sun.star.text.Paragraph&quot;) Then&#x0d;
            oCursor = oTextElement.Text.createTextCursorByRange(oTextElement)&#x0d;
            Rem removing all the numberingstyle in the paragraph.&#x0d;
            oCursor.NumberingStyleName = &quot;&quot;&#x0d;
        End If&#x0d;
    Wend&#x0d;
#End If&#x0d;
End Sub&#x0d;
&#x0d;
&#x0d;
Sub ResetNumberingRules(sStyle As String)&#x0d;
	ThisComponent.styleFamilies.getByName(&quot;NumberingStyles&quot;).removeByName (sStyle)&#x0d;
	subCreateMissingStyle (sStyle)&#x0d;
End Sub&#x0d;
&#x0d;
sub subFixHeadingNumberingStyle()&#x0d;
	REM remove the list&#x0d;
	styleNames = Array(&quot;Title-chapter&quot;,&quot;h1n&quot;,&quot;h2n&quot;,&quot;h3n&quot;,&quot;h4n&quot;,&quot;h5n&quot;)&#x0d;
	REm fix the paragraph styles &#x0d;
	oStyles = ThisComponent.styleFamilies.getByName(&quot;ParagraphStyles&quot;)&#x0d;
	for each styleName in styleNames&#x0d;
		if oStyles.hasByName(styleName) Then&#x0d;
			oStyle = oStyles.getByName(styleName)&#x0d;
			if oStyle.NumberingStyleName &lt;&gt; &quot;Outline&quot; Then&#x0d;
				nLevel = fnGetLevel(styleName) + 1&#x0d;
				oStyle.setPropertyValue(&quot;OutlineLevel&quot;,nLevel)&#x0d;
				oStyle.setPropertyValue(&quot;NumberingStyleName&quot;,&quot;Outline&quot;)&#x0d;
			end if &#x0d;
		else&#x0d;
			subCreateMissingStyle(styleName)&#x0d;
		end if&#x0d;
	Next styleName&#x0d;
	REm fix the outline numbering rules.&#x0d;
	oNumRules = ThisComponent.getChapterNumberingRules&#x0d;
	for i = 0 to 5&#x0d;
		set mSetOfRules = oNumRules.getByIndex(i)&#x0d;
		j = fnFindPropertyIndex(mSetOfRules,&quot;HeadingStyleName&quot;)&#x0d;
		mSetOfRules(j).value = styleNames(i)&#x0d;
		oNumRules.replaceByIndex(i, mSetOfRules)&#x0d;
	Next i&#x0d;
	ThisComponent.getChapterNumberingRules = oNumRules&#x0d;
end sub&#x0d;
&#x0d;
Sub subCheckDocument()&#x0d;
Rem on Error Goto ErrMsg&#x0d;
    Rem Call FixTitle&#x0d;
   Call subFixLinks&#x0d;
   #If OOO Then&#x0d;
	    Rem need to be remove from the paragraphs otherwise it does not work&#x0d;
	    Call subRemoveUsedNumberingStyles&#x0d;
	    Call subFixBulletList&#x0d;
   		call subFixHeadingNumberingStyle&#x0d;
   #End If&#x0d;
   Call subCheckTextRange&#x0d;
   Exit Sub&#x0d;
errMsg:&#x0d;
    printMsgbox (&quot;Error in getting the document contents. Try deselecting.&quot;)&#x0d;
End Sub&#x0d;
&#x0d;
Sub subCheckTextRange()&#x0d;
#If OOO Then&#x0d;
    oTextElementEnum = ThisComponent.Text.GetText().createEnumeration&#x0d;
    While oTextElementEnum.hasMoreElements()&#x0d;
        oTextElement = oTextElementEnum.nextElement()&#x0d;
        If oTextElement.supportsService(&quot;com.sun.star.text.Paragraph&quot;) Then&#x0d;
            subCheckParagraph (oTextElement)&#x0d;
            Rem To fix the hyperlink in graphics when editing .doc in ooo&#x0d;
            Call RepairParaGraphics(oTextElement)&#x0d;
            Call RepairCharGraphics(oTextElement)&#x0d;
        End If&#x0d;
    Wend&#x0d;
    Rem need to run two time to copy the url&#x0d;
    oTextElementEnum = ThisComponent.Text.GetText().createEnumeration&#x0d;
    While oTextElementEnum.hasMoreElements()&#x0d;
        oTextElement = oTextElementEnum.nextElement()&#x0d;
        If oTextElement.supportsService(&quot;com.sun.star.text.Paragraph&quot;) Then&#x0d;
            Call RepairParaGraphics(oTextElement)&#x0d;
            Call RepairCharGraphics(oTextElement)&#x0d;
        End If&#x0d;
    Wend&#x0d;
#Else&#x0d;
    Rem create bookmark to remember the current position&#x0d;
    Selection.Bookmarks.Add (&quot;CurrentCursorPosition&quot;)&#x0d;
    &#x0d;
    For i = 1 To ActiveDocument.Paragraphs.count&#x0d;
        ActiveDocument.Paragraphs(i).Range.Select&#x0d;
&#x0d;
        If Not Selection.Information(wdWithInTable) And Not isField() Then&#x0d;
            Rem if the paragraph is not in the table, reset the style.&#x0d;
            sStyle = Selection.style&#x0d;
            varPageBreakBefore = Selection.ParagraphFormat.PageBreakBefore&#x0d;
            varKeepTogether = Selection.ParagraphFormat.KeepTogether&#x0d;
            varKeepWithNext = Selection.ParagraphFormat.KeepWithNext&#x0d;
            If fnGetFamily(sStyle) = &quot;h&quot; Then&#x0d;
                sType = fnGetType(sStyle)&#x0d;
                If sType &lt;&gt; &quot;&quot; And sType &lt;&gt; &quot;n&quot; Then&#x0d;
                    nLevel = fnGetLevel(sStyle)&#x0d;
                    If nLevel &lt;&gt; 0 Then&#x0d;
                        sStyle = fnGetFamily(sStyle) + nLevel&#x0d;
                    Else&#x0d;
                        sStyle = fnGetFamily(sStyle) + Trim(str(1))&#x0d;
                    End If&#x0d;
                End If&#x0d;
            End If&#x0d;
            Call subSetParaStyleName(Selection.Range, sStyle)&#x0d;
            Rem reset pagination&#x0d;
            Selection.ParagraphFormat.PageBreakBefore = varPageBreakBefore&#x0d;
            Selection.ParagraphFormat.KeepTogether = varKeepTogether&#x0d;
            Selection.ParagraphFormat.KeepWithNext = varKeepWithNext&#x0d;
        End If&#x0d;
    Next&#x0d;
&#x0d;
    Rem reset the current position and then delete the bookmark&#x0d;
    Selection.GoTo what:=wdGoToBookmark, Name:=&quot;CurrentCursorPosition&quot;&#x0d;
    ActiveDocument.Bookmarks(&quot;CurrentCursorPosition&quot;).Delete&#x0d;
#End If&#x0d;
End Sub&#x0d;
&#x0d;
Sub subCheckParagraph(oTextElement)&#x0d;
Dim isBold As Boolean, isItalic As Boolean&#x0d;
oPortionEnum = oTextElement.createEnumeration&#x0d;
While oPortionEnum.hasMoreElements()&#x0d;
    oPortion = oPortionEnum.nextElement()&#x0d;
    oCursor = oPortion.Text.createTextCursorByRange(oPortion)&#x0d;
    sStyle = oCursor.paraStyleName&#x0d;
    If fnGetFamily(sStyle) = &quot;h&quot; Then&#x0d;
        If fnGetType(sStyle) &lt;&gt; &quot;&quot; And fnGetType(sStyle) &lt;&gt; &quot;n&quot; And fnGetType(sStyle) &lt;&gt; &quot;chapter&quot; Then&#x0d;
            If fnGetLevel(sStyle) &lt;&gt; 0 Then&#x0d;
                sStyle = fnGetFamily(sStyle) + fnGetLevel(sStyle)&#x0d;
            Else&#x0d;
                sStyle = fnGetFamily(sStyle) + 1&#x0d;
            End If&#x0d;
        End If&#x0d;
    End If&#x0d;
    subSetParaStyleName(oCursor,sStyle)&#x0d;
Wend&#x0d;
End Sub&#x0d;
&#x0d;
&#x0d;
Function isField()&#x0d;
    Rem For Word only. Word cannot differentiate field or just normal paragraph.&#x0d;
    On Error GoTo notField&#x0d;
    isField = True&#x0d;
    fldtype = Selection.Fields(1).Type&#x0d;
    Exit Function&#x0d;
notField:&#x0d;
    isField = False&#x0d;
End Function&#x0d;
</script:module>