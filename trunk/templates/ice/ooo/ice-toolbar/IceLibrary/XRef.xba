<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="XRef" script:language="StarBasic">Option Explicit&#x0d;#Const MSWD = False&#x0d;#Const OOO = Not MSWD&#x0d;&#x0d;&apos; Revised: 2007-08-30&#x0d;&#x0d;Rem To present a custom dialog for the creation of cross references&#x0d;&#x0d;Rem This is the main module sheet.&#x0d;Rem Subroutines that I have written, the name starts with sub, and for functions fn&#x0d;Rem If they are called by an event then the routine name starts with subEvent&#x0d;&#x0d;Rem *********************************************************************&#x0d;Rem     Copyright (C) 2006  Distance and e-Learning Centre,&#x0d;Rem     University of Southern Queensland&#x0d;Rem&#x0d;Rem     This program is free software; you can redistribute it and/or modify&#x0d;Rem     it under the terms of the GNU General Public License as published by&#x0d;Rem     the Free Software Foundation; either version 2 of the License, or&#x0d;Rem     (at your option) any later version.&#x0d;Rem&#x0d;Rem     This program is distributed in the hope that it will be useful,&#x0d;Rem     but WITHOUT ANY WARRANTY; without even the implied warranty of&#x0d;Rem     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#x0d;Rem     GNU General Public License for more details.&#x0d;Rem&#x0d;Rem     You should have received a copy of the GNU General Public License&#x0d;Rem     along with this program; if not, write to the Free Software&#x0d;Rem     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA&#x0d;Rem&#x0d;Rem *********************************************************************&#x0d;&#x0d;Rem ************************************************************&#x0d;Rem   Author Ian Laurenson&#x0d;Rem ************************************************************&#x0d;&#x0d;Rem -----------------------------------------------------------------&#x0d;Rem  Constants&#x0d;Rem -----------------------------------------------------------------&#x0d;Const nIndent = 3               &apos;Number spaces at left of item in listbox acting as tree control&#x0d;Const HIDDEN_SECTION_NAME = &quot;XRefSection&quot;&#x0d;&#x0d;&#x0d;Rem -----------------------------------------------------------------&#x0d;Rem  Variables common to functions in this library (library variables)&#x0d;Rem -----------------------------------------------------------------&#x0d;Private oDialog As Object       &apos;Points to the dialog dlgCrossRef&#x0d;Private oDoc As Object          &apos;Points to the current document&#x0d;Private oCurSelection As Object &apos;Points to the current selection&#x0d;Private mOutlines()             &apos;Holds the text of the headings, the level, and name of reference&#x0d;Private mLinks()                &apos;For each item in listbox mLinks holds the index of the corresponding&#x0d;                                &apos;entry in mOutlines&#x0d;Private nHeadCount As Long      &apos;The number of heading paragraphs in the document&#x0d;Private mDocs()&#x0d;Global mXRefDialogSettings(0)  &apos;Holds the current settings of the dialog. Global so settings are still&#x0d;                                &apos;available for next time dialog is called.&#x0d;&#x0d;Rem =====================================================&#x0d;Rem     Main entry point.&#x0d;Rem     Procedure to initialise and display the dialog box&#x0d;Rem =====================================================&#x0d;Sub CrossReference()&#x0d;    #If MSWD Then&#x0d;        If Not fnIsThereAFile() Then&#x0d;            Exit Sub&#x0d;        End If&#x0d;        #If Mac Then&#x0d;            MsgBox &quot;Sorry, this feature is not available in Word on the Mac.&quot;&#x0d;            End&#x0d;        #End If&#x0d;    #End If&#x0d;    Rem A routine to present a custom dialog for the creation of cross references to&#x0d;    Rem outlined heading levels&#x0d;    #If MSWD Then&#x0d;        Set oDoc = ActiveDocument&#x0d;        Set oDialog = Xref&#x0d;    #Else&#x0d;        oDoc = thisComponent REM stardesktop.currentComponent&#x0d;        Rem Check that we are in a text document and that text is selected&#x0d;        If Not oDoc.supportsService(&quot;com.sun.star.text.GenericTextDocument&quot;) Then&#x0d;            MsgBox &quot;Sorry - only text documents can have cross references to outlined headings&quot;, 16, &quot;Error&quot;&#x0d;            Exit Sub&#x0d;        End If&#x0d;&#x0d;        oCurSelection = oDoc.CurrentSelection&#x0d;&#x0d;        If Not oCurSelection.supportsService(&quot;com.sun.star.text.TextRanges&quot;) Then&#x0d;            MsgBox &quot;Sorry - I can&apos;t handle anything being selected except text.&quot;, 16, &quot;Error&quot;&#x0d;            Exit Sub&#x0d;        End If&#x0d;&#x0d;        DialogLibraries.LoadLibrary (&quot;IceLibrary&quot;)&#x0d;        oDialog = CreateUnoDialog(DialogLibraries.IceLibrary.dlgCrossRef)&#x0d;    #End If&#x0d;&#x0d;&#x0d;    Rem Set-up other module variables&#x0d;    Call subBuildHeadingArray(oDoc)&#x0d;&#x0d;    subLoadType&#x0d;&#x0d;    Rem Set-up the dialog&#x0d;&#x0d;Rem      subLoadDialogSettings&#x0d;    subCurrentWriterDocuments&#x0d;&#x0d;&#x0d;Rem  Present the dialog&#x0d;    #If MSWD Then&#x0d;        oDialog.ComboBoxLevel.List = Array(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;)&#x0d;     oDialog.ComboBoxLevel.value = &quot;1&quot;&#x0d;        Call subShowLevel(oDialog.ListBoxHeadings, 1)&#x0d;&#x0d;        oDialog.Show&#x0d;    #Else&#x0d;        oDialog.getControl(&quot;ListBoxLevel&quot;).selectItemPos(0, true)&#x0d;        subShowLevel(oDialog.getControl(&quot;ListBoxHeadings&quot;), oDialog.getControl(&quot;ListBoxLevel&quot;).selectedItemPos + 1)&#x0d;        oDialog.model.Step = 1&#x0d;        oDialog.Execute&#x0d;        oDialog.dispose&#x0d;    #End If&#x0d;End Sub&#x0d;&#x0d;&#x0d;Sub subEventType(oObject)&#x0d;    subChangeType&#x0d;End Sub&#x0d;&#x0d;&#x0d;Sub subChangeType()&#x0d;    Dim oListbox, mDependentTextFields, oAnchor, oCursor, i As Integer&#x0d;    Dim sType As String, nLevel As Integer, bShowHidden As Boolean&#x0d;&#x0d;    #If MSWD Then&#x0d;        sType = oDialog.ComboBoxType.value&#x0d;        Set oListbox = oDialog.ListBoxHeadings&#x0d;    #Else&#x0d;        sType = oDialog.getControl(&quot;ListBoxType&quot;).SelectedItem&#x0d;        oListbox = oDialog.getControl(&quot;ListBoxHeadings&quot;)&#x0d;    #End If&#x0d;&#x0d;    Select Case sType&#x0d;    Case &quot;Headings&quot;&#x0d;        #If MSWD Then&#x0d;            oDialog.ComboBoxLevel.Visible = True&#x0d;            nLevel = Val(oDialog.ComboBoxLevel.value)&#x0d;            oDialog.CheckBoxRef.Visible = True&#x0d;            oDialog.CheckBoxLeft.Visible = False&#x0d;            oDialog.CheckBoxRight.Visible = False&#x0d;        #Else&#x0d;            oDialog.model.Step = 1&#x0d;            nLevel = oDialog.getControl(&quot;ListBoxLevel&quot;).selectedItemPos + 1&#x0d;        #End If&#x0d;        Call subBuildHeadingArray(oDoc)&#x0d;        Call subShowLevel(oListbox, nLevel)&#x0d;    Case &quot;Bookmarks&quot;&#x0d;        #If MSWD Then&#x0d;            oDialog.ComboBoxLevel.Visible = False&#x0d;            oDialog.CheckBoxRef.Visible = True&#x0d;            oDialog.CheckBoxLeft.Visible = False&#x0d;            oDialog.CheckBoxRight.Visible = False&#x0d;            bShowHidden = oDoc.Bookmarks.ShowHidden&#x0d;            oDoc.Bookmarks.ShowHidden = True&#x0d;        #Else&#x0d;            oDialog.model.Step = 2&#x0d;        #End If&#x0d;        Call subRemoveListboxItems(oListbox)&#x0d;        For i = 0 To oDoc.Bookmarks.count - 1&#x0d;            Rem oListbox.addItems(oDoc.Bookmarks.ElementNames, 0)&#x0d;            #If MSWD Then&#x0d;                Call subListBoxAddItem(oListbox, oDoc.Bookmarks(i + 1).Name &amp; &quot; - &quot; &amp; oDoc.Bookmarks(i + 1).Range.Text, i)&#x0d;&#x0d;            #Else&#x0d;                Call subListBoxAddItem(oListbox, oDoc.Bookmarks.getByIndex(i).Name &amp; &quot; - &quot; &amp; oDoc.Bookmarks.getByIndex(i).Anchor.String, i)&#x0d;            #End If&#x0d;            Rem oListbox.addItem(oDoc.Bookmarks.getByIndex(i).name &amp; &quot; - &quot; &amp; oDoc.Bookmarks.getByIndex(i).anchor.string, i)&#x0d;        Next&#x0d;        #If MSWD Then&#x0d;            oDoc.Bookmarks.ShowHidden = bShowHidden&#x0d;        #End If&#x0d;    Case Else&#x0d;        #If MSWD Then&#x0d;            oDialog.ComboBoxLevel.Visible = False&#x0d;            oDialog.CheckBoxRef.Visible = False&#x0d;            oDialog.CheckBoxLeft.Visible = True&#x0d;            oDialog.CheckBoxRight.Visible = True&#x0d;        #Else&#x0d;            oDialog.model.Step = 3&#x0d;        #End If&#x0d;        Call subRemoveListboxItems(oListbox)&#x0d;        #If MSWD Then&#x0d;            Dim oField&#x0d;            i = 0&#x0d;            For Each oField In oDoc.Fields&#x0d;                If InStr(UCase(oField.Code), sType) &gt; 0 Then&#x0d;                    Call subListBoxAddItem(oListbox, oField.result.Paragraphs(1).Range.Text, i)&#x0d;                    i = i + 1&#x0d;                End If&#x0d;            Next&#x0d;        #Else&#x0d;            mDependentTextFields = oDoc.TextFieldMasters.getByName(&quot;com.sun.star.text.FieldMaster.SetExpression.&quot; &amp; sType).DependentTextFields&#x0d;            For i = 0 To UBound(mDependentTextFields)&#x0d;                oAnchor = mDependentTextFields(i).Anchor&#x0d;                oCursor = oAnchor.Text.createTextCursorByRange(oAnchor)&#x0d;                oCursor.gotoStartOfParagraph (False)&#x0d;                oCursor.gotoEndOfParagraph (True)&#x0d;                Call subListBoxAddItem(oListbox, oCursor.String, i)&#x0d;            Next&#x0d;        #End If&#x0d;    End Select&#x0d;End Sub&#x0d;&#x0d;&#x0d;Sub subListBoxAddItem(oListbox, sItem, nIndex)&#x0d;    #If MSWD Then&#x0d;        oListbox.AddItem sItem, nIndex&#x0d;    #Else&#x0d;        oListbox.AddItem(sItem, nIndex)&#x0d;    #End If&#x0d;End Sub&#x0d;&#x0d;&#x0d;Sub subRemoveListboxItems(oListbox)&#x0d;    #If MSWD Then&#x0d;        Dim i As Integer&#x0d;        For i = 1 To oListbox.ListCount&#x0d;            oListbox.RemoveItem 0&#x0d;        Next&#x0d;        Rem oListbox.List = Array() rem Works in Windows but not Mac&#x0d;    #Else&#x0d;        oListbox.removeItems(0, oListBox.getItemCount)&#x0d;    #End If&#x0d;End Sub&#x0d;&#x0d;&#x0d;Sub subLoadType()&#x0d;    Dim oType, mTextFieldMasterNames, mElementNames(), i As Integer&#x0d;    Rem Note whileTextFieldMasters are document specific in OOo Writer&#x0d;    &apos;they are &quot;application&quot; specific in Word.&#x0d;&#x0d;    #If MSWD Then&#x0d;        &apos;The following commented code does not pickup the names of Seq fields in use in the document&#x0d;        &apos;ReDim Preserve mElementNames(CaptionLabels.Count + 1)&#x0d;        &apos;For i = 1 To CaptionLabels.Count&#x0d;        &apos;    mElementNames(i + 1) = CaptionLabels(i).Name&#x0d;        &apos;Next&#x0d;        Dim oField, sFieldCode As String, nSpacePosn1 As Integer, nSpacePosn2 As Integer&#x0d;        Dim nLen As Integer, sName As String, sFieldNames As String, ch As String&#x0d;&#x0d;        sFieldNames = &quot;&quot;&#x0d;        For Each oField In oDoc.Fields&#x0d;            sFieldCode = UCase(LTrim(oField.Code))&#x0d;            nSpacePosn1 = InStr(sFieldCode, &quot; &quot;)&#x0d;            If Left(sFieldCode, nSpacePosn1 - 1) = &quot;SEQ&quot; Then&#x0d;                &apos;skip to name&#x0d;                For i = nSpacePosn1 + 1 To Len(sFieldCode)&#x0d;                    ch = Mid(sFieldCode, i, 1)&#x0d;                    If ch &gt;= &quot;A&quot; And ch &lt;= &quot;Z&quot; Then Exit For&#x0d;                Next&#x0d;                &apos;Build name&#x0d;                sName = &quot;&quot;&#x0d;                For i = i To Len(sFieldCode)&#x0d;                    ch = Mid(sFieldCode, i, 1)&#x0d;                    If Not (ch &gt;= &quot;A&quot; And ch &lt;= &quot;Z&quot;) Or (ch &gt;= &quot;0&quot; And ch &lt;= &quot;9&quot;) Then Exit For&#x0d;                    sName = sName &amp; ch&#x0d;                Next&#x0d;                If InStr(sFieldNames, sName) = 0 Then&#x0d;                    sFieldNames = sFieldNames &amp; &quot;~&quot; &amp; sName&#x0d;                End If&#x0d;            End If&#x0d;        Next&#x0d;        sFieldNames = &quot;Headings~Bookmarks&quot; &amp; sFieldNames&#x0d;        &apos;mElementNames = Split(sFieldNames, &quot;~&quot;)&#x0d;        oDialog.ComboBoxType.List = fnSplit(sFieldNames, &quot;~&quot;)&#x0d;        oDialog.ComboBoxType.value = &quot;Headings&quot;&#x0d;    #Else&#x0d;        mElementNames = Array(&quot;Headings&quot;, &quot;Bookmarks&quot;)&#x0d;        mTextFieldMasterNames = fnGetFieldMastersOfType(oDoc, &quot;.SetExpression.&quot;)&#x0d;        &apos;xray mTextFieldMasterNames&#x0d;        ReDim Preserve mElementNames(UBound(mTextFieldMasterNames) + 2)&#x0d;        For i = 0 To UBound(mTextFieldMasterNames)&#x0d;            mElementNames(i + 2) = mTextFieldMasterNames(i)&#x0d;        Next&#x0d;        oType = oDialog.getControl(&quot;ListBoxType&quot;)&#x0d;        oType.addItems( mElementNames ,0)&#x0d;        oType.selectItemPos(0, true)&#x0d;    #End If&#x0d;End Sub&#x0d;&#x0d;&#x0d;Function fnGetFieldMastersOfType(oDoc, sType)&#x0d;    Dim mTextFieldMasterNames, i As Integer, j As Integer, mElementNames(), nPosn As Integer&#x0d;&#x0d;    mTextFieldMasterNames = oDoc.TextFieldMasters.ElementNames&#x0d;    j = -1&#x0d;    ReDim Preserve mElementNames(UBound(mTextFieldMasterNames) + 2)&#x0d;    For i = 0 To UBound(mTextFieldMasterNames)&#x0d;        nPosn = InStr(mTextFieldMasterNames(i), sType)&#x0d;        If nPosn &gt; 0 Then&#x0d;            j = j + 1&#x0d;            mElementNames(j) = Right(mTextFieldMasterNames(i), Len(mTextFieldMasterNames(i)) - (nPosn + Len(sType) - 1))&#x0d;        End If&#x0d;    Next&#x0d;    If j &gt; 0 Then&#x0d;        ReDim Preserve mElementNames(j)&#x0d;        fnGetFieldMastersOfType = mElementNames&#x0d;    Else&#x0d;        fnGetFieldMastersOfType = Array()&#x0d;    End If&#x0d;End Function&#x0d;&#x0d;&#x0d;Sub subInsertReference(sRefName As String, nPart As Integer, oCurText, oCursor, sStyleName)&#x0d;    #If MSWD Then&#x0d;        Dim oCrossRef, oField&#x0d;        oCursor.InsertCrossReference ReferenceType:=&quot;Bookmark&quot;, ReferenceKind:=nPart, _&#x0d;            ReferenceItem:=sRefName, InsertAsHyperlink:=True, IncludePosition:=False&#x0d;        If oDoc.Name = ActiveDocument.Name Then&#x0d;            If Not fnHasStyle(sStyleName, &quot;Character&quot;) Then&#x0d;                subCreateMissingStyle (sStyleName)&#x0d;            End If&#x0d;            sStyleName = ActiveDocument.Styles.Item(sStyleName)&#x0d;            On Error GoTo 0&#x0d;            oCursor.MoveStart wdWord, -1&#x0d;            oCursor.style = sStyleName&#x0d;            oCursor.Collapse wdCollapseEnd&#x0d;        Else&#x0d;            oCursor.MoveEnd wdWord, 1&#x0d;            Set oField = oCursor.Fields(1)&#x0d;            oCursor.Collapse&#x0d;            oField.ShowCodes = True&#x0d;            oCursor.Move wdCharacter, Len(oField.Code.Text) + 2&#x0d;            oField.ShowCodes = False&#x0d;            oField.Update &apos;Not sure if this is necessary&#x0d;        End If&#x0d;        Exit Sub&#x0d;NoStyle:&#x0d;        subCreateMissingStyle (sStyleName)&#x0d;        Resume Next&#x0d;    #Else&#x0d;        &apos;Inserts a reference into the OOo document at the location of oViewCursor&#x0d;        Dim oRefField As Object&#x0d;&#x0d;        oRefField = oDoc.createInstance(&quot;com.sun.star.text.TextField.GetReference&quot;)&#x0d;        oRefField.ReferenceFieldSource = 2 &apos;com.sun.star.text.ReferenceFieldSource.BOOKMARK&#x0d;        oRefField.SourceName = sRefName&#x0d;        oRefField.ReferenceFieldPart = nPart&#x0d;        oCurText.insertTextContent(oCursor, oRefField, false)&#x0d;        If oDoc.URL = ThisComponent.URL Then&#x0d;            If Not ThisComponent.styleFamilies.getByName(&quot;CharacterStyles&quot;).hasByName(sStyleName) Then&#x0d;                subCreateMissingStyle (sStyleName)&#x0d;            End If&#x0d;            oRefField.Anchor.CharStyleName = sStyleName&#x0d;        End If&#x0d;        oRefField.Update&#x0d;    #End If&#x0d;End Sub&#x0d;&#x0d;Sub subInsertText(sTextString As String, oCurText, oCursor, sStyleName)&#x0d;    #If MSWD Then&#x0d;        oCursor.InsertAfter sTextString&#x0d;        If oDoc.Name = ActiveDocument.Name Then&#x0d;            If Not fnHasStyle(sStyleName, &quot;Character&quot;) Then&#x0d;                subCreateMissingStyle (sStyleName)&#x0d;            End If&#x0d;            oCursor.style = sStyleName&#x0d;        End If&#x0d;        oCursor.Collapse wdCollapseEnd&#x0d;        Exit Sub&#x0d;    #Else&#x0d;        If oDoc.URL = ThisComponent.URL Then&#x0d;            If Not fnHasStyle(sStyleName, &quot;Character&quot;) Then&#x0d;                subCreateMissingStyle (sStyleName)&#x0d;            End If&#x0d;            oCursor.CharStyleName = sStyleName&#x0d;        End If&#x0d;         oCurText.insertString(oCursor, sTextString, false)&#x0d;    #End If&#x0d;End Sub&#x0d;&#x0d;&#x0d;Sub subCreateDDEFieldWithHyperLink(sURL, sDDEBookmarkName, sRefBookmarkname, oRange)&#x0d;    &apos;Allows creation of a DDE field that gets text from another writer document bookmark,&#x0d;    &apos;And creates a hyperlink out of the field to a possibly different bookmark in the same document.&#x0d;    Dim sFullURL As String, oDoc, oText, oMasterField, oDDEField&#x0d;&#x0d;    sFullURL = sURL &amp; &quot;#&quot; &amp; sRefBookmarkname&#x0d;    oDoc = ThisComponent&#x0d;    oText = oRange.Text&#x0d;&#x0d;    &apos;Check if a master field has already been created for a DDE field to the DDE bookmark&#x0d;    &apos;if not create one&#x0d;    If oDoc.TextFieldMasters.hasByName(&quot;com.sun.star.text.FieldMaster.DDE.&quot; &amp; sDDEBookmarkName) Then&#x0d;        oMasterField = oDoc.TextFieldMasters.getByName(&quot;com.sun.star.text.FieldMaster.DDE.&quot; &amp; sDDEBookmarkName)&#x0d;    Else&#x0d;        oMasterField = oDoc.createInstance(&quot;com.sun.star.text.FieldMaster.DDE&quot;)&#x0d;        oMasterField.DDECommandFile = sURL&#x0d;        oMasterField.DDECommandType = &quot;soffice&quot;&#x0d;        oMasterField.DDECommandElement = sDDEBookmarkName&#x0d;        oMasterField.IsAutomaticUpdate = True&#x0d;        oMasterField.Name = sDDEBookmarkName &apos;Must have a name and it must be unique!&#x0d;    End If&#x0d;&#x0d;    &apos;Insert the DDEfield&#x0d;    oDDEField = ThisComponent.createInstance(&quot;com.sun.star.text.TextField.DDE&quot;)&#x0d;    oDDEField.attachTextFieldMaster (oMasterField)&#x0d;    oDDEField.attach (ThisComponent.CurrentController.ViewCursor)&#x0d;&#x0d;    &apos;Create the hyperlink&#x0d;    oRange = oDDEField.Anchor&#x0d;    oRange.HyperLinkURL = sFullURL&#x0d;    oRange.HyperLinkName = sFullURL&#x0d;End Sub&#x0d;&#x0d;&#x0d;Function fnGetHiddenSection(oDoc, sSectionName)&#x0d;&#x0d;    #If MSWD Then&#x0d;        Dim oEndOfDoc, oBookmark&#x0d;        &apos;Sections in Word can be neither named nor hidden.&#x0d;        &apos;Thus using a bookmark to get desired region if already set.&#x0d;        &apos;The text can not be hidden as the DDE field only displays visible text.&#x0d;        On Error GoTo NoBookmark&#x0d;            Set oBookmark = oDoc.Bookmarks.Item(sSectionName)&#x0d;        On Error GoTo 0&#x0d;        Set fnGetHiddenSection = oBookmark.Range&#x0d;        Exit Function&#x0d;NoBookmark:&#x0d;        Set oEndOfDoc = oDoc.Bookmarks(&quot;\EndOfDoc&quot;).Range&#x0d;        oEndOfDoc.InsertBreak Type:=wdSectionBreakNextPage&#x0d;        Set oBookmark = oDoc.Bookmarks.Add(Range:=oEndOfDoc, Name:=sSectionName)&#x0d;        Resume Next&#x0d;    #Else&#x0d;        &apos;Warning: There is a bug in OOo (2.2) that if a section has been deleted by selecting the text&#x0d;        &apos;and deleting it, the section still sort of exists, as hasByName returns true, but getByName fails.&#x0d;        &apos;Also, if the newly created section has the same name then hiding the section via the API&#x0d;        &apos;doesn&apos;t work.&#x0d;&#x0d;        Dim oText, oCursor, oSections, oSection, oAnchor&#x0d;        If oDoc.Bookmarks.hasByName(sSectionName) Then&#x0d;            fnGetHiddenSection = oDoc.Bookmarks.getByName(sSectionName)&#x0d;            oSections = oDoc.getTextSections&#x0d;            &apos;If oSections.hasByName(sSectionName) Then&#x0d;            oSection = oSections.getByName(sSectionName)&#x0d;            oSection.setPropertyValue(&quot;IsVisible&quot;, true) &apos;This doesn&apos;t always work - see comment above.&#x0d;        Else&#x0d;            oText = oDoc.Text&#x0d;            oCursor = oText.createTextCursorByRange(oText.End)&#x0d;            oText.insertControlCharacter(oCursor, com.sun.star.text.ControlCharacter.PARAGRAPH_BREAK, true)&#x0d;            oSection = oDoc.createInstance(&quot;com.sun.star.text.TextSection&quot;)&#x0d;            oSection.setName (sSectionName)&#x0d;            oText.insertTextContent(oCursor, oSection, true)&#x0d;            oSection.setPropertyValue(&quot;IsVisible&quot;, true) &apos;This doesn&apos;t always work - see comment above.&#x0d;        End If&#x0d;        fnGetHiddenSection = oSection&#x0d;    #End If&#x0d;End Function&#x0d;&#x0d;&#x0d;Sub subEventCommandButtonInsert_Initiate()&#x0d;    &apos;Creates a reference for the selected item if one doesn&apos;t already exist&#x0d;    &apos;Inserts the references and text&#x0d;    Dim oCursor, sRefName As String, i As Long, nPosn As Long, oRefField As Object&#x0d;    Dim oCharStyle As Object, mDependentTextFields, oDependentTextField&#x0d;    Dim oVC, oCurText, sType As String, oField, oSection, oAnchor, sCurCharStyle As String&#x0d;    Dim l As Integer, k As Long, sDDEBookmarkName As String, sSlash As String&#x0d;&#x0d;    #If MSWD Then&#x0d;        nPosn = Xref.ListBoxHeadings.ListIndex&#x0d;    #Else&#x0d;        nPosn = oDialog.getControl(&quot;ListBoxHeadings&quot;).selectedItemPos&#x0d;    #End If&#x0d;&#x0d;    If nPosn &lt; 0 Then   &apos;Nothing selected so can&apos;t insert anything&#x0d;        Beep&#x0d;        Exit Sub&#x0d;    End If&#x0d;&#x0d;    &apos;Create the reference if it doesn&apos;t already exist&#x0d;    #If MSWD Then&#x0d;        sType = oDialog.ComboBoxType.value&#x0d;    #Else&#x0d;        sType = oDialog.getControl(&quot;ListBoxType&quot;).SelectedItem&#x0d;    #End If&#x0d;&#x0d;    Select Case sType&#x0d;    Case &quot;Headings&quot;&#x0d;        #If MSWD Then&#x0d;            Set oCursor = oDoc.Paragraphs(mOutlines(2, mLinks(nPosn))).Range&#x0d;            &apos;Don&apos;t include the paragraph mark&#x0d;            oCursor.End = oCursor.End - 1&#x0d;        #Else&#x0d;            oCursor = oDoc.Text.createTextCursor&#x0d;            For i = 1 To mOutlines(2, mLinks(nPosn))&#x0d;                oCursor.gotoNextParagraph (False)&#x0d;            Next&#x0d;            oCursor.gotoEndOfParagraph (True)&#x0d;        #End If&#x0d;        sRefName = fnBookmarkRange(oCursor)&#x0d;    Case &quot;Bookmarks&quot;&#x0d;        #If MSWD Then&#x0d;            sRefName = oDoc.Bookmarks(nPosn + 1).Name&#x0d;        #Else&#x0d;            sRefName = oDoc.Bookmarks.getByIndex(nPosn).Name&#x0d;        #End If&#x0d;    Case Else&#x0d;        #If MSWD Then&#x0d;            i = -1&#x0d;            For Each oField In oDoc.Fields&#x0d;                If InStr(UCase(oField.Code), sType) &gt; 0 Then&#x0d;                    i = i + 1&#x0d;                    If i = nPosn Then Exit For&#x0d;                End If&#x0d;            Next&#x0d;            Set oCursor = oField.result &apos;.Copy&#x0d;            oCursor.Collapse wdCollapseEnd&#x0d;            If oDialog.CheckBoxLeft.value Then&#x0d;                oCursor.MoveStart wdParagraph, -1&#x0d;            End If&#x0d;            If oDialog.CheckBoxRight.value Then&#x0d;                oCursor.MoveEnd wdParagraph, 1&#x0d;                oCursor.End = oCursor.End - 1&#x0d;            End If&#x0d;        #Else&#x0d;            mDependentTextFields = oDoc.TextFieldMasters.getByName(&quot;com.sun.star.text.FieldMaster.SetExpression.&quot; &amp; oDialog.getControl(&quot;ListBoxType&quot;).SelectedItem).DependentTextFields&#x0d;            oDependentTextField = mDependentTextFields(nPosn)&#x0d;            oCursor = oDependentTextField.Anchor.Text.createTextCursorByRange(oDependentTextField.Anchor)&#x0d;            If oDialog.getControl(&quot;CheckBoxLeft&quot;).State = 1 Then&#x0d;                oCursor.gotoStartOfParagraph (False)&#x0d;                oCursor.gotoRange(oDependentTextField.anchor.end, true)&#x0d;                If oDialog.getControl(&quot;CheckBoxRight&quot;).State = 1 Then&#x0d;                    oCursor.gotoEndOfParagraph (True)&#x0d;                End If&#x0d;            ElseIf oDialog.getControl(&quot;CheckBoxRight&quot;).State = 1 Then&#x0d;                oCursor.collapseToEnd&#x0d;                oCursor.gotoEndOfParagraph (True)&#x0d;            End If&#x0d;        #End If&#x0d;        sRefName = fnBookmarkRange(oCursor)&#x0d;    End Select&#x0d;&#x0d;    &apos;Insert the cross references and text as per the dialog.&#x0d;    &apos;Setting character styles if the reference is in the cirrent document.&#x0d;    #If MSWD Then&#x0d;        If oDoc.Name &lt;&gt; ActiveDocument.Name Then&#x0d;            Set oSection = fnGetHiddenSection(oDoc, HIDDEN_SECTION_NAME)&#x0d;            oSection.InsertParagraphBefore&#x0d;            Set oCursor = oSection&#x0d;        Else&#x0d;            Set oCursor = Selection&#x0d;        End If&#x0d;        Call subInsertText(oDialog.TextBox0.Text, &quot;&quot;, oCursor, &quot;xRef-ChapterText&quot;)&#x0d;        If oDialog.CheckBoxChapter.value Then&#x0d;            Call subInsertReference(sRefName, wdNumberNoContext, &quot;&quot;, oCursor, &quot;xRef-Chapter&quot;)&#x0d;        End If&#x0d;        Call subInsertText(oDialog.TextBox1.Text, &quot;&quot;, oCursor, &quot;xRef-RefText&quot;)&#x0d;        If (sType = &quot;Headings&quot; Or sType = &quot;bookmarks&quot;) And oDialog.CheckBoxRef.value Or _&#x0d;           Not (sType = &quot;Headings&quot; Or sType = &quot;bookmarks&quot;) And (oDialog.CheckBoxLeft.value Or _&#x0d;            oDialog.CheckBoxRight.value) Then&#x0d;            Call subInsertReference(sRefName, wdContentText, &quot;&quot;, oCursor, &quot;xRef-Ref&quot;)&#x0d;        End If&#x0d;        Call subInsertText(oDialog.TextBox2.Text, &quot;&quot;, oCursor, &quot;xRef-PageText&quot;)&#x0d;        If oDialog.CheckBoxpage.value Then&#x0d;            Call subInsertReference(sRefName, wdPageNumber, &quot;&quot;, oCursor, &quot;xRef-Page&quot;)&#x0d;        End If&#x0d;        If ActiveDocument.Name = oDoc.Name Then&#x0d;            Call subInsertText(oDialog.TextBox3.Text, &quot;&quot;, oCursor, &quot;xRef-DirectionText&quot;)&#x0d;            If oDialog.CheckBoxDirection.value Then&#x0d;                Call subInsertReference(sRefName, wdPosition, &quot;&quot;, oCursor, &quot;xRef-Direction&quot;)&#x0d;            End If&#x0d;        Else&#x0d;            sDDEBookmarkName = &quot;DDE&quot; &amp; sRefName &amp; &quot;_&quot;&#x0d;            oDoc.Bookmarks.Add Range:=oCursor.Paragraphs(1).Range, Name:=sDDEBookmarkName&#x0d;            sSlash = Application.PathSeparator&#x0d;            Set oField = ActiveDocument.Fields.Add(Selection.Range, wdFieldDDEAuto, _&#x0d;                &quot;winword &quot; &amp; _&#x0d;                Join(Split(oDoc.FullName, sSlash), sSlash &amp; sSlash) &amp; &quot; &quot; &amp; _&#x0d;                sDDEBookmarkName &amp; &quot; \t&quot;, True)&#x0d;            ActiveDocument.Hyperlinks.Add Anchor:=oField.result, Address:= _&#x0d;                oDoc.Name, SubAddress:=sRefName&#x0d;&#x0d;&#x0d;            &apos;Not current documnt so need to insert dde field and hyperlink&#x0d;&apos;            &apos;msgbox oCursor.string&#x0d;&apos;            Dim l, k, sDDEBookmarkName&#x0d;&apos;            oCursor.gotoStartOfParagraph (True)&#x0d;&apos;            &apos;Create dde bookmark Instance(&quot;com.sun.star.text.Bookmark&quot;)&#x0d;&apos;            oRefField = oDoc.createInstance(&quot;com.sun.star.text.Bookmark&quot;)&#x0d;&apos;            sDDEBookmarkName = &quot;DDE&quot; &amp; sRefName &amp; &quot;_&quot;&#x0d;&apos;            oRefField.setName (sDDEBookmarkName)&#x0d;&apos;            sDDEBookmarkName = oRefField.Name &apos;This allows for the name to already exist and to have a number added&#x0d;&apos;            oCursor.text.insertTextContent(oCursor, oRefField, True)&#x0d;&#x0d;&apos;            &apos;Loop until the fields get expanded or timeout&#x0d;&apos;            l = Len(oCursor.String)&#x0d;&apos;            While l = Len(oCursor.String) And k &lt; 100000 &apos;Timeout&#x0d;&apos;                k = k + 1&#x0d;&apos;            Wend&#x0d;&apos;            Call subCreateDDEFieldWithHyperLink(oDoc.URL, sDDEBookmarkName, sRefName, oCursor)&#x0d;        End If&#x0d;    #Else&#x0d;&#x0d;        If oDoc.URL &lt;&gt; ThisComponent.URL Then&#x0d;            oSection = fnGetHiddenSection(oDoc, HIDDEN_SECTION_NAME)&#x0d;            oAnchor = oSection.getAnchor&#x0d;            oCursor = oAnchor.Text.createTextCursorByRange(oAnchor.End)&#x0d;            &apos;Insert new paragraph&#x0d;            oCursor.text.insertControlCharacter(oCursor, 0, false) &apos;0=com.sun.star.text.ControlCharacter.PARAGRAPH_BREAK&#x0d;        Else&#x0d;            oCursor = ThisComponent.CurrentController.ViewCursor&#x0d;            sCurCharStyle = oCursor.CharStyleName&#x0d;        End If&#x0d;&#x0d;        oCurText = oCursor.Text&#x0d;&#x0d;        subInsertText(oDialog.getControl(&quot;TextField0&quot;).text, oCurText, oCursor, &quot;xRef-ChapterText&quot;)&#x0d;&#x0d;        If oDialog.getControl(&quot;CheckBoxChapter&quot;).State = 1 Then&#x0d;            subInsertReference(sRefname, com.sun.star.text.ReferenceFieldPart.CHAPTER, oCurText, oCursor, &quot;xRef-Chapter&quot;)&#x0d;        End If&#x0d;&#x0d;        subInsertText(oDialog.getControl(&quot;TextField1&quot;).text, oCurText, oCursor, &quot;xRef-RefText&quot;)&#x0d;&#x0d;        If oDialog.getControl(&quot;ListBoxType&quot;).SelectedItem = &quot;Headings&quot; And oDialog.getControl(&quot;CheckBoxRefh&quot;).State = 1 Or _&#x0d;           oDialog.getControl(&quot;ListBoxType&quot;).SelectedItem = &quot;Bookmarks&quot; And oDialog.getControl(&quot;CheckBoxRefb&quot;).State = 1 Or _&#x0d;           (oDialog.getControl(&quot;ListBoxType&quot;).selectedItemPos &gt; 1 And (oDialog.getControl(&quot;CheckBoxLeft&quot;).State = 1 Or _&#x0d;            oDialog.getControl(&quot;CheckBoxRight&quot;).State = 1)) Then&#x0d;            subInsertReference(sRefname, com.sun.star.text.ReferenceFieldPart.TEXT, oCurText, oCursor, &quot;xRef-Ref&quot;)&#x0d;        End If&#x0d;&#x0d;        subInsertText(oDialog.getControl(&quot;TextField2&quot;).text, oCurText, oCursor, &quot;xRef-PageText&quot;)&#x0d;&#x0d;        If oDialog.getControl(&quot;CheckBoxPage&quot;).State = 1 Then&#x0d;            subInsertReference(sRefname, com.sun.star.text.ReferenceFieldPart.PAGE_DESC, oCurText, oCursor, &quot;xRef-Page&quot;)&#x0d;        End If&#x0d;&#x0d;        subInsertText(oDialog.getControl(&quot;TextField3&quot;).text, oCurText, oCursor, &quot;xRef-DirectionText&quot;)&#x0d;&#x0d;        If oDialog.getControl(&quot;CheckBoxDirection&quot;).State = 1 And ThisComponent.URL = oDoc.URL Then&#x0d;            subInsertReference(sRefname, com.sun.star.text.ReferenceFieldPart.UP_DOWN, oCurText, oCursor, &quot;xRef-Direction&quot;)&#x0d;        End If&#x0d;&#x0d;        If oDoc.URL &lt;&gt; ThisComponent.URL Then&#x0d;            &apos;msgbox oCursor.string&#x0d;&#x0d;            oCursor.gotoStartOfParagraph (True)&#x0d;            &apos;Create dde bookmark Instance(&quot;com.sun.star.text.Bookmark&quot;)&#x0d;            oRefField = oDoc.createInstance(&quot;com.sun.star.text.Bookmark&quot;)&#x0d;            sDDEBookmarkName = &quot;DDE&quot; &amp; sRefName &amp; &quot;_&quot;&#x0d;            oRefField.setName (sDDEBookmarkName)&#x0d;            sDDEBookmarkName = oRefField.Name &apos;This allows for the name to already exist and to have a number added&#x0d;            oCursor.text.insertTextContent(oCursor, oRefField, True)&#x0d;&#x0d;            &apos;Loop until the fields get expanded or timeout&#x0d;            l = Len(oCursor.String)&#x0d;            While l = Len(oCursor.String) And k &lt; 100000 &apos;Timeout&#x0d;                k = k + 1&#x0d;            Wend&#x0d;            subCreateDDEFieldWithHyperLink(oDoc.url, sDDEBookmarkName, sRefName, oCursor)&#x0d;            oSection.setPropertyValue(&quot;IsVisible&quot;, false)&#x0d;        Else&#x0d;            If sCurCharStyle = &quot;&quot; Then&#x0d;                oCursor.setPropertyToDefault (&quot;CharStyleName&quot;)&#x0d;            Else&#x0d;                oCursor.CharStyleName = sCurCharStyle&#x0d;            End If&#x0d;        End If&#x0d;        subSaveDialogSettings&#x0d;    #End If&#x0d;&#x0d;End Sub&#x0d;&#x0d;&#x0d;Function fnBookmarkRange(oRange) As String&#x0d;    Dim oRefField, sRefName As String, oBookmark&#x0d;    Dim oBookmarks, i, oText, oBookmarkRange&#x0d;&#x0d;    #If MSWD Then&#x0d;        For Each oBookmark In oRange.Bookmarks&#x0d;            If oRange.IsEqual(oBookmark.Range) Then&#x0d;                fnBookmarkRange = oBookmark.Name&#x0d;                Exit Function&#x0d;            End If&#x0d;        Next&#x0d;    #Else&#x0d;        oBookmarks = oDoc.Bookmarks&#x0d;        oText = oRange.Text&#x0d;        For i = 0 To oBookmarks.count - 1&#x0d;            oBookmark = oBookmarks.getByIndex(i)&#x0d;            oBookmarkRange = oBookmark.Anchor&#x0d;            If EqualUnoObjects(oText, oBookmarkRange.Text) Then&#x0d;                If oText.compareRegionStarts(oRange, oBookmarkRange) = 0 Then&#x0d;                    If oText.compareRegionEnds(oRange, oBookmarkRange) = 0 Then&#x0d;                        fnBookmarkRange = oBookmark.Name&#x0d;                        Exit Function&#x0d;                    End If&#x0d;                End If&#x0d;            End If&#x0d;        Next&#x0d;    #End If&#x0d;&#x0d;    &apos;No bookmark corresponds to specified range so create one&#x0d;    sRefName = fnNewRefName()&#x0d;    #If MSWD Then&#x0d;        oDoc.Bookmarks.Add Range:=oRange, Name:=sRefName&#x0d;    #Else&#x0d;        oRefField = oDoc.createInstance(&quot;com.sun.star.text.Bookmark&quot;)&#x0d;        oRefField.setName (sRefName)&#x0d;        oRange.text.insertTextContent(oRange, oRefField, True)&#x0d;    #End If&#x0d;    fnBookmarkRange = sRefName&#x0d;End Function&#x0d;&#x0d;&apos;Function thanks to http://www.tek-tips.com/faqs.cfm?fid=1824 with modifications&#x0d;Public Function Replace(sString As Variant, sFind As String, sReplace As String)&#x0d;&#x0d;    Dim iStart As Integer, iLength As Integer&#x0d;    If IsNull(sString) Then&#x0d;        Replace = Null&#x0d;    Else&#x0d;        iStart = InStr(1, sString, sFind)&#x0d;        Do While iStart &gt; 0&#x0d;            sString = Left(sString, iStart - 1) _&#x0d;                    &amp; sReplace &amp; Mid(sString, iStart + Len(sFind), Len(sString) - iStart - Len(sFind) + 1)&#x0d;            iStart = InStr(iStart, sString, sFind)&#x0d;        Loop&#x0d;        Replace = sString&#x0d;    End If&#x0d;&#x0d;End Function&#x0d;&#x0d;&#x0d;Function fnNewRefName() As String&#x0d;    #If MSWD Then&#x0d;    Rem Temporarily create a new hidden doc, a heading and a cross ref to it.&#x0d;    Rem This creates a bookmark and so get that bookmark name.&#x0d;        Dim oTemp&#x0d;&#x0d;        Set oTemp = Documents.Add(DocumentType:=wdNewBlankDocument, Visible:=True)&#x0d;        oTemp.Bookmarks.ShowHidden = True&#x0d;        oTemp.Paragraphs(1).Range.Text = &quot;Sample heading&quot;&#x0d;        oTemp.Paragraphs(1).style = ActiveDocument.Styles(&quot;Heading 1&quot;)&#x0d;        oTemp.Paragraphs(1).Range.InsertParagraphAfter&#x0d;        oTemp.Paragraphs(2).Range.InsertCrossReference ReferenceType:=&quot;Heading&quot;, ReferenceKind:= _&#x0d;            wdContentText, ReferenceItem:=&quot;1&quot;&#x0d;        fnNewRefName = oTemp.Bookmarks(1).Name&#x0d;        oTemp.Close (False)&#x0d;    #Else&#x0d;    Rem Returns a REM uniqueREM  reference name using UNOREM s generateUuid.&#x0d;    Rem So that it looks similar to MSWD the absolute value of the 15 numbers returned&#x0d;    Rem concatenated and then the first 9 digits selected&#x0d;&#x0d;        Dim sId, nId, oUuid, mUuid, sUuid As String, i As Integer&#x0d;&#x0d;Rem        Removed need to use Uuid via Python due to problems loading the extension&#x0d;Rem         oUuid = createUnoService(&quot;com.sun.star.task.Uuid&quot;)&#x0d;Rem         mUuid = oUuid.Execute(Array())&#x0d;Rem         For i = 0 To UBound(mUuid)&#x0d;Rem             sUuid = sUuid &amp; Abs(mUuid(i))&#x0d;Rem         Next&#x0d;&#x0d;Rem         fnNewRefName = &quot;_Ref&quot; &amp; Left(sUuid, 9)&#x0d;&#x0d;        Rem Todo: remove hack which uses the date plus time since midnight not an unique ID&#x0d;        sId = Date + Timer()&#x0d;        nId = Replace(sId, &quot;/&quot;, &quot;&quot;)&#x0d;        nId = Replace(nId, &quot;:&quot;, &quot;&quot;)&#x0d;        nId = Replace(nId, &quot; &quot;, &quot;&quot;)&#x0d;&#x0d;        fnNewRefName = &quot;_Ref&quot; + nId&#x0d;&#x0d;    #End If&#x0d;Rem      If oDoc.Bookmarks.hasByName(sBaseName) Then&#x0d;Rem          i = oDoc.ReferenceMarks.Count&#x0d;Rem          While oDoc.Bookmarks.hasByName(sBaseName &amp; &quot;_&quot; &amp; i)&#x0d;Rem              i = i + 1&#x0d;Rem          Wend&#x0d;Rem          fnNewRefName = sBaseName &amp; &quot;_&quot; &amp; i&#x0d;Rem      Else&#x0d;Rem          fnNewRefName = sBaseName&#x0d;Rem      End If&#x0d;End Function&#x0d;&#x0d;&#x0d;Sub subBuildHeadingArray(oDoc)&#x0d;    Rem Uses module level variables: oText&#x0d;    Rem Set values for module level variables: mOutlines, nHeadCount&#x0d;    Rem Redimensions mOutlines to the number of found headings (nHeadCount)&#x0d;    Rem Stores the heading text, heading level, then the paragraph number&#x0d;    Dim oTextEnum As Object, oTextElement As Object&#x0d;    Dim oPortionEnum As Object, oPortion As Object&#x0d;    Dim i As Long, nHeadsFound As Long, nHeadingLevel As Integer, nParagraphCount As Long&#x0d;&#x0d;    #If MSWD Then&#x0d;        nParagraphCount = oDoc.Paragraphs.count&#x0d;    #Else&#x0d;        nParagraphCount = oDoc.ParagraphCount&#x0d;    #End If&#x0d;&#x0d;    ReDim mOutlines(2, nParagraphCount)&#x0d;&#x0d;    nHeadsFound = -1&#x0d;    Rem Fill the array with the headings, heading level and the paragraph number&#x0d;    i = -1&#x0d;&#x0d;    #If MSWD Then&#x0d;        For i = 1 To oDoc.Paragraphs.count&#x0d;            nHeadingLevel = fnHeadingLevel(oDoc.Paragraphs(i))&#x0d;            If nHeadingLevel &gt; 0 Then&#x0d;                nHeadsFound = nHeadsFound + 1&#x0d;                mOutlines(0, nHeadsFound) = oDoc.Paragraphs(i).Range.ListFormat.ListString &amp; &quot; &quot; &amp; _&#x0d;                    oDoc.Paragraphs(i).Range.Text&#x0d;                mOutlines(1, nHeadsFound) = nHeadingLevel&#x0d;                mOutlines(2, nHeadsFound) = i&#x0d;            End If&#x0d;        Next&#x0d;    #Else&#x0d;        oTextEnum = oDoc.Text.createEnumeration&#x0d;        While oTextEnum.hasMoreElements&#x0d;            oTextElement = oTextEnum.nextElement&#x0d;            If oTextElement.supportsService(&quot;com.sun.star.text.Paragraph&quot;) Then&#x0d;                i = i + 1&#x0d;                nHeadingLevel = fnHeadingLevel(oTextElement)&#x0d;                If nHeadingLevel &gt; 0 Then Rem oTextElement.ParaChapterNumberingLevel &gt;= 0 then&#x0d;                    nHeadsFound = nHeadsFound + 1&#x0d;                    mOutlines(0, nHeadsFound) = oTextElement.String&#x0d;                    mOutlines(1, nHeadsFound) = nHeadingLevel REM oTextElement.ParaChapterNumberingLevel + 1&#x0d;                    mOutlines(2, nHeadsFound) = i&#x0d;                End If&#x0d;            End If&#x0d;        Wend&#x0d;    #End If&#x0d;    nHeadCount = nHeadsFound&#x0d;    ReDim Preserve mOutlines(2, nHeadCount + 1)&#x0d;    ReDim mLinks(nHeadCount + 1)&#x0d;End Sub&#x0d;&#x0d;&#x0d;Function fnHeadingLevel(oParagraph)&#x0d;    Dim sStyleName As String&#x0d;&#x0d;    #If OOO Then&#x0d;        sStyleName = fnGetParaStyleName(oParagraph)&#x0d;    #Else&#x0d;        sStyleName = oParagraph.style.NameLocal&#x0d;    #End If&#x0d;    If fnGetFamily(sStyleName) = &quot;h&quot; Then&#x0d;        Rem left(sStyleName,1) = &quot;h&quot; and instr(&quot;12345&quot;, mid(sStylename,2,1))&gt;0&#x0d;        fnHeadingLevel = fnGetLevel(sStyleName)&#x0d;    Else&#x0d;        fnHeadingLevel = 0&#x0d;    End If&#x0d;End Function&#x0d;&#x0d;&#x0d;Sub subEventListBoxLevels_Initiate(oEvent)&#x0d;    subShowLevel(oDialog.getControl(&quot;ListBoxHeadings&quot;), oEvent.Source.SelectedItemPos + 1)&#x0d;End Sub&#x0d;&#x0d;&#x0d;Sub subShowLevel(oListbox, nDisplayLevel As Integer)&#x0d;    Rem Called by:subMyCrossRef,  subEventListBoxLevels_Initiate&#x0d;    Rem Displays the headings in the listbox up to the specified level&#x0d;    Rem E.g.  subShowLevel(oListBox,2) would display headings with levels of 1 and 2&#x0d;    Dim i As Long, nPosn As Long&#x0d;&#x0d;    Call subRemoveListboxItems(oListbox)&#x0d;    nPosn = -1&#x0d;    For i = 0 To nHeadCount&#x0d;        If mOutlines(1, i) &lt;= nDisplayLevel Then&#x0d;            nPosn = nPosn + 1&#x0d;            Call subAddItem(oListbox, i, nPosn, nDisplayLevel)&#x0d;            mLinks(nPosn) = i&#x0d;        End If&#x0d;    Next&#x0d;End Sub&#x0d;&#x0d;&#x0d;Sub subAddSubLevel(oListbox, nPosn As Long)&#x0d;    Rem Display the sublevel of the heading at nPosn in the listbox&#x0d;    Dim i As Long, nLevel As Integer, nCurPosn As Long, nDiff As Long, j As Long&#x0d;    Dim nTotal As Long&#x0d;&#x0d;    nLevel = mOutlines(1, mLinks(nPosn)) + 1&#x0d;    nCurPosn = nPosn&#x0d;    i = mLinks(nPosn) + 1&#x0d;    While mOutlines(1, i) &gt;= nLevel&#x0d;        If mOutlines(1, i) = nLevel Then&#x0d;            nCurPosn = nCurPosn + 1&#x0d;            Call subAddItem(oListbox, i, nCurPosn, nLevel)&#x0d;            #If MSWD Then&#x0d;                nTotal = oDialog.ListBoxHeadings.ListCount&#x0d;                Rem oListBox.ListCount&#x0d;            #Else&#x0d;                nTotal = oListbox.getItemCount&#x0d;            #End If&#x0d;            For j = nTotal - 1 To nCurPosn + 1 Step -1&#x0d;                mLinks(j) = mLinks(j - 1)&#x0d;            Next&#x0d;            mLinks(nCurPosn) = i&#x0d;        End If&#x0d;        i = i + 1&#x0d;    Wend&#x0d;End Sub&#x0d;&#x0d;&#x0d;Sub subAddItem(oListbox, i As Long, nPosn As Long, nDisplayLevel As Integer)&#x0d;    Rem Insert an item into the listbox&#x0d;    Dim sInitial As String, nLevel As Integer&#x0d;&#x0d;    nLevel = mOutlines(1, i)&#x0d;    sInitial = String((Abs(nLevel) - 1) * nIndent, &quot; &quot;)&#x0d;    If mOutlines(1, i + 1) &gt; nLevel And nDisplayLevel = nLevel And nDisplayLevel &lt; 10 Then&#x0d;        sInitial = sInitial &amp; &quot;+&quot;&#x0d;    Else&#x0d;        sInitial = sInitial &amp; &quot;-&quot;&#x0d;    End If&#x0d;    oListbox.AddItem sInitial &amp; mOutlines(0, i), nPosn&#x0d;End Sub&#x0d;&#x0d;&#x0d;Sub subRemoveSubLevels(oListbox As Object, nPosn As Long)&#x0d;    Rem Remove from the listbox the sublevel headings of the heading at nPosn&#x0d;    Dim i As Integer, nCurLevel As Integer, nCurPosn As Long, nDiff As Long, nCount As Integer&#x0d;&#x0d;    nCurPosn = nPosn + 1&#x0d;    nCurLevel = mOutlines(1, mLinks(nPosn))&#x0d;    i = nCurPosn&#x0d;    While nPosn &lt; fnListboxItemCount(oListbox) And mOutlines(1, mLinks(nCurPosn)) &gt; nCurLevel&#x0d;        #If MSWD Then&#x0d;            oListbox.RemoveItem i&#x0d;        #Else&#x0d;            oListBox.removeItems(i, 1)&#x0d;        #End If&#x0d;        nCurPosn = nCurPosn + 1&#x0d;    Wend&#x0d;&#x0d;    Rem Shift the link array back&#x0d;    nDiff = nCurPosn - nPosn - 1&#x0d;&#x0d;    For i = nPosn + 1 To fnListboxItemCount(oListbox) - 1&#x0d;        mLinks(i) = mLinks(i + nDiff)&#x0d;    Next&#x0d;End Sub&#x0d;&#x0d;&#x0d;Function fnListboxItemCount(oListbox)&#x0d;    #If MSWD Then&#x0d;        fnListboxItemCount = oListbox.ListCount&#x0d;    #Else&#x0d;        fnListboxItemCount = oListbox.getItemCount&#x0d;    #End If&#x0d;End Function&#x0d;&#x0d;Sub subEventListBoxheadings_Initiate()&#x0d;    Rem Called when the listbox is double clicked&#x0d;    Dim oListBoxHeadings As Object, nSelectedItemPos As Long&#x0d;&#x0d;    Rem Check that headings are displayed&#x0d;    #If MSWD Then&#x0d;        If oDialog.ComboBoxType.value &lt;&gt; &quot;Headings&quot; Then&#x0d;            Exit Sub&#x0d;        End If&#x0d;        Rem set oListBoxHeadings = oDialog.ListBoxHeadings&#x0d;        Rem nSelectedItemPos = oListBoxHeadings.selectedItemPos&#x0d;        subAddRemoveNextLevel oDialog.ListBoxHeadings&#x0d;        Rem oListBoxHeadings.selectItemPos(oListBoxHeadings.itemCount -1, true)&#x0d;        Rem oListBoxHeadings.selectItemPos(nSelectedItemPos, true)&#x0d;    #Else&#x0d;        If oDialog.getControl(&quot;ListBoxType&quot;).selectedItemPos &lt;&gt; 0 Then&#x0d;            Exit Sub&#x0d;        End If&#x0d;&#x0d;        oListBoxHeadings = oDialog.getControl(&quot;ListBoxHeadings&quot;)&#x0d;        nSelectedItemPos = oListBoxHeadings.selectedItemPos&#x0d;        subAddRemoveNextLevel (oListBoxHeadings)&#x0d;        oListBoxHeadings.selectItemPos(oListBoxHeadings.itemCount -1, true)&#x0d;        oListBoxHeadings.selectItemPos(nSelectedItemPos, true)&#x0d;    #End If&#x0d;End Sub&#x0d;&#x0d;&#x0d;Sub subAddRemoveNextLevel(oListbox As Object)&#x0d;    Rem Called by: subEventListBoxheadings_Initiate&#x0d;    Dim nPosn As Long&#x0d;    Dim sSelection As String&#x0d;&#x0d;    #If MSWD Then&#x0d;        sSelection = oDialog.ListBoxHeadings.value&#x0d;        nPosn = oDialog.ListBoxHeadings.ListIndex&#x0d;    #Else&#x0d;        sSelection = oListbox.SelectedItem&#x0d;        nPosn = oListbox.selectedItemPos&#x0d;    #End If&#x0d;    If nPosn &lt; 0 Then   &apos;Don&apos;t think this could happen but just in case&#x0d;        Exit Sub&#x0d;    End If&#x0d;&#x0d;    If fnLevel(sSelection) &gt; 0 Then&#x0d;        Call subSetPlusMinus(oListbox, nPosn, &quot;+&quot;, &quot;-&quot;)&#x0d;        Call subAddSubLevel(oListbox, nPosn)&#x0d;    Else&#x0d;        Call subSetPlusMinus(oListbox, nPosn, &quot;-&quot;, &quot;+&quot;)&#x0d;        Call subRemoveSubLevels(oListbox, nPosn)&#x0d;    End If&#x0d;End Sub&#x0d;&#x0d;&#x0d;Sub subSetPlusMinus(oListbox As Object, nPosn As Long, sCur As String, sTo As String)&#x0d;    Rem Called by: subAddRemoveNextLevel&#x0d;    Rem Toggless the + and - in the currently selected item&#x0d;    Dim sSelection As String, nSignPos As Integer&#x0d;&#x0d;    #If MSWD Then&#x0d;        sSelection = oDialog.ListBoxHeadings.List(nPosn)&#x0d;        nSignPos = InStr(sSelection, sCur)&#x0d;        sSelection = Left(sSelection, nSignPos - 1) &amp; sTo &amp; _&#x0d;            Right(sSelection, Len(sSelection) - nSignPos)&#x0d;        oDialog.ListBoxHeadings.List(nPosn) = sSelection&#x0d;    #Else&#x0d;        sSelection = oListbox.getItem(nPosn)&#x0d;        oListBox.removeItems(nPosn, 1)&#x0d;        Mid(sSelection,instr(sSelection, sCur), 1, sTo)&#x0d;        oListBox.addItem(sSelection, nPosn)&#x0d;        oListBox.selectItemPos(nPosn, true)&#x0d;    #End If&#x0d;End Sub&#x0d;&#x0d;&#x0d;Function fnLevel(sSelection As String) As Integer&#x0d;    Rem Called by: fnGetListboxLevel,fnGetItem, subAddRemoveNextLevel&#x0d;    Rem Determines the level of the string by looking at the leading spaces and first symbol (highest level = 1)&#x0d;    Dim i As Integer, iLen As Integer&#x0d;    iLen = Len(sSelection)&#x0d;    i = 1&#x0d;    While i &lt; iLen And Mid(sSelection, i, 1) = &quot; &quot;&#x0d;        i = i + nIndent&#x0d;    Wend&#x0d;    If Mid(sSelection, i, 1) = &quot;+&quot; Then&#x0d;        fnLevel = Int((i - 1) / nIndent) + 1&#x0d;    Else&#x0d;        fnLevel = -1 * (Int((i - 1) / nIndent) + 1)&#x0d;    End If&#x0d;End Function&#x0d;&#x0d;&#x0d;Function fnGetListboxLevel(oListbox As Object) As Integer&#x0d;    Rem Returns the level of the currently selected item&#x0d;    fnGetListboxLevel = Abs(fnLevel(oListbox.SelectedItem))&#x0d;End Function&#x0d;&#x0d;&#x0d;Sub subCurrentWriterDocuments()&#x0d;    Dim oEnum As Object, oPosDoc As Object, i As Integer, j As Integer, nCurIndex As Integer&#x0d;    Dim oListboxDocs As Object, mDocNames() As String&#x0d;&#x0d;    #If MSWD Then&#x0d;        ReDim mDocNames(Documents.count)&#x0d;        j = 0&#x0d;        For i = 1 To Documents.count&#x0d;            If Documents(i).Path &lt;&gt; &quot;&quot; And Documents(i).Name &lt;&gt; ActiveDocument.Name Then&#x0d;                mDocNames(j) = Documents(i).Name&#x0d;                j = j + 1&#x0d;            End If&#x0d;        Next&#x0d;        mDocNames(j) = ActiveDocument.Name&#x0d;        ReDim Preserve mDocNames(j)&#x0d;        oDialog.ComboBoxDocs.List = mDocNames&#x0d;        oDialog.ComboBoxDocs.value = ActiveDocument.Name&#x0d;    #Else&#x0d;        oEnum = StarDesktop.getComponents.createEnumeration&#x0d;&#x0d;        Rem Count doc windows&#x0d;        i = 0&#x0d;        While oEnum.hasMoreElements&#x0d;            oPosDoc = oEnum.nextElement&#x0d;            If HasUnoInterfaces(oPosDoc, &quot;com.sun.star.frame.XModel&quot;) Then Rem Thanks to DannyB for this line&#x0d;                If oPosDoc.supportsService(&quot;com.sun.star.text.TextDocument&quot;) Then&#x0d;                    i = i + 1&#x0d;                End If&#x0d;            End If&#x0d;        Wend&#x0d;&#x0d;        ReDim mDocs(i)&#x0d;&#x0d;        i = 0&#x0d;        oListboxDocs = oDialog.getControl(&quot;ListBoxDocs&quot;)&#x0d;        oEnum = StarDesktop.getComponents.createEnumeration&#x0d;        While oEnum.hasMoreElements&#x0d;            oPosDoc = oEnum.nextElement&#x0d;            If HasUnoInterfaces(oPosDoc, &quot;com.sun.star.frame.XModel&quot;) Then&#x0d;                If oPosDoc.supportsService(&quot;com.sun.star.text.TextDocument&quot;) Then&#x0d;                    If oPosDoc.URL &lt;&gt; &quot;&quot; Or oPosDoc.CurrentController.Frame.Title = ThisComponent.CurrentController.Frame.Title Then&#x0d;                        mDocs(i) = oPosDoc&#x0d;                        oListboxDocs.addItem(oPosDoc.currentController.frame.title, i)&#x0d;                        If oPosDoc.URL = ThisComponent.URL Then&#x0d;                            nCurIndex = i&#x0d;                        End If&#x0d;                        i = i + 1&#x0d;                    End If&#x0d;                End If&#x0d;            End If&#x0d;        Wend&#x0d;        oListboxDocs.selectItemPos(nCurIndex, true)&#x0d;    #End If&#x0d;End Sub&#x0d;&#x0d;&#x0d;Sub subEventChangeDoc()&#x0d;    Dim oListboxDocs As Object, oDocTemp As Object&#x0d;&#x0d;    #If MSWD Then&#x0d;        Set oDoc = Documents.Item(oDialog.ComboBoxDocs.value)&#x0d;        oDialog.CheckBoxDirection.Enabled = ActiveDocument.Name = oDoc.Name&#x0d;    #Else&#x0d;        oListboxDocs = oDialog.getControl(&quot;ListBoxDocs&quot;)&#x0d;        oDoc = mDocs(oListboxDocs.selectedItemPos)&#x0d;        oDialog.getControl(&quot;CheckBoxDirection&quot;).Enable = (oDoc.URL = ThisComponent.URL)&#x0d;    #End If&#x0d;&#x0d;    Call subChangeType&#x0d;End Sub&#x0d;&#x0d;&#x0d;Sub subSaveDialogSettings()&#x0d;    Rem Uses module level variable: oDialog&#x0d;    Rem Uses global variable: mXRefDialogSettings&#x0d;    Dim i As Integer, mControls&#x0d;&#x0d;    mControls = oDialog.Controls&#x0d;    ReDim mXRefDialogSettings(UBound(mControls) + 1)&#x0d;    mXRefDialogSettings(0) = True&#x0d;&#x0d;    For i = 0 To UBound(mControls)&#x0d;        Select Case mControls(i).ImplementationName&#x0d;        Case &quot;stardiv.Toolkit.UnoEditControl&quot;&#x0d;            mXRefDialogSettings(i + 1) = mControls(i).Text&#x0d;        Rem case &quot;stardiv.Toolkit.UnoListBoxControl&quot;&#x0d;        Rem     mXRefDialogSettings(i+1) = mControls(i).SelectedItemPos&#x0d;        Case &quot;stardiv.Toolkit.UnoCheckBoxControl&quot;&#x0d;            mXRefDialogSettings(i + 1) = mControls(i).State&#x0d;        End Select&#x0d;    Next&#x0d;    oDialog.endExecute&#x0d;End Sub&#x0d;&#x0d;Sub subLoadDialogSettings()&#x0d;    Rem Uses module level variable: oDialog&#x0d;    Rem Uses global variable: mXRefDialogSettings&#x0d;    Dim i As Integer, mControls&#x0d;&#x0d;    mControls = oDialog.Controls&#x0d;    If mXRefDialogSettings(0) Then&#x0d;        For i = 0 To UBound(mControls)&#x0d;            Select Case mControls(i).ImplementationName&#x0d;            Case &quot;stardiv.Toolkit.UnoEditControl&quot;&#x0d;                mControls(i).Text = mXRefDialogSettings(i + 1)&#x0d;            Rem case &quot;stardiv.Toolkit.UnoListBoxControl&quot;&#x0d;            Rem     mControls(i).SelectItemPos(mXRefDialogSettings(i+1), true)&#x0d;            Case &quot;stardiv.Toolkit.UnoCheckBoxControl&quot;&#x0d;                mControls(i).State = mXRefDialogSettings(i + 1)&#x0d;            End Select&#x0d;        Next&#x0d;    End If&#x0d;End Sub&#x0d;&#x0d;Function fnSplit(sStrIn As String, sStrDelim As String, Optional lCount As Long)&#x0d;&#x0d;#If OOO Then&#x0d;    fnSplit = Split(sStrIn, sStrDelim)&#x0d;    Exit Function&#x0d;#End If&#x0d;#If Win16 Then&#x0d;    fnSplit = Split(sStrIn, sStrDelim)&#x0d;    Exit Function&#x0d;#End If&#x0d;&#x0d;Dim vOut() As Variant&#x0d;Dim strSubString As String&#x0d;Dim k As Integer&#x0d;Dim lDelimPos As Long&#x0d;Dim StrIn As String&#x0d;&#x0d;StrIn = sStrIn&#x0d;k = 0&#x0d;lDelimPos = InStr(StrIn, sStrDelim)&#x0d;&#x0d;Do While (lDelimPos)&#x0d;    Rem Get everything to the left of the delimiter&#x0d;    strSubString = Left(StrIn, lDelimPos - 1)&#x0d;    Rem Make the return array one element larger&#x0d;    ReDim Preserve vOut(k)&#x0d;    Rem Add the new element&#x0d;    vOut(k) = strSubString&#x0d;    k = k + 1&#x0d;    If lCount &lt;&gt; -1 And k = lCount Then&#x0d;    fnSplit = vOut&#x0d;    Exit Function&#x0d;    End If&#x0d;    Rem Only interested in what&apos;s right of delimiter&#x0d;    StrIn = Right(StrIn, (Len(StrIn) - _&#x0d;    (lDelimPos + Len(sStrDelim) - 1)))&#x0d;    Rem See if delimiter occurs again&#x0d;    lDelimPos = InStr(StrIn, sStrDelim)&#x0d;Loop&#x0d;&#x0d;Rem  No more delimiters in string.&#x0d;Rem  Add what&apos;s left as last element&#x0d;ReDim Preserve vOut(k)&#x0d;vOut(k) = StrIn&#x0d;&#x0d;fnSplit = vOut&#x0d;End Function&#x0d;&#x0d;</script:module>