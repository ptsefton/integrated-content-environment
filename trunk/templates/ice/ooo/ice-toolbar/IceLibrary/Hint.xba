<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Hint" script:language="StarBasic">#Const MSWD = False&#x0d;
#Const OOO = Not MSWD&#x0d;
&#x0d;
Rem *********************************************************************&#x0d;
Rem    University of Southern Queensland&#x0d;
Rem    Author : Cynthia&#x0d;
Rem    Hint Image reference :&#x0d;
Rem    http://commons.wikimedia.org/wiki/File:Help-books-aj.svg_aj_ash_01.svg#file,  By Schmierer,  320x320(31KB),  22/March/2006 with GNU General Public Liciense&#x0d;
Rem *********************************************************************&#x0d;
Sub Hint()&#x0d;
    #If OOO Then&#x0d;
           Rem this function is to load the hint function menu. thus not for word&#x0d;
        Dim oAutoTextContainer As Object, oAutoGroup&#x0d;
        Dim count As Integer, n As Integer&#x0d;
        Dim AutoName As String&#x0d;
        oAutoTextContainer = createUnoService(&quot;com.sun.star.text.AutoTextContainer&quot;)&#x0d;
        Dim Flag As Boolean&#x0d;
        count = 0&#x0d;
&#x0d;
        If Not oAutoTextContainer.hasByName(&quot;ICE Hint&quot;) Then&#x0d;
            printMsgbox (&quot;Sorry.  Hint AutoText does not exist. Reinstall the ICE Hint.bau or Check the AutoText Path&quot;)&#x0d;
        Else&#x0d;
            For n = 0 To oAutoTextContainer.count - 1&#x0d;
                oAutoGroup = oAutoTextContainer.getByIndex(n)&#x0d;
&#x0d;
                If oAutoGroup.Title = &quot;ICE Hint&quot; Then&#x0d;
                    If count = 0 Then&#x0d;
                        AutoName = oAutoGroup.Name&#x0d;
                    End If&#x0d;
                    count = count + 1&#x0d;
                End If&#x0d;
            Next n&#x0d;
            If count &gt; 1 Then&#x0d;
&#x0d;
                oAutoTextContainer.removeByName (AutoName)&#x0d;
                Flag = False&#x0d;
            End If&#x0d;
            oAutoGroup = oAutoTextContainer.getByName(&quot;ICE Hint&quot;)&#x0d;
            For n = 0 To oAutoGroup.count - 1&#x0d;
                If oAutoGroup.Titles(n) = &quot;Hint-empty&quot; Then&#x0d;
                    DialogLibraries.LoadLibrary (&quot;IceLibrary&quot;)&#x0d;
                    oDialog = CreateUnoDialog(DialogLibraries.IceLibrary.dlgHint)&#x0d;
                    oDialog.Execute&#x0d;
                    oDialog.dispose&#x0d;
                    Exit Sub&#x0d;
                Else&#x0d;
                    printMsgbox (&quot;Sorry.  Hint AutoText does not exist. Reinstall the ICE Hint.bau or Check the AutoText Path&quot;)&#x0d;
                End If&#x0d;
            Next&#x0d;
        End If&#x0d;
    #End If&#x0d;
End Sub&#x0d;
&#x0d;
Sub insertHint()&#x0d;
    Rem only for OOo&#x0d;
    Rem ----------------------------------------------------------------------&#x0d;
    #If OOO Then&#x0d;
        Dim Document   As Object&#x0d;
        Dim dispatcher As Object&#x0d;
        Dim oAutoTextContainer As Object, oAutoTextCursor, oAutoGroup&#x0d;
        Dim oAutoText As Object&#x0d;
        Dim Flag As Boolean&#x0d;
        Dim groupTitle As String&#x0d;
        Dim count As Integer, n As Integer, i As Integer&#x0d;
        groupTitle = &quot;&quot;&#x0d;
        Flag = False&#x0d;
        count = 0&#x0d;
        oAutoTextContainer = createUnoService(&quot;com.sun.star.text.AutoTextContainer&quot;)&#x0d;
        oAutoTextCursor = ThisComponent.Text.GetText().createTextCursor()&#x0d;
        For n = 0 To oAutoTextContainer.count - 1&#x0d;
           On Error GoTo noAutoText&#x0d;
            oAutoGroup = oAutoTextContainer.getByIndex(n)&#x0d;
&#x0d;
            If oAutoGroup.Title = &quot;ICE Hint&quot; Then&#x0d;
&#x0d;
                    For i = 0 To oAutoGroup.count - 1&#x0d;
                    If oAutoGroup.Titles(i) = &quot;Hint-empty&quot; Then&#x0d;
                        groupTitle = oAutoGroup.Title&#x0d;
&#x0d;
                        Document = ThisComponent.CurrentController.Frame&#x0d;
                        dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)&#x0d;
&#x0d;
                        Rem ----------------------------------------------------------------------&#x0d;
&#x0d;
                        Dim args4(0) As New com.sun.star.beans.PropertyValue&#x0d;
                        args4(0).Name = &quot;Group&quot;&#x0d;
                        args4(0).value = groupTitle&#x0d;
&#x0d;
                        dispatcher.executeDispatch(document, &quot;.uno:SetActGlossaryGroup&quot;, &quot;&quot;, 0, args4())&#x0d;
&#x0d;
                        Rem --------    --------------------------------------------------------------&#x0d;
                        Dim args5(1) As New com.sun.star.beans.PropertyValue&#x0d;
                        args5(0).Name = &quot;Group&quot;&#x0d;
                        args5(0).value = groupTitle&#x0d;
                        args5(1).Name = &quot;ShortName&quot;&#x0d;
                        args5(1).value = &quot;H&quot;&#x0d;
&#x0d;
                        dispatcher.executeDispatch(document, &quot;.uno:InsertGlossary&quot;, &quot;&quot;, 0, args5())&#x0d;
                        If Int(getOOoVersion()) = 2 Then&#x0d;
                            showHint()&#x0d;
                        End If&#x0d;
                        Exit Sub&#x0d;
                    End If&#x0d;
                Next i&#x0d;
            End If&#x0d;
        Next n&#x0d;
noAutoText:&#x0d;
        printMsgbox (&quot;Hint AutoText does not exist. Please update the ICE AutoText file.&quot;)&#x0d;
    #End If&#x0d;
&#x0d;
End Sub&#x0d;
&#x0d;
Sub DeleteallHints()&#x0d;
Rem ==================================================================================&#x0d;
Rem  Loop through the tables in the document. If the table is Hint table, then delete the table&#x0d;
Rem ==================================================================================&#x0d;
&#x0d;
    #If MSWD Then&#x0d;
        If fnIsThereAFile Then&#x0d;
            If ActiveDocument.Tables.count = 0 Then&#x0d;
                Rem Make sure there are tables in the doc...&#x0d;
                Exit Sub&#x0d;
            Else&#x0d;
    &#x0d;
                Dim aTable, subTable&#x0d;
                Dim aCell&#x0d;
    &#x0d;
                For Each aTable In ActiveDocument.Tables&#x0d;
                    Rem - Loop through the cells -----------------------&#x0d;
                    On Error GoTo notTrue&#x0d;
                    If aTable.Range.Cells.Item(2).ColumnIndex = 2 And aTable.Range.Cells.count = 3 Then&#x0d;
                        Set aCell = aTable.Cell(1, 2)&#x0d;
                        If aCell.Range.Paragraphs.count = 1 And aCell.Range.Paragraphs.style = &quot;p-hint&quot; Then&#x0d;
                           aTable.Delete&#x0d;
                        End If&#x0d;
                    Else&#x0d;
notTrue:&#x0d;
                        For Each subTable In aTable.Tables&#x0d;
                            On Error GoTo notTrue2&#x0d;
                            If subTable.Range.Cells.Item(2).ColumnIndex = 2 And subTable.Range.Cells.count = 3 Then&#x0d;
                                Set aCell = subTable.Cell(1, 2)&#x0d;
                                If aCell.Range.Paragraphs.count = 1 And aCell.Range.Paragraphs.style = &quot;p-hint&quot; Then&#x0d;
                                    subTable.Delete&#x0d;
                                End If&#x0d;
                            End If&#x0d;
notTrue2:&#x0d;
                            &#x0d;
                        Next subTable&#x0d;
                    End If&#x0d;
                Next aTable&#x0d;
            End If&#x0d;
        End If&#x0d;
    #Else&#x0d;
        Dim oTables, oTable, oCell&#x0d;
        Dim i, count&#x0d;
        Dim oTableCursor, oText, oCellCursor&#x0d;
        Dim sCellName&#x0d;
        Dim RowIndex, ColIndex&#x0d;
        Dim Rows, Cols&#x0d;
        Dim boo As Boolean&#x0d;
&#x0d;
        oTables = ThisComponent.getTextTables()&#x0d;
&#x0d;
        If Not oTables.hasElements() Then Exit Sub&#x0d;
        count = oTables.getCount() - 1&#x0d;
        For i = 0 To count&#x0d;
            oTable = oTables.getByIndex(i)&#x0d;
            Rows = oTable.getRows()&#x0d;
            Cols = oTable.getColumns()&#x0d;
            oTableCursor = oTable.createCursorByCellName(&quot;A1&quot;)&#x0d;
            oTableCursor.goRight(1,false)&#x0d;
            sCellName = oTableCursor.getRangeName()&#x0d;
            oCell = oTable.getCellByName(sCellName)&#x0d;
            oCellCursor = oCell.createTextCursor()&#x0d;
            If oCellCursor.paraStyleName = &quot;p-hint&quot; Then&#x0d;
                ThisComponent.GetText().removetextcontent (oTable)&#x0d;
                oTables = ThisComponent.getTextTables()&#x0d;
                If Not oTables.hasElements() Then Exit Sub&#x0d;
                count = oTables.getCount() - 1&#x0d;
                i = -1&#x0d;
             End If&#x0d;
        Next&#x0d;
    #End If&#x0d;
End Sub&#x0d;
&#x0d;
&#x0d;
&#x0d;
Sub HideHints()&#x0d;
Rem ==================================================================================&#x0d;
Rem  Loop through the tables in the document. If the table contains cells with&#x0d;
Rem  one of our AuthorIT table styles then format it accordingly. Otherwise skip it.&#x0d;
&#x0d;
Rem ==================================================================================&#x0d;
    #If MSWD Then&#x0d;
        If fnIsThereAFile() Then&#x0d;
            If ActiveDocument.Tables.count = 0 Then&#x0d;
                Rem Make sure there are tables in the doc...&#x0d;
                Exit Sub&#x0d;
            Else&#x0d;
    &#x0d;
                Dim aTable, subTable&#x0d;
                Dim aCell&#x0d;
    &#x0d;
                Rem - Loop through the tables -----------------------&#x0d;
                For Each aTable In ActiveDocument.Tables&#x0d;
                    Rem - Loop through the cells -----------------------&#x0d;
                    On Error GoTo notTrue&#x0d;
                    aTable.Range.Font.Hidden = False&#x0d;
                    If aTable.Range.Cells.count = 3 And aTable.Range.Cells.Item(2).ColumnIndex = 2 Then&#x0d;
                        Set aCell = aTable.Cell(1, 2)&#x0d;
                        If aCell.Range.Paragraphs.count = 1 And aCell.Range.Paragraphs.style = &quot;p-hint&quot; Then&#x0d;
                           aTable.Range.Font.Hidden = True&#x0d;
                        End If&#x0d;
                    Else&#x0d;
notTrue:&#x0d;
                        For Each subTable In aTable.Tables&#x0d;
                            On Error GoTo notTrue2&#x0d;
                            If subTable.Range.Cells.Item(2).ColumnIndex = 2 And subTable.Range.Cells.count = 3 Then&#x0d;
                                Set aCell = subTable.Cell(1, 2)&#x0d;
    &#x0d;
                                If aCell.Range.Paragraphs.count = 1 And aCell.Range.Paragraphs.style = &quot;p-hint&quot; Then&#x0d;
                                    Selection.Bookmarks.Add (&quot;CurrentPos&quot;)&#x0d;
                                    subTable.Range.Select&#x0d;
                                    Selection.MoveEnd&#x0d;
                                    Selection.Range.InsertAfter vbNewLine&#x0d;
    &#x0d;
                                    subTable.Range.Font.Hidden = True&#x0d;
    &#x0d;
                                    Rem reset the current position and then delete the bookmark&#x0d;
                                    Selection.GoTo what:=wdGoToBookmark, Name:=&quot;CurrentPos&quot;&#x0d;
                                    ActiveDocument.Bookmarks(&quot;CurrentPos&quot;).Delete&#x0d;
                                End If&#x0d;
    &#x0d;
                            End If&#x0d;
notTrue2:&#x0d;
                        Next subTable&#x0d;
                    End If&#x0d;
                Next aTable&#x0d;
    &#x0d;
            End If&#x0d;
        End If&#x0d;
    #Else&#x0d;
        Dim oTables, oTable, oCell&#x0d;
        Dim i, count&#x0d;
        Dim oTableCursor, oText, oCellCursor&#x0d;
        Dim sCellName&#x0d;
        Dim RowIndex, ColIndex&#x0d;
        Dim Rows, Cols&#x0d;
        Dim boo As Boolean&#x0d;
&#x0d;
        oTables = ThisComponent.getTextTables()&#x0d;
&#x0d;
        If Not oTables.hasElements() Then Exit Sub&#x0d;
&#x0d;
        For i = 0 To oTables.getCount() - 1&#x0d;
            oTable = oTables.getByIndex(i)&#x0d;
            Rows = oTable.getRows()&#x0d;
            Cols = oTable.getColumns()&#x0d;
            oTableCursor = oTable.createCursorByCellName(&quot;A1&quot;)&#x0d;
            oTableCursor.goRight(1,false)&#x0d;
            sCellName = oTableCursor.getRangeName()&#x0d;
            oCell = oTable.getCellByName(sCellName)&#x0d;
            oCellCursor = oCell.createTextCursor()&#x0d;
            If oCellCursor.paraStyleName = &quot;p-hint&quot; Then&#x0d;
                oTableCursor.goLeft(1,false)&#x0d;
&#x0d;
                For RowIndex = 1 To Rows.getCount()&#x0d;
                    For ColIndex = 1 To Cols.getCount()&#x0d;
                        sCellName = Chr(64 + ColIndex) &amp; RowIndex&#x0d;
                        oCell = oTable.getCellByName(sCellName)&#x0d;
                        oCellCursor = oCell.createTextCursorByRange(oCell)&#x0d;
                    Rem    boo = not(oCellCursor.charHidden)&#x0d;
                        oCellCursor.charHidden = True&#x0d;
                     Next&#x0d;
                Next&#x0d;
                hideTableBoundary()&#x0d;
             End If&#x0d;
&#x0d;
        Next&#x0d;
    #End If&#x0d;
End Sub&#x0d;
&#x0d;
&#x0d;
&#x0d;
&#x0d;
Sub ShowHints()&#x0d;
&#x0d;
Rem ==================================================================================&#x0d;
Rem  Loop through the tables in the document. If the table contains cells with&#x0d;
Rem  one of our AuthorIT table styles then format it accordingly. Otherwise skip it.&#x0d;
&#x0d;
Rem ==================================================================================&#x0d;
    #If MSWD Then&#x0d;
        If fnIsThereAFile() Then&#x0d;
            If ActiveDocument.Tables.count = 0 Then&#x0d;
             Rem Make sure there are tables in the doc...&#x0d;
                Exit Sub&#x0d;
            Else&#x0d;
    &#x0d;
                Dim aTable, subTable&#x0d;
                Dim aCell&#x0d;
    &#x0d;
                Rem - Loop through the tables -----------------------&#x0d;
                For Each aTable In ActiveDocument.Tables&#x0d;
                    Rem - Loop through the cells -----------------------&#x0d;
                    On Error GoTo notTrue&#x0d;
                    If aTable.Range.Cells.Item(2).ColumnIndex = 2 And aTable.Range.Cells.count = 3 Then&#x0d;
                        Set aCell = aTable.Cell(1, 2)&#x0d;
                        If aCell.Range.Paragraphs.count = 1 And aCell.Range.Paragraphs.style = &quot;p-hint&quot; Then&#x0d;
                           aTable.Range.Font.Hidden = False&#x0d;
                        End If&#x0d;
                    Else&#x0d;
notTrue:&#x0d;
                        For Each subTable In aTable.Tables&#x0d;
                           On Error GoTo notTrue2&#x0d;
                            If subTable.Range.Cells.Item(2).ColumnIndex = 2 And subTable.Range.Cells.count = 3 Then&#x0d;
                                Set aCell = subTable.Cell(1, 2)&#x0d;
                                If aCell.Range.Paragraphs.count = 1 And aCell.Range.Paragraphs.style = &quot;p-hint&quot; Then&#x0d;
                                    subTable.Range.Font.Hidden = False&#x0d;
                                End If&#x0d;
                            End If&#x0d;
notTrue2:&#x0d;
                        Next subTable&#x0d;
                    End If&#x0d;
                Next aTable&#x0d;
    &#x0d;
            End If&#x0d;
        End If&#x0d;
    #Else&#x0d;
&#x0d;
        Dim oTables, oTable, oCell&#x0d;
        Dim i, count&#x0d;
        Dim oTableCursor, oText, oCellCursor&#x0d;
        Dim sCellName&#x0d;
        Dim RowIndex, ColIndex&#x0d;
        Dim Rows, Cols&#x0d;
        Dim boo As Boolean&#x0d;
        oTables = ThisComponent.getTextTables()&#x0d;
&#x0d;
        If Not oTables.hasElements() Then Exit Sub&#x0d;
&#x0d;
        For i = 0 To oTables.getCount() - 1&#x0d;
            oTable = oTables.getByIndex(i)&#x0d;
            Rows = oTable.getRows()&#x0d;
            Cols = oTable.getColumns()&#x0d;
            oTableCursor = oTable.createCursorByCellName(&quot;A1&quot;)&#x0d;
            oTableCursor.goRight(1,false)&#x0d;
            sCellName = oTableCursor.getRangeName()&#x0d;
            oCell = oTable.getCellByName(sCellName)&#x0d;
            oCellCursor = oCell.createTextCursor()&#x0d;
            If oCellCursor.paraStyleName = &quot;p-hint&quot; Then&#x0d;
                oTableCursor.goLeft(1,false)&#x0d;
&#x0d;
                For RowIndex = 1 To Rows.getCount()&#x0d;
                    For ColIndex = 1 To Cols.getCount()&#x0d;
                        sCellName = Chr(64 + ColIndex) &amp; RowIndex&#x0d;
                        oCell = oTable.getCellByName(sCellName)&#x0d;
                        oCellCursor = oCell.createTextCursorByRange(oCell)&#x0d;
                        oCellCursor.charHidden = False&#x0d;
                     Next&#x0d;
                Next&#x0d;
                hideTableBoundary()&#x0d;
             End If&#x0d;
&#x0d;
        Next&#x0d;
&#x0d;
    #End If&#x0d;
End Sub&#x0d;
&#x0d;
Sub hideTableBoundary()&#x0d;
    #If OOO Then&#x0d;
        Rem OOO only&#x0d;
        Rem this hide the table boundary property of the doucment&#x0d;
        Rem ----------------------------------------------------------------------&#x0d;
        Rem define variables&#x0d;
        Dim Document   As Object&#x0d;
        Dim dispatcher As Object&#x0d;
        Rem ----------------------------------------------------------------------&#x0d;
        Rem get access to the document&#x0d;
        Document = ThisComponent.CurrentController.ViewSettings&#x0d;
        document.setPropertyValue(&quot;ShowTableBoundaries&quot;,false)&#x0d;
    #End If&#x0d;
End Sub</script:module>