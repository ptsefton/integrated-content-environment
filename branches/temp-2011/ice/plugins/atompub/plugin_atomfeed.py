#
#    Copyright (C) 2007  Distance and e-Learning Centre, 
#    University of Southern Queensland
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

""" Atomfeed plugin to produce atom feed
@requires: xml.etree or cElementTree or elementtree library
@requires: datetime, socket, atom
"""

try:
    from xml.etree import cElementTree as ElementTree
except ImportError:
    try:
        import cElementTree as ElementTree
    except ImportError:
        from elementtree import ElementTree

from datetime import datetime
from socket import gethostbyname, gethostname
import atom

pluginName = "ice.atomfeed"
pluginDesc = ""
pluginFunc = None           # either (or both) pluginFunc or pluginClass should
pluginClass = None          #   be set by the pluginInit() method
pluginInitialized = False   # set to True by pluginInit() method


def pluginInit(iceContext, **kwargs):
    """ plugin declaration method 
    @param iceContext: IceContext type
    @param kwargs: optional list of key=value pair params
    @return: handler object
    """
    global pluginFunc, pluginClass, pluginInitialized
    pluginFunc = None
    pluginClass = IceAtomFeed
    pluginInitialized = True
    return pluginFunc

class IceAtomFeed(object):
    """ Base class for IceAtomFeed to produce atom feed
    """
    def __init__(self, iceContext, title, rep):
        """ IceAtomFeed Constructor
        @param iceContext: 
        @type iceContext: IceContext
        @param title: title of the feed
        @type title: String
        @param rep: Current Repository
        @type rep: IceRepository
        @rtype: void
        """
        self.iceContext = iceContext
        self.hostname = gethostbyname(gethostname())
        self.iceWebPort = self.iceContext.config.port
        self.title = title
        self.rep = rep
        self.feed = atom.Feed()
    
    def getSearchFeed(self, requestData):
        """ get the feed
        @param requestData: list of requestData
        @type requestData: RequestData
        @rtype: String
        @return feed as xml
        """
        path = requestData.unquotedPath[9:]
        query = requestData.value("query")
        entries = []
        
        if query != None:
            results = self.rep.search(query)
            if len(results) > 0:
                for id in results:
                    entry = self.__getEntryForDocument(path, id)
                    if entry != None:
                        entries.append(entry)
        
        queryStr = "/?"
        for key in requestData.keys():
            val = requestData.value(key)
            if not key in ["func", "format"]:
                queryStr += "%s=%s&" % (key, val)
        altUrl = "http://%s:%s%s" % (self.hostname, self.iceWebPort, queryStr[:-1])
        self.feed.id = atom.Id(text = self.__getAtomTagId(query))
        self.feed.updated = atom.Updated(text = datetime.now().isoformat() + 'Z')
        self.feed.link = [atom.Link(href = "%s&format=atom" % altUrl, rel = "self"),
                          atom.Link(href = altUrl, rel = "alternate")]
        self.feed.author = [atom.Author(name = atom.Name(text = "ICE"))]
        self.feed.entry = entries
        feedXml = self.feed.ToString()
        
        #remove the namespace generated by elementtree/gdata as it causes
        #problems with some readers
        feedXml = feedXml.replace(":ns0", "")
        feedXml = feedXml.replace("ns0:", "")
        
        #insert the title manually as elementtree/gdata places the title in the
        #wrong position
        insertPos = feedXml.find("<entry>")
        feedXml = "%s<title>%s - %s</title>%s" % (feedXml[0:insertPos],
                                             self.title,
                                             query,
                                             feedXml[insertPos:])
        return feedXml
    
    def __getEntryForDocument(self, queryPath, id):
        """  
        @param queryPath: Query to search for the entry
        @type queryPath: String
        @param id: Id to be applied to atom feed
        @type id: String
        @rtype: ElementTree._Element, or xml_wrapper.ElementWrapper
        @return entry
        """
        docPath = self.rep.getPathForId(id)
        # check docPath
        if docPath.startswith(queryPath):
            item = self.rep.getItem(docPath)
            if item.hasHtml:
                docPath = self.iceContext.fs.splitExt(docPath)[0] + ".htm"
            title = item.getMeta("title")
            try:
                title = title.decode("utf-8")
            except:
                msg = "[Can not display title because of an encoding error!]"
                print "%s\n title='%s' path='%s'\n" % (msg, title, docPath)
                title = msg
            content = item.getRendition(".xhtml.body")
            if content is None:
                content = "<p>[Not rendered!]</p>"
            contentElem = ElementTree.XML(content)
            firstPara = contentElem.find("p")
            summary = "No summary"
            if firstPara != None:
                summary = ElementTree.tostring(firstPara)
            
            name = item.name
            lastModifiedTime = self.iceContext.fs.getModifiedTime(self.rep.getAbsPath(name))
            entryDate = datetime.fromtimestamp(lastModifiedTime).isoformat() + 'Z'
            srcUrl = "http://%s:%s%s" % (self.hostname, self.iceWebPort, docPath)
            
            entry = atom.Entry(title = atom.Title(text = title))
            entry.id = atom.Id(text = "urn:uid:%s" % id)
            entry.link = [atom.Link(href = srcUrl, rel = "alternate")]
            entry.updated = atom.Updated(text = entryDate)
            entry.published = atom.Published(text = entryDate)
            entry.summary = atom.Summary(summary_type = "html", text = unicode(summary, "utf-8"))
            entry.content = atom.Content(content_type = "html",  text = unicode(content, "utf-8"))
            return entry
        else:
            return None
    
    def __getAtomTagId(self, id):
        """ 
        @param id: Id to be applied in the tag 
        @type id: String
        @rtype: String
        @return tag
        """
        return "tag:%s,%s:%s" % (self.hostname, datetime.now().strftime("%Y"), id)
    